{
        "scope": "source.actionscript.3 meta.class.actionscript.3",

        "completions":
        [
"ArgumentError",
{ "trigger": "ArgumentError\tArgumentError" , "contents": "ArgumentError(${1:message:String});" },
"arguments",
"Array",
{ "trigger": "Array\tArray" , "contents": "Array(${1:values:restParam});" },
{ "trigger": "Array\tArray" , "contents": "Array();" },
{ "trigger": "concat\tArray" , "contents": "concat(${1:args:restParam});" },
{ "trigger": "every\tArray" , "contents": "every(${1:callback:Function});" },
{ "trigger": "filter\tArray" , "contents": "filter(${1:callback:Function});" },
{ "trigger": "forEach\tArray" , "contents": "forEach(${1:callback:Function});" },
{ "trigger": "indexOf\tArray" , "contents": "indexOf(${1:searchElement:*});" },
{ "trigger": "join\tArray" , "contents": "join();" },
{ "trigger": "lastIndexOf\tArray" , "contents": "lastIndexOf(${1:searchElement:*});" },
{ "trigger": "map\tArray" , "contents": "map(${1:callback:Function});" },
{ "trigger": "pop\tArray" , "contents": "pop();" },
{ "trigger": "push\tArray" , "contents": "push(${1:args:restParam});" },
{ "trigger": "reverse\tArray" , "contents": "reverse();" },
{ "trigger": "shift\tArray" , "contents": "shift();" },
{ "trigger": "slice\tArray" , "contents": "slice();" },
{ "trigger": "some\tArray" , "contents": "some(${1:callback:Function});" },
{ "trigger": "sortOn\tArray" , "contents": "sortOn(${1:fieldName:Object});" },
{ "trigger": "sort\tArray" , "contents": "sort(${1:args:restParam});" },
{ "trigger": "splice\tArray" , "contents": "splice(${1:startIndex:int},${2:deleteCount:uint},${3:values:restParam});" },
{ "trigger": "toLocaleString\tArray" , "contents": "toLocaleString();" },
{ "trigger": "toString\tArray" , "contents": "toString();" },
{ "trigger": "unshift\tArray" , "contents": "unshift(${1:args:restParam});" },
"Boolean",
{ "trigger": "Boolean\tBoolean" , "contents": "Boolean();" },
{ "trigger": "toString\tBoolean" , "contents": "toString();" },
{ "trigger": "valueOf\tBoolean" , "contents": "valueOf();" },
"Date",
{ "trigger": "Date\tDate" , "contents": "Date(${1:yearOrTimevalue:Object},${2:month:Number});" },
{ "trigger": "UTC\tDate" , "contents": "UTC(${1:year:Number},${2:month:Number});" },
{ "trigger": "getDate\tDate" , "contents": "getDate();" },
{ "trigger": "getDay\tDate" , "contents": "getDay();" },
{ "trigger": "getFullYear\tDate" , "contents": "getFullYear();" },
{ "trigger": "getHours\tDate" , "contents": "getHours();" },
{ "trigger": "getMilliseconds\tDate" , "contents": "getMilliseconds();" },
{ "trigger": "getMinutes\tDate" , "contents": "getMinutes();" },
{ "trigger": "getMonth\tDate" , "contents": "getMonth();" },
{ "trigger": "getSeconds\tDate" , "contents": "getSeconds();" },
{ "trigger": "getTime\tDate" , "contents": "getTime();" },
{ "trigger": "getTimezoneOffset\tDate" , "contents": "getTimezoneOffset();" },
{ "trigger": "getUTCDate\tDate" , "contents": "getUTCDate();" },
{ "trigger": "getUTCDay\tDate" , "contents": "getUTCDay();" },
{ "trigger": "getUTCFullYear\tDate" , "contents": "getUTCFullYear();" },
{ "trigger": "getUTCHours\tDate" , "contents": "getUTCHours();" },
{ "trigger": "getUTCMilliseconds\tDate" , "contents": "getUTCMilliseconds();" },
{ "trigger": "getUTCMinutes\tDate" , "contents": "getUTCMinutes();" },
{ "trigger": "getUTCMonth\tDate" , "contents": "getUTCMonth();" },
{ "trigger": "getUTCSeconds\tDate" , "contents": "getUTCSeconds();" },
{ "trigger": "parse\tDate" , "contents": "parse(${1:date:String});" },
{ "trigger": "setDate\tDate" , "contents": "setDate(${1:day:Number});" },
{ "trigger": "setFullYear\tDate" , "contents": "setFullYear(${1:year:Number},${2:month:Number},${3:day:Number});" },
{ "trigger": "setHours\tDate" , "contents": "setHours(${1:hour:Number},${2:minute:Number},${3:second:Number},${4:millisecond:Number});" },
{ "trigger": "setMilliseconds\tDate" , "contents": "setMilliseconds(${1:millisecond:Number});" },
{ "trigger": "setMinutes\tDate" , "contents": "setMinutes(${1:minute:Number},${2:second:Number},${3:millisecond:Number});" },
{ "trigger": "setMonth\tDate" , "contents": "setMonth(${1:month:Number},${2:day:Number});" },
{ "trigger": "setSeconds\tDate" , "contents": "setSeconds(${1:second:Number},${2:millisecond:Number});" },
{ "trigger": "setTime\tDate" , "contents": "setTime(${1:millisecond:Number});" },
{ "trigger": "setUTCDate\tDate" , "contents": "setUTCDate(${1:day:Number});" },
{ "trigger": "setUTCFullYear\tDate" , "contents": "setUTCFullYear(${1:year:Number},${2:month:Number},${3:day:Number});" },
{ "trigger": "setUTCHours\tDate" , "contents": "setUTCHours(${1:hour:Number},${2:minute:Number},${3:second:Number},${4:millisecond:Number});" },
{ "trigger": "setUTCMilliseconds\tDate" , "contents": "setUTCMilliseconds(${1:millisecond:Number});" },
{ "trigger": "setUTCMinutes\tDate" , "contents": "setUTCMinutes(${1:minute:Number},${2:second:Number},${3:millisecond:Number});" },
{ "trigger": "setUTCMonth\tDate" , "contents": "setUTCMonth(${1:month:Number},${2:day:Number});" },
{ "trigger": "setUTCSeconds\tDate" , "contents": "setUTCSeconds(${1:second:Number},${2:millisecond:Number});" },
{ "trigger": "toDateString\tDate" , "contents": "toDateString();" },
{ "trigger": "toLocaleDateString\tDate" , "contents": "toLocaleDateString();" },
{ "trigger": "toLocaleString\tDate" , "contents": "toLocaleString();" },
{ "trigger": "toLocaleTimeString\tDate" , "contents": "toLocaleTimeString();" },
{ "trigger": "toString\tDate" , "contents": "toString();" },
{ "trigger": "toTimeString\tDate" , "contents": "toTimeString();" },
{ "trigger": "toUTCString\tDate" , "contents": "toUTCString();" },
{ "trigger": "valueOf\tDate" , "contents": "valueOf();" },
"DefinitionError",
{ "trigger": "DefinitionError\tDefinitionError" , "contents": "DefinitionError(${1:message:String});" },
"Error",
{ "trigger": "Error\tError" , "contents": "Error(${1:message:String});" },
{ "trigger": "getStackTrace\tError" , "contents": "getStackTrace();" },
{ "trigger": "toString\tError" , "contents": "toString();" },
"EvalError",
{ "trigger": "EvalError\tEvalError" , "contents": "EvalError(${1:message:String});" },
"Function",
{ "trigger": "apply\tFunction" , "contents": "apply();" },
{ "trigger": "call\tFunction" , "contents": "call();" },
"int",
{ "trigger": "int\tint" , "contents": "int(${1:num:Object});" },
{ "trigger": "toExponential\tint" , "contents": "toExponential(${1:fractionDigits:uint});" },
{ "trigger": "toFixed\tint" , "contents": "toFixed(${1:fractionDigits:uint});" },
{ "trigger": "toPrecision\tint" , "contents": "toPrecision(${1:precision:uint});" },
{ "trigger": "toString\tint" , "contents": "toString(${1:radix:uint});" },
{ "trigger": "valueOf\tint" , "contents": "valueOf();" },
"Math",
{ "trigger": "abs\tMath" , "contents": "abs(${1:val:Number});" },
{ "trigger": "acos\tMath" , "contents": "acos(${1:val:Number});" },
{ "trigger": "asin\tMath" , "contents": "asin(${1:val:Number});" },
{ "trigger": "atan2\tMath" , "contents": "atan2(${1:y:Number},${2:x:Number});" },
{ "trigger": "atan\tMath" , "contents": "atan(${1:val:Number});" },
{ "trigger": "ceil\tMath" , "contents": "ceil(${1:val:Number});" },
{ "trigger": "cos\tMath" , "contents": "cos(${1:angleRadians:Number});" },
{ "trigger": "exp\tMath" , "contents": "exp(${1:val:Number});" },
{ "trigger": "floor\tMath" , "contents": "floor(${1:val:Number});" },
{ "trigger": "log\tMath" , "contents": "log(${1:val:Number});" },
{ "trigger": "max\tMath" , "contents": "max(${1:val1:Number},${2:val2:Number},${3:rest:restParam});" },
{ "trigger": "min\tMath" , "contents": "min(${1:val1:Number},${2:val2:Number},${3:rest:restParam});" },
{ "trigger": "pow\tMath" , "contents": "pow(${1:base:Number},${2:pow:Number});" },
{ "trigger": "random\tMath" , "contents": "random();" },
{ "trigger": "round\tMath" , "contents": "round(${1:val:Number});" },
{ "trigger": "sin\tMath" , "contents": "sin(${1:angleRadians:Number});" },
{ "trigger": "sqrt\tMath" , "contents": "sqrt(${1:val:Number});" },
{ "trigger": "tan\tMath" , "contents": "tan(${1:angleRadians:Number});" },
"Namespace",
{ "trigger": "Namespace\tNamespace" , "contents": "Namespace(${1:prefixValue:*},${2:uriValue:*});" },
{ "trigger": "Namespace\tNamespace" , "contents": "Namespace(${1:uriValue:*});" },
{ "trigger": "toString\tNamespace" , "contents": "toString();" },
{ "trigger": "valueOf\tNamespace" , "contents": "valueOf();" },
"Number",
{ "trigger": "Number\tNumber" , "contents": "Number(${1:num:Object});" },
{ "trigger": "toExponential\tNumber" , "contents": "toExponential(${1:fractionDigits:uint});" },
{ "trigger": "toFixed\tNumber" , "contents": "toFixed(${1:fractionDigits:uint});" },
{ "trigger": "toPrecision\tNumber" , "contents": "toPrecision(${1:precision:uint});" },
{ "trigger": "toString\tNumber" , "contents": "toString();" },
{ "trigger": "valueOf\tNumber" , "contents": "valueOf();" },
"Object",
{ "trigger": "Object\tObject" , "contents": "Object();" },
{ "trigger": "hasOwnProperty\tObject" , "contents": "hasOwnProperty(${1:name:String});" },
{ "trigger": "isPrototypeOf\tObject" , "contents": "isPrototypeOf(${1:theClass:Object});" },
{ "trigger": "propertyIsEnumerable\tObject" , "contents": "propertyIsEnumerable(${1:name:String});" },
{ "trigger": "setPropertyIsEnumerable\tObject" , "contents": "setPropertyIsEnumerable(${1:name:String});" },
{ "trigger": "toLocaleString\tObject" , "contents": "toLocaleString();" },
{ "trigger": "toString\tObject" , "contents": "toString();" },
{ "trigger": "valueOf\tObject" , "contents": "valueOf();" },
"QName",
{ "trigger": "QName\tQName" , "contents": "QName(${1:qname:QName});" },
{ "trigger": "QName\tQName" , "contents": "QName(${1:uri:Namespace},${2:localName:QName});" },
{ "trigger": "toString\tQName" , "contents": "toString();" },
{ "trigger": "valueOf\tQName" , "contents": "valueOf();" },
"RangeError",
{ "trigger": "RangeError\tRangeError" , "contents": "RangeError(${1:message:String});" },
"ReferenceError",
{ "trigger": "ReferenceError\tReferenceError" , "contents": "ReferenceError(${1:message:String});" },
"RegExp",
{ "trigger": "RegExp\tRegExp" , "contents": "RegExp(${1:re:String},${2:flags:String});" },
{ "trigger": "exec\tRegExp" , "contents": "exec(${1:str:String});" },
{ "trigger": "test\tRegExp" , "contents": "test(${1:str:String});" },
"SecurityError",
{ "trigger": "SecurityError\tSecurityError" , "contents": "SecurityError(${1:message:String});" },
"String",
{ "trigger": "String\tString" , "contents": "String(${1:val:String});" },
{ "trigger": "charAt\tString" , "contents": "charAt();" },
{ "trigger": "charCodeAt\tString" , "contents": "charCodeAt();" },
{ "trigger": "concat\tString" , "contents": "concat(${1:args:restParam});" },
{ "trigger": "fromCharCode\tString" , "contents": "fromCharCode(${1:charCodes:restParam});" },
{ "trigger": "indexOf\tString" , "contents": "indexOf(${1:val:String});" },
{ "trigger": "lastIndexOf\tString" , "contents": "lastIndexOf(${1:val:String});" },
{ "trigger": "localeCompare\tString" , "contents": "localeCompare(${1:other:String},${2:values:restParam});" },
{ "trigger": "match\tString" , "contents": "match(${1:pattern:*});" },
{ "trigger": "replace\tString" , "contents": "replace(${1:pattern:*},${2:repl:Object});" },
{ "trigger": "search\tString" , "contents": "search(${1:pattern:*});" },
{ "trigger": "slice\tString" , "contents": "slice();" },
{ "trigger": "split\tString" , "contents": "split(${1:delimiter:*});" },
{ "trigger": "substr\tString" , "contents": "substr();" },
{ "trigger": "substring\tString" , "contents": "substring();" },
{ "trigger": "toLocaleLowerCase\tString" , "contents": "toLocaleLowerCase();" },
{ "trigger": "toLocaleUpperCase\tString" , "contents": "toLocaleUpperCase();" },
{ "trigger": "toLowerCase\tString" , "contents": "toLowerCase();" },
{ "trigger": "toUpperCase\tString" , "contents": "toUpperCase();" },
{ "trigger": "valueOf\tString" , "contents": "valueOf();" },
"SyntaxError",
{ "trigger": "SyntaxError\tSyntaxError" , "contents": "SyntaxError(${1:message:String});" },
"TypeError",
{ "trigger": "TypeError\tTypeError" , "contents": "TypeError(${1:message:String});" },
"uint",
{ "trigger": "uint\tuint" , "contents": "uint(${1:num:Object});" },
{ "trigger": "toExponential\tuint" , "contents": "toExponential(${1:fractionDigits:uint});" },
{ "trigger": "toFixed\tuint" , "contents": "toFixed(${1:fractionDigits:uint});" },
{ "trigger": "toPrecision\tuint" , "contents": "toPrecision(${1:precision:uint});" },
{ "trigger": "toString\tuint" , "contents": "toString(${1:radix:uint});" },
{ "trigger": "valueOf\tuint" , "contents": "valueOf();" },
"URIError",
{ "trigger": "URIError\tURIError" , "contents": "URIError(${1:message:String});" },
"Vector",
{ "trigger": "Vector\tVector" , "contents": "Vector();" },
{ "trigger": "concat\tVector" , "contents": "concat(${1:args:restParam});" },
{ "trigger": "every\tVector" , "contents": "every(${1:callback:Function});" },
{ "trigger": "filter\tVector" , "contents": "filter(${1:callback:Function});" },
{ "trigger": "forEach\tVector" , "contents": "forEach(${1:callback:Function});" },
{ "trigger": "indexOf\tVector" , "contents": "indexOf(${1:searchElement:T});" },
{ "trigger": "join\tVector" , "contents": "join();" },
{ "trigger": "lastIndexOf\tVector" , "contents": "lastIndexOf(${1:searchElement:T});" },
{ "trigger": "map\tVector" , "contents": "map(${1:callback:Function});" },
{ "trigger": "pop\tVector" , "contents": "pop();" },
{ "trigger": "push\tVector" , "contents": "push(${1:args:restParam});" },
{ "trigger": "reverse\tVector" , "contents": "reverse();" },
{ "trigger": "shift\tVector" , "contents": "shift();" },
{ "trigger": "slice\tVector" , "contents": "slice();" },
{ "trigger": "some\tVector" , "contents": "some(${1:callback:Function});" },
{ "trigger": "sort\tVector" , "contents": "sort(${1:compareFunction:Function});" },
{ "trigger": "splice\tVector" , "contents": "splice(${1:startIndex:int});" },
{ "trigger": "toLocaleString\tVector" , "contents": "toLocaleString();" },
{ "trigger": "toString\tVector" , "contents": "toString();" },
{ "trigger": "unshift\tVector" , "contents": "unshift(${1:args:restParam});" },
"VerifyError",
{ "trigger": "VerifyError\tVerifyError" , "contents": "VerifyError(${1:message:String});" },
"XML",
{ "trigger": "XML\tXML" , "contents": "XML(${1:value:Object});" },
{ "trigger": "addNamespace\tXML" , "contents": "addNamespace(${1:ns:Object});" },
{ "trigger": "appendChild\tXML" , "contents": "appendChild(${1:child:Object});" },
{ "trigger": "attribute\tXML" , "contents": "attribute(${1:attributeName:*});" },
{ "trigger": "attributes\tXML" , "contents": "attributes();" },
{ "trigger": "childIndex\tXML" , "contents": "childIndex();" },
{ "trigger": "child\tXML" , "contents": "child(${1:propertyName:Object});" },
{ "trigger": "children\tXML" , "contents": "children();" },
{ "trigger": "comments\tXML" , "contents": "comments();" },
{ "trigger": "contains\tXML" , "contents": "contains(${1:value:XML});" },
{ "trigger": "copy\tXML" , "contents": "copy();" },
{ "trigger": "defaultSettings\tXML" , "contents": "defaultSettings();" },
{ "trigger": "descendants\tXML" , "contents": "descendants();" },
{ "trigger": "elements\tXML" , "contents": "elements();" },
{ "trigger": "hasComplexContent\tXML" , "contents": "hasComplexContent();" },
{ "trigger": "hasOwnProperty\tXML" , "contents": "hasOwnProperty(${1:p:String});" },
{ "trigger": "hasSimpleContent\tXML" , "contents": "hasSimpleContent();" },
{ "trigger": "inScopeNamespaces\tXML" , "contents": "inScopeNamespaces();" },
{ "trigger": "insertChildAfter\tXML" , "contents": "insertChildAfter(${1:child1:Object},${2:child2:Object});" },
{ "trigger": "insertChildBefore\tXML" , "contents": "insertChildBefore(${1:child1:Object},${2:child2:Object});" },
{ "trigger": "length\tXML" , "contents": "length();" },
{ "trigger": "localName\tXML" , "contents": "localName();" },
{ "trigger": "name\tXML" , "contents": "name();" },
{ "trigger": "namespaceDeclarations\tXML" , "contents": "namespaceDeclarations();" },
{ "trigger": "namespace\tXML" , "contents": "namespace();" },
{ "trigger": "nodeKind\tXML" , "contents": "nodeKind();" },
{ "trigger": "normalize\tXML" , "contents": "normalize();" },
{ "trigger": "parent\tXML" , "contents": "parent();" },
{ "trigger": "prependChild\tXML" , "contents": "prependChild(${1:value:Object});" },
{ "trigger": "processingInstructions\tXML" , "contents": "processingInstructions();" },
{ "trigger": "propertyIsEnumerable\tXML" , "contents": "propertyIsEnumerable(${1:p:String});" },
{ "trigger": "removeNamespace\tXML" , "contents": "removeNamespace(${1:ns:Namespace});" },
{ "trigger": "replace\tXML" , "contents": "replace(${1:propertyName:Object},${2:value:XML});" },
{ "trigger": "setChildren\tXML" , "contents": "setChildren(${1:value:Object});" },
{ "trigger": "setLocalName\tXML" , "contents": "setLocalName(${1:name:String});" },
{ "trigger": "setName\tXML" , "contents": "setName(${1:name:String});" },
{ "trigger": "setNamespace\tXML" , "contents": "setNamespace(${1:ns:Namespace});" },
{ "trigger": "setSettings\tXML" , "contents": "setSettings(${1:rest:restParam});" },
{ "trigger": "settings\tXML" , "contents": "settings();" },
{ "trigger": "text\tXML" , "contents": "text();" },
{ "trigger": "toString\tXML" , "contents": "toString();" },
{ "trigger": "toXMLString\tXML" , "contents": "toXMLString();" },
{ "trigger": "valueOf\tXML" , "contents": "valueOf();" },
"XMLList",
{ "trigger": "XMLList\tXMLList" , "contents": "XMLList(${1:value:Object});" },
{ "trigger": "attribute\tXMLList" , "contents": "attribute(${1:attributeName:*});" },
{ "trigger": "attributes\tXMLList" , "contents": "attributes();" },
{ "trigger": "child\tXMLList" , "contents": "child(${1:propertyName:Object});" },
{ "trigger": "children\tXMLList" , "contents": "children();" },
{ "trigger": "comments\tXMLList" , "contents": "comments();" },
{ "trigger": "contains\tXMLList" , "contents": "contains(${1:value:XML});" },
{ "trigger": "copy\tXMLList" , "contents": "copy();" },
{ "trigger": "descendants\tXMLList" , "contents": "descendants();" },
{ "trigger": "elements\tXMLList" , "contents": "elements();" },
{ "trigger": "hasComplexContent\tXMLList" , "contents": "hasComplexContent();" },
{ "trigger": "hasOwnProperty\tXMLList" , "contents": "hasOwnProperty(${1:p:String});" },
{ "trigger": "hasSimpleContent\tXMLList" , "contents": "hasSimpleContent();" },
{ "trigger": "length\tXMLList" , "contents": "length();" },
{ "trigger": "normalize\tXMLList" , "contents": "normalize();" },
{ "trigger": "parent\tXMLList" , "contents": "parent();" },
{ "trigger": "processingInstructions\tXMLList" , "contents": "processingInstructions();" },
{ "trigger": "propertyIsEnumerable\tXMLList" , "contents": "propertyIsEnumerable(${1:p:String});" },
{ "trigger": "text\tXMLList" , "contents": "text();" },
{ "trigger": "toString\tXMLList" , "contents": "toString();" },
{ "trigger": "toXMLString\tXMLList" , "contents": "toXMLString();" },
{ "trigger": "valueOf\tXMLList" , "contents": "valueOf();" },
"CustomActions",
{ "trigger": "getActions\tCustomActions" , "contents": "getActions(${1:name:String});" },
{ "trigger": "installActions\tCustomActions" , "contents": "installActions(${1:name:String},${2:data:String});" },
{ "trigger": "uninstallActions\tCustomActions" , "contents": "uninstallActions(${1:name:String});" },
"Methods",
"XMLUI",
{ "trigger": "accept\tXMLUI" , "contents": "accept();" },
{ "trigger": "cancel\tXMLUI" , "contents": "cancel();" },
{ "trigger": "getProperty\tXMLUI" , "contents": "getProperty(${1:name:String});" },
{ "trigger": "setProperty\tXMLUI" , "contents": "setProperty(${1:name:String},${2:value:String});" },
"URLFilePromise",
{ "trigger": "URLFilePromise\tURLFilePromise" , "contents": "URLFilePromise();" },
{ "trigger": "close\tURLFilePromise" , "contents": "close();" },
{ "trigger": "open\tURLFilePromise" , "contents": "open();" },
{ "trigger": "reportError\tURLFilePromise" , "contents": "reportError(${1:e:ErrorEvent});" },
"SecureSocketMonitor",
{ "trigger": "SecureSocketMonitor\tSecureSocketMonitor" , "contents": "SecureSocketMonitor(${1:host:String},${2:port:int});" },
{ "trigger": "createSocket\tSecureSocketMonitor" , "contents": "createSocket();" },
{ "trigger": "toString\tSecureSocketMonitor" , "contents": "toString();" },
"ServiceMonitor",
{ "trigger": "ServiceMonitor\tServiceMonitor" , "contents": "ServiceMonitor();" },
{ "trigger": "checkStatus\tServiceMonitor" , "contents": "checkStatus();" },
{ "trigger": "makeJavascriptSubclass\tServiceMonitor" , "contents": "makeJavascriptSubclass(${1:constructorFunction:Object});" },
{ "trigger": "start\tServiceMonitor" , "contents": "start();" },
{ "trigger": "stop\tServiceMonitor" , "contents": "stop();" },
{ "trigger": "toString\tServiceMonitor" , "contents": "toString();" },
"SocketMonitor",
{ "trigger": "SocketMonitor\tSocketMonitor" , "contents": "SocketMonitor(${1:host:String},${2:port:int});" },
{ "trigger": "checkStatus\tSocketMonitor" , "contents": "checkStatus();" },
{ "trigger": "createSocket\tSocketMonitor" , "contents": "createSocket();" },
{ "trigger": "toString\tSocketMonitor" , "contents": "toString();" },
"URLMonitor",
{ "trigger": "URLMonitor\tURLMonitor" , "contents": "URLMonitor(${1:urlRequest:URLRequest});" },
{ "trigger": "checkStatus\tURLMonitor" , "contents": "checkStatus();" },
{ "trigger": "toString\tURLMonitor" , "contents": "toString();" },
"ApplicationUpdater",
{ "trigger": "ApplicationUpdater\tApplicationUpdater" , "contents": "ApplicationUpdater();" },
{ "trigger": "cancelUpdate\tApplicationUpdater" , "contents": "cancelUpdate();" },
{ "trigger": "checkForUpdate\tApplicationUpdater" , "contents": "checkForUpdate();" },
{ "trigger": "checkNow\tApplicationUpdater" , "contents": "checkNow();" },
{ "trigger": "downloadUpdate\tApplicationUpdater" , "contents": "downloadUpdate();" },
{ "trigger": "initialize\tApplicationUpdater" , "contents": "initialize();" },
{ "trigger": "installFromAIRFile\tApplicationUpdater" , "contents": "installFromAIRFile(${1:file:File});" },
{ "trigger": "installUpdate\tApplicationUpdater" , "contents": "installUpdate();" },
"ApplicationUpdaterUI",
{ "trigger": "ApplicationUpdaterUI\tApplicationUpdaterUI" , "contents": "ApplicationUpdaterUI();" },
{ "trigger": "addResources\tApplicationUpdaterUI" , "contents": "addResources(${1:lang:String},${2:res:Object});" },
{ "trigger": "cancelUpdate\tApplicationUpdaterUI" , "contents": "cancelUpdate();" },
{ "trigger": "checkNow\tApplicationUpdaterUI" , "contents": "checkNow();" },
{ "trigger": "initialize\tApplicationUpdaterUI" , "contents": "initialize();" },
{ "trigger": "installFromAIRFile\tApplicationUpdaterUI" , "contents": "installFromAIRFile(${1:file:File});" },
"DownloadErrorEvent",
{ "trigger": "DownloadErrorEvent\tDownloadErrorEvent" , "contents": "DownloadErrorEvent(${1:type:String});" },
{ "trigger": "clone\tDownloadErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tDownloadErrorEvent" , "contents": "toString();" },
"StatusFileUpdateErrorEvent",
{ "trigger": "StatusFileUpdateErrorEvent\tStatusFileUpdateErrorEvent" , "contents": "StatusFileUpdateErrorEvent(${1:type:String});" },
{ "trigger": "clone\tStatusFileUpdateErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tStatusFileUpdateErrorEvent" , "contents": "toString();" },
"StatusFileUpdateEvent",
{ "trigger": "StatusFileUpdateEvent\tStatusFileUpdateEvent" , "contents": "StatusFileUpdateEvent(${1:type:String});" },
{ "trigger": "clone\tStatusFileUpdateEvent" , "contents": "clone();" },
{ "trigger": "toString\tStatusFileUpdateEvent" , "contents": "toString();" },
"StatusUpdateErrorEvent",
{ "trigger": "StatusUpdateErrorEvent\tStatusUpdateErrorEvent" , "contents": "StatusUpdateErrorEvent(${1:type:String});" },
{ "trigger": "clone\tStatusUpdateErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tStatusUpdateErrorEvent" , "contents": "toString();" },
"StatusUpdateEvent",
{ "trigger": "StatusUpdateEvent\tStatusUpdateEvent" , "contents": "StatusUpdateEvent(${1:type:String});" },
{ "trigger": "clone\tStatusUpdateEvent" , "contents": "clone();" },
{ "trigger": "toString\tStatusUpdateEvent" , "contents": "toString();" },
"UpdateEvent",
{ "trigger": "UpdateEvent\tUpdateEvent" , "contents": "UpdateEvent(${1:type:String});" },
{ "trigger": "clone\tUpdateEvent" , "contents": "clone();" },
{ "trigger": "toString\tUpdateEvent" , "contents": "toString();" },
"AccImpl",
{ "trigger": "enableAccessibility\tAccImpl" , "contents": "enableAccessibility();" },
"ButtonAccImpl",
{ "trigger": "enableAccessibility\tButtonAccImpl" , "contents": "enableAccessibility();" },
"CheckBoxAccImpl",
{ "trigger": "enableAccessibility\tCheckBoxAccImpl" , "contents": "enableAccessibility();" },
"ComboBoxAccImpl",
{ "trigger": "enableAccessibility\tComboBoxAccImpl" , "contents": "enableAccessibility();" },
"DataGridAccImpl",
{ "trigger": "enableAccessibility\tDataGridAccImpl" , "contents": "enableAccessibility();" },
"LabelButtonAccImpl",
{ "trigger": "enableAccessibility\tLabelButtonAccImpl" , "contents": "enableAccessibility();" },
"ListAccImpl",
{ "trigger": "enableAccessibility\tListAccImpl" , "contents": "enableAccessibility();" },
"RadioButtonAccImpl",
{ "trigger": "enableAccessibility\tRadioButtonAccImpl" , "contents": "enableAccessibility();" },
"SelectableListAccImpl",
{ "trigger": "enableAccessibility\tSelectableListAccImpl" , "contents": "enableAccessibility();" },
"TileListAccImpl",
{ "trigger": "enableAccessibility\tTileListAccImpl" , "contents": "enableAccessibility();" },
"UIComponentAccImpl",
{ "trigger": "enableAccessibility\tUIComponentAccImpl" , "contents": "enableAccessibility();" },
"BaseScrollPane",
{ "trigger": "BaseScrollPane\tBaseScrollPane" , "contents": "BaseScrollPane();" },
{ "trigger": "getStyleDefinition\tBaseScrollPane" , "contents": "getStyleDefinition();" },
"ScrollPane",
{ "trigger": "ScrollPane\tScrollPane" , "contents": "ScrollPane();" },
{ "trigger": "getStyleDefinition\tScrollPane" , "contents": "getStyleDefinition();" },
{ "trigger": "load\tScrollPane" , "contents": "load(${1:request:URLRequest});" },
{ "trigger": "refreshPane\tScrollPane" , "contents": "refreshPane();" },
{ "trigger": "update\tScrollPane" , "contents": "update();" },
"UILoader",
{ "trigger": "UILoader\tUILoader" , "contents": "UILoader();" },
{ "trigger": "close\tUILoader" , "contents": "close();" },
{ "trigger": "getStyleDefinition\tUILoader" , "contents": "getStyleDefinition();" },
{ "trigger": "loadBytes\tUILoader" , "contents": "loadBytes(${1:bytes:ByteArray});" },
{ "trigger": "load\tUILoader" , "contents": "load();" },
{ "trigger": "setSize\tUILoader" , "contents": "setSize(${1:w:Number},${2:h:Number});" },
{ "trigger": "unload\tUILoader" , "contents": "unload();" },
"BaseButton",
{ "trigger": "BaseButton\tBaseButton" , "contents": "BaseButton();" },
{ "trigger": "getStyleDefinition\tBaseButton" , "contents": "getStyleDefinition();" },
{ "trigger": "setMouseState\tBaseButton" , "contents": "setMouseState(${1:state:String});" },
"Button",
{ "trigger": "Button\tButton" , "contents": "Button();" },
{ "trigger": "getStyleDefinition\tButton" , "contents": "getStyleDefinition();" },
"ButtonLabelPlacement",
"CheckBox",
{ "trigger": "CheckBox\tCheckBox" , "contents": "CheckBox();" },
{ "trigger": "drawFocus\tCheckBox" , "contents": "drawFocus(${1:focused:Boolean});" },
{ "trigger": "getStyleDefinition\tCheckBox" , "contents": "getStyleDefinition();" },
"ColorPicker",
{ "trigger": "ColorPicker\tColorPicker" , "contents": "ColorPicker();" },
{ "trigger": "close\tColorPicker" , "contents": "close();" },
{ "trigger": "getStyleDefinition\tColorPicker" , "contents": "getStyleDefinition();" },
{ "trigger": "open\tColorPicker" , "contents": "open();" },
"ComboBox",
{ "trigger": "ComboBox\tComboBox" , "contents": "ComboBox();" },
{ "trigger": "addItemAt\tComboBox" , "contents": "addItemAt(${1:item:Object},${2:index:uint});" },
{ "trigger": "addItem\tComboBox" , "contents": "addItem(${1:item:Object});" },
{ "trigger": "close\tComboBox" , "contents": "close();" },
{ "trigger": "getItemAt\tComboBox" , "contents": "getItemAt(${1:index:uint});" },
{ "trigger": "getStyleDefinition\tComboBox" , "contents": "getStyleDefinition();" },
{ "trigger": "itemToLabel\tComboBox" , "contents": "itemToLabel(${1:item:Object});" },
{ "trigger": "open\tComboBox" , "contents": "open();" },
{ "trigger": "removeAll\tComboBox" , "contents": "removeAll();" },
{ "trigger": "removeItemAt\tComboBox" , "contents": "removeItemAt(${1:index:uint});" },
{ "trigger": "removeItem\tComboBox" , "contents": "removeItem(${1:item:Object});" },
{ "trigger": "replaceItemAt\tComboBox" , "contents": "replaceItemAt(${1:item:Object},${2:index:uint});" },
{ "trigger": "sortItemsOn\tComboBox" , "contents": "sortItemsOn(${1:field:String});" },
{ "trigger": "sortItems\tComboBox" , "contents": "sortItems(${1:sortArgs:restParam});" },
"DataGrid",
{ "trigger": "DataGrid\tDataGrid" , "contents": "DataGrid();" },
{ "trigger": "addColumnAt\tDataGrid" , "contents": "addColumnAt(${1:column:*},${2:index:uint});" },
{ "trigger": "addColumn\tDataGrid" , "contents": "addColumn(${1:column:*});" },
{ "trigger": "createItemEditor\tDataGrid" , "contents": "createItemEditor(${1:colIndex:uint},${2:rowIndex:uint});" },
{ "trigger": "destroyItemEditor\tDataGrid" , "contents": "destroyItemEditor();" },
{ "trigger": "editField\tDataGrid" , "contents": "editField(${1:index:uint},${2:dataField:String},${3:data:Object});" },
{ "trigger": "getCellRendererAt\tDataGrid" , "contents": "getCellRendererAt(${1:row:uint},${2:column:uint});" },
{ "trigger": "getColumnAt\tDataGrid" , "contents": "getColumnAt(${1:index:uint});" },
{ "trigger": "getColumnCount\tDataGrid" , "contents": "getColumnCount();" },
{ "trigger": "getColumnIndex\tDataGrid" , "contents": "getColumnIndex(${1:name:String});" },
{ "trigger": "getStyleDefinition\tDataGrid" , "contents": "getStyleDefinition();" },
{ "trigger": "itemToCellRenderer\tDataGrid" , "contents": "itemToCellRenderer(${1:item:Object});" },
{ "trigger": "removeAllColumns\tDataGrid" , "contents": "removeAllColumns();" },
{ "trigger": "removeColumnAt\tDataGrid" , "contents": "removeColumnAt(${1:index:uint});" },
{ "trigger": "scrollToIndex\tDataGrid" , "contents": "scrollToIndex(${1:newCaretIndex:int});" },
{ "trigger": "spaceColumnsEqually\tDataGrid" , "contents": "spaceColumnsEqually();" },
"Label",
{ "trigger": "Label\tLabel" , "contents": "Label();" },
{ "trigger": "getStyleDefinition\tLabel" , "contents": "getStyleDefinition();" },
"LabelButton",
{ "trigger": "LabelButton\tLabelButton" , "contents": "LabelButton();" },
{ "trigger": "getStyleDefinition\tLabelButton" , "contents": "getStyleDefinition();" },
"List",
{ "trigger": "List\tList" , "contents": "List();" },
{ "trigger": "getStyleDefinition\tList" , "contents": "getStyleDefinition();" },
{ "trigger": "itemToLabel\tList" , "contents": "itemToLabel(${1:item:Object});" },
{ "trigger": "scrollToIndex\tList" , "contents": "scrollToIndex(${1:newCaretIndex:int});" },
"NumericStepper",
{ "trigger": "NumericStepper\tNumericStepper" , "contents": "NumericStepper();" },
{ "trigger": "drawFocus\tNumericStepper" , "contents": "drawFocus(${1:focused:Boolean});" },
{ "trigger": "getStyleDefinition\tNumericStepper" , "contents": "getStyleDefinition();" },
{ "trigger": "setFocus\tNumericStepper" , "contents": "setFocus();" },
"ProgressBar",
{ "trigger": "ProgressBar\tProgressBar" , "contents": "ProgressBar();" },
{ "trigger": "getStyleDefinition\tProgressBar" , "contents": "getStyleDefinition();" },
{ "trigger": "reset\tProgressBar" , "contents": "reset();" },
{ "trigger": "setProgress\tProgressBar" , "contents": "setProgress(${1:value:Number},${2:maximum:Number});" },
"ProgressBarDirection",
"ProgressBarMode",
"RadioButton",
{ "trigger": "RadioButton\tRadioButton" , "contents": "RadioButton();" },
{ "trigger": "drawFocus\tRadioButton" , "contents": "drawFocus(${1:focused:Boolean});" },
{ "trigger": "getStyleDefinition\tRadioButton" , "contents": "getStyleDefinition();" },
"RadioButtonGroup",
{ "trigger": "RadioButtonGroup\tRadioButtonGroup" , "contents": "RadioButtonGroup(${1:name:String});" },
{ "trigger": "addRadioButton\tRadioButtonGroup" , "contents": "addRadioButton(${1:radioButton:RadioButton});" },
{ "trigger": "getGroup\tRadioButtonGroup" , "contents": "getGroup(${1:name:String});" },
{ "trigger": "getRadioButtonAt\tRadioButtonGroup" , "contents": "getRadioButtonAt(${1:index:int});" },
{ "trigger": "getRadioButtonIndex\tRadioButtonGroup" , "contents": "getRadioButtonIndex(${1:radioButton:RadioButton});" },
{ "trigger": "removeRadioButton\tRadioButtonGroup" , "contents": "removeRadioButton(${1:radioButton:RadioButton});" },
"ScrollBar",
{ "trigger": "ScrollBar\tScrollBar" , "contents": "ScrollBar();" },
{ "trigger": "getStyleDefinition\tScrollBar" , "contents": "getStyleDefinition();" },
{ "trigger": "setScrollProperties\tScrollBar" , "contents": "setScrollProperties(${1:pageSize:Number},${2:minScrollPosition:Number},${3:maxScrollPosition:Number});" },
{ "trigger": "setSize\tScrollBar" , "contents": "setSize(${1:width:Number},${2:height:Number});" },
"ScrollBarDirection",
"ScrollPolicy",
"SelectableList",
{ "trigger": "SelectableList\tSelectableList" , "contents": "SelectableList();" },
{ "trigger": "addItemAt\tSelectableList" , "contents": "addItemAt(${1:item:Object},${2:index:uint});" },
{ "trigger": "addItem\tSelectableList" , "contents": "addItem(${1:item:Object});" },
{ "trigger": "clearRendererStyle\tSelectableList" , "contents": "clearRendererStyle(${1:name:String});" },
{ "trigger": "clearSelection\tSelectableList" , "contents": "clearSelection();" },
{ "trigger": "getItemAt\tSelectableList" , "contents": "getItemAt(${1:index:uint});" },
{ "trigger": "getNextIndexAtLetter\tSelectableList" , "contents": "getNextIndexAtLetter(${1:firstLetter:String});" },
{ "trigger": "getRendererStyle\tSelectableList" , "contents": "getRendererStyle(${1:name:String});" },
{ "trigger": "getStyleDefinition\tSelectableList" , "contents": "getStyleDefinition();" },
{ "trigger": "invalidateItemAt\tSelectableList" , "contents": "invalidateItemAt(${1:index:uint});" },
{ "trigger": "invalidateItem\tSelectableList" , "contents": "invalidateItem(${1:item:Object});" },
{ "trigger": "invalidateList\tSelectableList" , "contents": "invalidateList();" },
{ "trigger": "isItemSelected\tSelectableList" , "contents": "isItemSelected(${1:item:Object});" },
{ "trigger": "itemToCellRenderer\tSelectableList" , "contents": "itemToCellRenderer(${1:item:Object});" },
{ "trigger": "itemToLabel\tSelectableList" , "contents": "itemToLabel(${1:item:Object});" },
{ "trigger": "removeAll\tSelectableList" , "contents": "removeAll();" },
{ "trigger": "removeItemAt\tSelectableList" , "contents": "removeItemAt(${1:index:uint});" },
{ "trigger": "removeItem\tSelectableList" , "contents": "removeItem(${1:item:Object});" },
{ "trigger": "replaceItemAt\tSelectableList" , "contents": "replaceItemAt(${1:item:Object},${2:index:uint});" },
{ "trigger": "scrollToIndex\tSelectableList" , "contents": "scrollToIndex(${1:newCaretIndex:int});" },
{ "trigger": "scrollToSelected\tSelectableList" , "contents": "scrollToSelected();" },
{ "trigger": "setRendererStyle\tSelectableList" , "contents": "setRendererStyle(${1:name:String},${2:style:Object});" },
{ "trigger": "sortItemsOn\tSelectableList" , "contents": "sortItemsOn(${1:field:String});" },
{ "trigger": "sortItems\tSelectableList" , "contents": "sortItems(${1:sortArgs:restParam});" },
"Slider",
{ "trigger": "Slider\tSlider" , "contents": "Slider();" },
{ "trigger": "getStyleDefinition\tSlider" , "contents": "getStyleDefinition();" },
{ "trigger": "setSize\tSlider" , "contents": "setSize(${1:width:Number},${2:height:Number});" },
"SliderDirection",
"TextArea",
{ "trigger": "TextArea\tTextArea" , "contents": "TextArea();" },
{ "trigger": "appendText\tTextArea" , "contents": "appendText(${1:text:String});" },
{ "trigger": "drawFocus\tTextArea" , "contents": "drawFocus(${1:focused:Boolean});" },
{ "trigger": "getLineMetrics\tTextArea" , "contents": "getLineMetrics(${1:lineIndex:int});" },
{ "trigger": "getStyleDefinition\tTextArea" , "contents": "getStyleDefinition();" },
{ "trigger": "setSelection\tTextArea" , "contents": "setSelection(${1:setSelection:int},${2:endIndex:int});" },
"TextInput",
{ "trigger": "TextInput\tTextInput" , "contents": "TextInput();" },
{ "trigger": "appendText\tTextInput" , "contents": "appendText(${1:text:String});" },
{ "trigger": "drawFocus\tTextInput" , "contents": "drawFocus(${1:focused:Boolean});" },
{ "trigger": "getLineMetrics\tTextInput" , "contents": "getLineMetrics(${1:index:int});" },
{ "trigger": "getStyleDefinition\tTextInput" , "contents": "getStyleDefinition();" },
{ "trigger": "setSelection\tTextInput" , "contents": "setSelection(${1:beginIndex:int},${2:endIndex:int});" },
"TileList",
{ "trigger": "TileList\tTileList" , "contents": "TileList();" },
{ "trigger": "getStyleDefinition\tTileList" , "contents": "getStyleDefinition();" },
{ "trigger": "itemToLabel\tTileList" , "contents": "itemToLabel(${1:item:Object});" },
{ "trigger": "scrollToIndex\tTileList" , "contents": "scrollToIndex(${1:newCaretIndex:int});" },
"UIScrollBar",
{ "trigger": "UIScrollBar\tUIScrollBar" , "contents": "UIScrollBar();" },
{ "trigger": "getStyleDefinition\tUIScrollBar" , "contents": "getStyleDefinition();" },
{ "trigger": "setScrollProperties\tUIScrollBar" , "contents": "setScrollProperties(${1:pageSize:Number},${2:minScrollPosition:Number},${3:maxScrollPosition:Number});" },
{ "trigger": "update\tUIScrollBar" , "contents": "update();" },
"DataGridCellEditor",
{ "trigger": "DataGridCellEditor\tDataGridCellEditor" , "contents": "DataGridCellEditor();" },
{ "trigger": "getStyleDefinition\tDataGridCellEditor" , "contents": "getStyleDefinition();" },
{ "trigger": "setMouseState\tDataGridCellEditor" , "contents": "setMouseState(${1:state:String});" },
"DataGridColumn",
{ "trigger": "DataGridColumn\tDataGridColumn" , "contents": "DataGridColumn();" },
{ "trigger": "itemToLabel\tDataGridColumn" , "contents": "itemToLabel(${1:data:Object});" },
{ "trigger": "toString\tDataGridColumn" , "contents": "toString();" },
"HeaderRenderer",
{ "trigger": "HeaderRenderer\tHeaderRenderer" , "contents": "HeaderRenderer();" },
{ "trigger": "getStyleDefinition\tHeaderRenderer" , "contents": "getStyleDefinition();" },
"CellRenderer",
{ "trigger": "CellRenderer\tCellRenderer" , "contents": "CellRenderer();" },
{ "trigger": "getStyleDefinition\tCellRenderer" , "contents": "getStyleDefinition();" },
{ "trigger": "setSize\tCellRenderer" , "contents": "setSize(${1:width:Number},${2:height:Number});" },
"ICellRenderer",
{ "trigger": "setMouseState\tICellRenderer" , "contents": "setMouseState(${1:state:String});" },
{ "trigger": "setSize\tICellRenderer" , "contents": "setSize(${1:width:Number},${2:height:Number});" },
"ImageCell",
{ "trigger": "ImageCell\tImageCell" , "contents": "ImageCell();" },
{ "trigger": "getStyleDefinition\tImageCell" , "contents": "getStyleDefinition();" },
"ListData",
{ "trigger": "ListData\tListData" , "contents": "ListData(${1:label:String},${2:icon:Object},${3:owner:UIComponent},${4:index:uint},${5:row:uint});" },
"TileListData",
{ "trigger": "TileListData\tTileListData" , "contents": "TileListData(${1:label:String},${2:icon:Object},${3:source:Object},${4:owner:UIComponent},${5:index:uint},${6:row:uint});" },
"IndeterminateBar",
{ "trigger": "IndeterminateBar\tIndeterminateBar" , "contents": "IndeterminateBar();" },
{ "trigger": "getStyleDefinition\tIndeterminateBar" , "contents": "getStyleDefinition();" },
"InvalidationType",
"UIComponent",
{ "trigger": "UIComponent\tUIComponent" , "contents": "UIComponent();" },
{ "trigger": "clearStyle\tUIComponent" , "contents": "clearStyle(${1:style:String});" },
{ "trigger": "drawFocus\tUIComponent" , "contents": "drawFocus(${1:focused:Boolean});" },
{ "trigger": "drawNow\tUIComponent" , "contents": "drawNow();" },
{ "trigger": "getFocus\tUIComponent" , "contents": "getFocus();" },
{ "trigger": "getStyleDefinition\tUIComponent" , "contents": "getStyleDefinition();" },
{ "trigger": "getStyleValue\tUIComponent" , "contents": "getStyleValue(${1:name:String});" },
{ "trigger": "getStyle\tUIComponent" , "contents": "getStyle(${1:style:String});" },
{ "trigger": "invalidate\tUIComponent" , "contents": "invalidate();" },
{ "trigger": "mergeStyles\tUIComponent" , "contents": "mergeStyles(${1:list:restParam});" },
{ "trigger": "move\tUIComponent" , "contents": "move(${1:x:Number},${2:y:Number});" },
{ "trigger": "setFocus\tUIComponent" , "contents": "setFocus();" },
{ "trigger": "setSize\tUIComponent" , "contents": "setSize(${1:width:Number},${2:height:Number});" },
{ "trigger": "setStyle\tUIComponent" , "contents": "setStyle(${1:style:String},${2:value:Object});" },
{ "trigger": "validateNow\tUIComponent" , "contents": "validateNow();" },
"DataProvider",
{ "trigger": "DataProvider\tDataProvider" , "contents": "DataProvider();" },
{ "trigger": "addItemAt\tDataProvider" , "contents": "addItemAt(${1:item:Object},${2:index:uint});" },
{ "trigger": "addItem\tDataProvider" , "contents": "addItem(${1:item:Object});" },
{ "trigger": "addItemsAt\tDataProvider" , "contents": "addItemsAt(${1:items:Object},${2:index:uint});" },
{ "trigger": "addItems\tDataProvider" , "contents": "addItems(${1:items:Object});" },
{ "trigger": "clone\tDataProvider" , "contents": "clone();" },
{ "trigger": "concat\tDataProvider" , "contents": "concat(${1:items:Object});" },
{ "trigger": "getItemAt\tDataProvider" , "contents": "getItemAt(${1:index:uint});" },
{ "trigger": "getItemIndex\tDataProvider" , "contents": "getItemIndex(${1:item:Object});" },
{ "trigger": "invalidateItemAt\tDataProvider" , "contents": "invalidateItemAt(${1:index:int});" },
{ "trigger": "invalidateItem\tDataProvider" , "contents": "invalidateItem(${1:item:Object});" },
{ "trigger": "invalidate\tDataProvider" , "contents": "invalidate();" },
{ "trigger": "merge\tDataProvider" , "contents": "merge(${1:newData:Object});" },
{ "trigger": "removeAll\tDataProvider" , "contents": "removeAll();" },
{ "trigger": "removeItemAt\tDataProvider" , "contents": "removeItemAt(${1:index:uint});" },
{ "trigger": "removeItem\tDataProvider" , "contents": "removeItem(${1:item:Object});" },
{ "trigger": "replaceItemAt\tDataProvider" , "contents": "replaceItemAt(${1:newItem:Object},${2:index:uint});" },
{ "trigger": "replaceItem\tDataProvider" , "contents": "replaceItem(${1:newItem:Object},${2:oldItem:Object});" },
{ "trigger": "sortOn\tDataProvider" , "contents": "sortOn(${1:fieldName:Object});" },
{ "trigger": "sort\tDataProvider" , "contents": "sort(${1:sortArgs:restParam});" },
{ "trigger": "toArray\tDataProvider" , "contents": "toArray();" },
{ "trigger": "toString\tDataProvider" , "contents": "toString();" },
"SimpleCollectionItem",
{ "trigger": "SimpleCollectionItem\tSimpleCollectionItem" , "contents": "SimpleCollectionItem();" },
"TileListCollectionItem",
{ "trigger": "TileListCollectionItem\tTileListCollectionItem" , "contents": "TileListCollectionItem();" },
"ProLoader",
{ "trigger": "ProLoader\tProLoader" , "contents": "ProLoader();" },
{ "trigger": "close\tProLoader" , "contents": "close();" },
{ "trigger": "loadBytes\tProLoader" , "contents": "loadBytes(${1:bytes:ByteArray});" },
{ "trigger": "loadFilePromise\tProLoader" , "contents": "loadFilePromise(${1:promise:Object});" },
{ "trigger": "load\tProLoader" , "contents": "load(${1:request:URLRequest});" },
{ "trigger": "unloadAndStop\tProLoader" , "contents": "unloadAndStop();" },
{ "trigger": "unload\tProLoader" , "contents": "unload();" },
"ProLoaderInfo",
"ColorPickerEvent",
{ "trigger": "ColorPickerEvent\tColorPickerEvent" , "contents": "ColorPickerEvent(${1:type:String},${2:color:uint});" },
{ "trigger": "clone\tColorPickerEvent" , "contents": "clone();" },
{ "trigger": "toString\tColorPickerEvent" , "contents": "toString();" },
"ComponentEvent",
{ "trigger": "ComponentEvent\tComponentEvent" , "contents": "ComponentEvent(${1:type:String});" },
{ "trigger": "clone\tComponentEvent" , "contents": "clone();" },
{ "trigger": "toString\tComponentEvent" , "contents": "toString();" },
"DataChangeEvent",
{ "trigger": "DataChangeEvent\tDataChangeEvent" , "contents": "DataChangeEvent(${1:eventType:String},${2:changeType:String},${3:items:Array});" },
{ "trigger": "clone\tDataChangeEvent" , "contents": "clone();" },
{ "trigger": "toString\tDataChangeEvent" , "contents": "toString();" },
"DataChangeType",
"DataGridEvent",
{ "trigger": "DataGridEvent\tDataGridEvent" , "contents": "DataGridEvent(${1:type:String});" },
{ "trigger": "clone\tDataGridEvent" , "contents": "clone();" },
{ "trigger": "toString\tDataGridEvent" , "contents": "toString();" },
"DataGridEventReason",
"InteractionInputType",
"ListEvent",
{ "trigger": "ListEvent\tListEvent" , "contents": "ListEvent(${1:type:String});" },
{ "trigger": "clone\tListEvent" , "contents": "clone();" },
{ "trigger": "toString\tListEvent" , "contents": "toString();" },
"RSLErrorEvent",
{ "trigger": "RSLErrorEvent\tRSLErrorEvent" , "contents": "RSLErrorEvent(${1:type:String});" },
"RSLEvent",
{ "trigger": "RSLEvent\tRSLEvent" , "contents": "RSLEvent(${1:type:String});" },
"ScrollEvent",
{ "trigger": "ScrollEvent\tScrollEvent" , "contents": "ScrollEvent(${1:direction:String},${2:delta:Number},${3:position:Number});" },
{ "trigger": "clone\tScrollEvent" , "contents": "clone();" },
{ "trigger": "toString\tScrollEvent" , "contents": "toString();" },
"SliderEvent",
{ "trigger": "SliderEvent\tSliderEvent" , "contents": "SliderEvent(${1:type:String},${2:value:Number},${3:clickTarget:String},${4:triggerEvent:String});" },
{ "trigger": "clone\tSliderEvent" , "contents": "clone();" },
{ "trigger": "toString\tSliderEvent" , "contents": "toString();" },
"SliderEventClickTarget",
"IKArmature",
{ "trigger": "getBoneByName\tIKArmature" , "contents": "getBoneByName(${1:targetName:String});" },
{ "trigger": "registerElements\tIKArmature" , "contents": "registerElements(${1:container:DisplayObjectContainer});" },
"IKBone",
"IKEvent",
{ "trigger": "IKEvent\tIKEvent" , "contents": "IKEvent(${1:type:String});" },
"IKJoint",
{ "trigger": "clearSpringAngle\tIKJoint" , "contents": "clearSpringAngle();" },
{ "trigger": "clearSpringPoint\tIKJoint" , "contents": "clearSpringPoint();" },
{ "trigger": "getChildAt\tIKJoint" , "contents": "getChildAt(${1:iChild:int});" },
{ "trigger": "getChildIndex\tIKJoint" , "contents": "getChildIndex(${1:child:IKJoint});" },
{ "trigger": "getJointValue\tIKJoint" , "contents": "getJointValue(${1:dof:int});" },
{ "trigger": "getSpringAngle\tIKJoint" , "contents": "getSpringAngle();" },
{ "trigger": "getSpringPt\tIKJoint" , "contents": "getSpringPt();" },
{ "trigger": "hasPhysics\tIKJoint" , "contents": "hasPhysics();" },
{ "trigger": "hasSpringAngle\tIKJoint" , "contents": "hasSpringAngle();" },
{ "trigger": "hasSpringPoint\tIKJoint" , "contents": "hasSpringPoint();" },
{ "trigger": "isConstrained\tIKJoint" , "contents": "isConstrained(${1:dof:int});" },
{ "trigger": "isEnabled\tIKJoint" , "contents": "isEnabled(${1:dof:int});" },
{ "trigger": "setConstrained\tIKJoint" , "contents": "setConstrained(${1:dof:int},${2:constrained:Boolean});" },
{ "trigger": "setEnabled\tIKJoint" , "contents": "setEnabled(${1:dof:int},${2:enable:Boolean});" },
{ "trigger": "setSpringAngle\tIKJoint" , "contents": "setSpringAngle(${1:angle:Number});" },
{ "trigger": "setSpringPt\tIKJoint" , "contents": "setSpringPt(${1:pt:Point});" },
"IKManager",
{ "trigger": "getArmatureAt\tIKManager" , "contents": "getArmatureAt(${1:index:int});" },
{ "trigger": "getArmatureByName\tIKManager" , "contents": "getArmatureByName(${1:name:String});" },
{ "trigger": "setStage\tIKManager" , "contents": "setStage(${1:stage:DisplayObjectContainer});" },
{ "trigger": "trackAllArmatures\tIKManager" , "contents": "trackAllArmatures();" },
{ "trigger": "trackIKArmature\tIKManager" , "contents": "trackIKArmature(${1:theTree:IKArmature});" },
{ "trigger": "trackIKObject\tIKManager" , "contents": "trackIKObject(${1:target:DisplayObject});" },
"IKMover",
{ "trigger": "IKMover\tIKMover" , "contents": "IKMover(${1:endEffector:IKJoint},${2:targetIn:Point});" },
{ "trigger": "moveTo\tIKMover" , "contents": "moveTo(${1:targetIn:Point});" },
"Locale",
{ "trigger": "addDelayedInstance\tLocale" , "contents": "addDelayedInstance(${1:instance:Object},${2:stringID:String});" },
{ "trigger": "addXMLPath\tLocale" , "contents": "addXMLPath(${1:langCode:String},${2:path:String});" },
{ "trigger": "checkXMLStatus\tLocale" , "contents": "checkXMLStatus();" },
{ "trigger": "getDefaultLang\tLocale" , "contents": "getDefaultLang();" },
{ "trigger": "initialize\tLocale" , "contents": "initialize();" },
{ "trigger": "loadLanguageXML\tLocale" , "contents": "loadLanguageXML(${1:xmlLanguageCode:String});" },
{ "trigger": "loadStringEx\tLocale" , "contents": "loadStringEx(${1:stringID:String},${2:languageCode:String});" },
{ "trigger": "loadString\tLocale" , "contents": "loadString(${1:id:String});" },
{ "trigger": "setDefaultLang\tLocale" , "contents": "setDefaultLang(${1:langCode:String});" },
{ "trigger": "setLoadCallback\tLocale" , "contents": "setLoadCallback(${1:loadCallback:Function});" },
{ "trigger": "setString\tLocale" , "contents": "setString(${1:stringID:String},${2:languageCode:String},${3:stringValue:String});" },
"LivePreviewParent",
{ "trigger": "LivePreviewParent\tLivePreviewParent" , "contents": "LivePreviewParent();" },
{ "trigger": "onResize\tLivePreviewParent" , "contents": "onResize(${1:width:Number},${2:height:Number});" },
{ "trigger": "onUpdate\tLivePreviewParent" , "contents": "onUpdate(${1:updateArray:restParam});" },
"FocusManager",
{ "trigger": "FocusManager\tFocusManager" , "contents": "FocusManager(${1:container:DisplayObjectContainer});" },
{ "trigger": "activate\tFocusManager" , "contents": "activate();" },
{ "trigger": "deactivate\tFocusManager" , "contents": "deactivate();" },
{ "trigger": "findFocusManagerComponent\tFocusManager" , "contents": "findFocusManagerComponent(${1:component:InteractiveObject});" },
{ "trigger": "getFocus\tFocusManager" , "contents": "getFocus();" },
{ "trigger": "getNextFocusManagerComponent\tFocusManager" , "contents": "getNextFocusManagerComponent();" },
{ "trigger": "hideFocus\tFocusManager" , "contents": "hideFocus();" },
{ "trigger": "setFocus\tFocusManager" , "contents": "setFocus(${1:component:InteractiveObject});" },
{ "trigger": "showFocus\tFocusManager" , "contents": "showFocus();" },
"IFocusManager",
{ "trigger": "activate\tIFocusManager" , "contents": "activate();" },
{ "trigger": "deactivate\tIFocusManager" , "contents": "deactivate();" },
{ "trigger": "findFocusManagerComponent\tIFocusManager" , "contents": "findFocusManagerComponent(${1:component:InteractiveObject});" },
{ "trigger": "getFocus\tIFocusManager" , "contents": "getFocus();" },
{ "trigger": "getNextFocusManagerComponent\tIFocusManager" , "contents": "getNextFocusManagerComponent();" },
{ "trigger": "hideFocus\tIFocusManager" , "contents": "hideFocus();" },
{ "trigger": "setFocus\tIFocusManager" , "contents": "setFocus(${1:o:InteractiveObject});" },
{ "trigger": "showFocus\tIFocusManager" , "contents": "showFocus();" },
"IFocusManagerComponent",
{ "trigger": "drawFocus\tIFocusManagerComponent" , "contents": "drawFocus(${1:draw:Boolean});" },
{ "trigger": "setFocus\tIFocusManagerComponent" , "contents": "setFocus();" },
"IFocusManagerGroup",
"StyleManager",
{ "trigger": "StyleManager\tStyleManager" , "contents": "StyleManager();" },
{ "trigger": "clearComponentStyle\tStyleManager" , "contents": "clearComponentStyle(${1:component:Object},${2:name:String});" },
{ "trigger": "clearStyle\tStyleManager" , "contents": "clearStyle(${1:name:String});" },
{ "trigger": "getComponentStyle\tStyleManager" , "contents": "getComponentStyle(${1:component:Object},${2:name:String});" },
{ "trigger": "getStyle\tStyleManager" , "contents": "getStyle(${1:name:String});" },
{ "trigger": "registerInstance\tStyleManager" , "contents": "registerInstance(${1:instance:UIComponent});" },
{ "trigger": "setComponentStyle\tStyleManager" , "contents": "setComponentStyle(${1:component:Object},${2:name:String},${3:style:Object});" },
{ "trigger": "setStyle\tStyleManager" , "contents": "setStyle(${1:name:String},${2:style:Object});" },
"AdjustColor",
{ "trigger": "AdjustColor\tAdjustColor" , "contents": "AdjustColor();" },
{ "trigger": "AllValuesAreSet\tAdjustColor" , "contents": "AllValuesAreSet();" },
{ "trigger": "CalculateFinalFlatArray\tAdjustColor" , "contents": "CalculateFinalFlatArray();" },
"Animator",
{ "trigger": "Animator\tAnimator" , "contents": "Animator();" },
{ "trigger": "fromXMLString\tAnimator" , "contents": "fromXMLString(${1:xmlString:String});" },
{ "trigger": "matricesEqual\tAnimator" , "contents": "matricesEqual(${1:a:Matrix},${2:b:Matrix});" },
"Animator3D",
{ "trigger": "Animator3D\tAnimator3D" , "contents": "Animator3D();" },
{ "trigger": "convertMatrixToMatrix3D\tAnimator3D" , "contents": "convertMatrixToMatrix3D(${1:mat2D:Matrix});" },
{ "trigger": "matrices3DEqual\tAnimator3D" , "contents": "matrices3DEqual(${1:a:Matrix3D},${2:b:Matrix3D});" },
"AnimatorBase",
{ "trigger": "AnimatorBase\tAnimatorBase" , "contents": "AnimatorBase();" },
{ "trigger": "end\tAnimatorBase" , "contents": "end();" },
{ "trigger": "nextFrame\tAnimatorBase" , "contents": "nextFrame();" },
{ "trigger": "pause\tAnimatorBase" , "contents": "pause();" },
{ "trigger": "play\tAnimatorBase" , "contents": "play();" },
{ "trigger": "processCurrentFrame\tAnimatorBase" , "contents": "processCurrentFrame(${1:parent:MovieClip},${2:anim:AnimatorBase},${3:startEnterFrame:Boolean});" },
{ "trigger": "registerParentFrameHandler\tAnimatorBase" , "contents": "registerParentFrameHandler(${1:parent:MovieClip},${2:anim:AnimatorBase},${3:spanStart:int});" },
{ "trigger": "resume\tAnimatorBase" , "contents": "resume();" },
{ "trigger": "rewind\tAnimatorBase" , "contents": "rewind();" },
{ "trigger": "startFrameEvents\tAnimatorBase" , "contents": "startFrameEvents();" },
{ "trigger": "stop\tAnimatorBase" , "contents": "stop();" },
{ "trigger": "useCurrentFrame\tAnimatorBase" , "contents": "useCurrentFrame(${1:enable:Boolean},${2:spanStart:int});" },
"AnimatorFactory",
{ "trigger": "AnimatorFactory\tAnimatorFactory" , "contents": "AnimatorFactory(${1:motion:MotionBase});" },
"AnimatorFactory3D",
{ "trigger": "AnimatorFactory3D\tAnimatorFactory3D" , "contents": "AnimatorFactory3D(${1:motion:MotionBase});" },
"AnimatorFactoryBase",
{ "trigger": "AnimatorFactoryBase\tAnimatorFactoryBase" , "contents": "AnimatorFactoryBase(${1:motion:MotionBase});" },
{ "trigger": "addTargetInfo\tAnimatorFactoryBase" , "contents": "addTargetInfo(${1:targetParent:DisplayObject},${2:targetName:String});" },
{ "trigger": "addTarget\tAnimatorFactoryBase" , "contents": "addTarget(${1:target:DisplayObject});" },
"AnimatorFactoryUniversal",
{ "trigger": "AnimatorFactoryUniversal\tAnimatorFactoryUniversal" , "contents": "AnimatorFactoryUniversal(${1:motion:MotionBase},${2:motionArray:Array});" },
"AnimatorUniversal",
{ "trigger": "AnimatorUniversal\tAnimatorUniversal" , "contents": "AnimatorUniversal();" },
{ "trigger": "setTargetState\tAnimatorUniversal" , "contents": "setTargetState();" },
"BezierEase",
{ "trigger": "BezierEase\tBezierEase" , "contents": "BezierEase();" },
{ "trigger": "getValue\tBezierEase" , "contents": "getValue(${1:time:Number},${2:begin:Number},${3:change:Number},${4:duration:Number});" },
"BezierSegment",
{ "trigger": "BezierSegment\tBezierSegment" , "contents": "BezierSegment(${1:a:Point},${2:b:Point},${3:c:Point},${4:d:Point});" },
{ "trigger": "getCubicCoefficients\tBezierSegment" , "contents": "getCubicCoefficients(${1:a:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "getCubicRoots\tBezierSegment" , "contents": "getCubicRoots();" },
{ "trigger": "getQuadraticRoots\tBezierSegment" , "contents": "getQuadraticRoots(${1:a:Number},${2:b:Number},${3:c:Number});" },
{ "trigger": "getSingleValue\tBezierSegment" , "contents": "getSingleValue(${1:t:Number});" },
{ "trigger": "getValue\tBezierSegment" , "contents": "getValue(${1:t:Number});" },
{ "trigger": "getYForX\tBezierSegment" , "contents": "getYForX(${1:x:Number});" },
"Color",
{ "trigger": "Color\tColor" , "contents": "Color();" },
{ "trigger": "fromXML\tColor" , "contents": "fromXML(${1:xml:XML});" },
{ "trigger": "interpolateColor\tColor" , "contents": "interpolateColor(${1:fromColor:uint},${2:toColor:uint},${3:progress:Number});" },
{ "trigger": "interpolateTransform\tColor" , "contents": "interpolateTransform(${1:fromColor:ColorTransform},${2:toColor:ColorTransform},${3:progress:Number});" },
{ "trigger": "setTint\tColor" , "contents": "setTint(${1:tintColor:uint},${2:tintMultiplier:Number});" },
"ColorMatrix",
{ "trigger": "ColorMatrix\tColorMatrix" , "contents": "ColorMatrix();" },
{ "trigger": "GetFlatArray\tColorMatrix" , "contents": "GetFlatArray();" },
{ "trigger": "SetBrightnessMatrix\tColorMatrix" , "contents": "SetBrightnessMatrix(${1:value:Number});" },
{ "trigger": "SetContrastMatrix\tColorMatrix" , "contents": "SetContrastMatrix(${1:value:Number});" },
{ "trigger": "SetHueMatrix\tColorMatrix" , "contents": "SetHueMatrix(${1:angle:Number});" },
{ "trigger": "SetSaturationMatrix\tColorMatrix" , "contents": "SetSaturationMatrix(${1:value:Number});" },
"CustomEase",
{ "trigger": "CustomEase\tCustomEase" , "contents": "CustomEase();" },
{ "trigger": "getValue\tCustomEase" , "contents": "getValue(${1:time:Number},${2:begin:Number},${3:change:Number},${4:duration:Number});" },
"DynamicMatrix",
{ "trigger": "DynamicMatrix\tDynamicMatrix" , "contents": "DynamicMatrix(${1:width:int},${2:height:int});" },
{ "trigger": "Add\tDynamicMatrix" , "contents": "Add(${1:inMatrix:DynamicMatrix});" },
{ "trigger": "GetHeight\tDynamicMatrix" , "contents": "GetHeight();" },
{ "trigger": "GetValue\tDynamicMatrix" , "contents": "GetValue(${1:row:int},${2:col:int});" },
{ "trigger": "GetWidth\tDynamicMatrix" , "contents": "GetWidth();" },
{ "trigger": "LoadIdentity\tDynamicMatrix" , "contents": "LoadIdentity();" },
{ "trigger": "LoadZeros\tDynamicMatrix" , "contents": "LoadZeros();" },
{ "trigger": "MultiplyNumber\tDynamicMatrix" , "contents": "MultiplyNumber(${1:value:Number});" },
{ "trigger": "Multiply\tDynamicMatrix" , "contents": "Multiply(${1:inMatrix:DynamicMatrix});" },
{ "trigger": "SetValue\tDynamicMatrix" , "contents": "SetValue(${1:row:int},${2:col:int},${3:value:Number});" },
"FunctionEase",
{ "trigger": "FunctionEase\tFunctionEase" , "contents": "FunctionEase();" },
{ "trigger": "getValue\tFunctionEase" , "contents": "getValue(${1:time:Number},${2:begin:Number},${3:change:Number},${4:duration:Number});" },
"ITween",
{ "trigger": "getValue\tITween" , "contents": "getValue(${1:time:Number},${2:begin:Number},${3:change:Number},${4:duration:Number});" },
"Keyframe",
{ "trigger": "Keyframe\tKeyframe" , "contents": "Keyframe();" },
{ "trigger": "getTween\tKeyframe" , "contents": "getTween(${1:target:String});" },
"KeyframeBase",
{ "trigger": "KeyframeBase\tKeyframeBase" , "contents": "KeyframeBase();" },
{ "trigger": "affectsTweenable\tKeyframeBase" , "contents": "affectsTweenable(${1:tweenableName:String});" },
{ "trigger": "getValue\tKeyframeBase" , "contents": "getValue(${1:tweenableName:String});" },
{ "trigger": "setAdjustColorProperty\tKeyframeBase" , "contents": "setAdjustColorProperty(${1:filterIndex:int},${2:propertyName:String},${3:value:*});" },
{ "trigger": "setValue\tKeyframeBase" , "contents": "setValue(${1:tweenableName:String},${2:newValue:Number});" },
"MatrixTransformer",
{ "trigger": "getRotationRadians\tMatrixTransformer" , "contents": "getRotationRadians(${1:m:Matrix});" },
{ "trigger": "getRotation\tMatrixTransformer" , "contents": "getRotation(${1:m:Matrix});" },
{ "trigger": "getScaleX\tMatrixTransformer" , "contents": "getScaleX(${1:m:Matrix});" },
{ "trigger": "getScaleY\tMatrixTransformer" , "contents": "getScaleY(${1:m:Matrix});" },
{ "trigger": "getSkewXRadians\tMatrixTransformer" , "contents": "getSkewXRadians(${1:m:Matrix});" },
{ "trigger": "getSkewX\tMatrixTransformer" , "contents": "getSkewX(${1:m:Matrix});" },
{ "trigger": "getSkewYRadians\tMatrixTransformer" , "contents": "getSkewYRadians(${1:m:Matrix});" },
{ "trigger": "getSkewY\tMatrixTransformer" , "contents": "getSkewY(${1:m:Matrix});" },
{ "trigger": "matchInternalPointWithExternal\tMatrixTransformer" , "contents": "matchInternalPointWithExternal(${1:m:Matrix},${2:internalPoint:Point},${3:externalPoint:Point});" },
{ "trigger": "rotateAroundExternalPoint\tMatrixTransformer" , "contents": "rotateAroundExternalPoint(${1:m:Matrix},${2:x:Number},${3:y:Number},${4:angleDegrees:Number});" },
{ "trigger": "rotateAroundInternalPoint\tMatrixTransformer" , "contents": "rotateAroundInternalPoint(${1:m:Matrix},${2:x:Number},${3:y:Number},${4:angleDegrees:Number});" },
{ "trigger": "setRotationRadians\tMatrixTransformer" , "contents": "setRotationRadians(${1:m:Matrix},${2:rotation:Number});" },
{ "trigger": "setRotation\tMatrixTransformer" , "contents": "setRotation(${1:m:Matrix},${2:rotation:Number});" },
{ "trigger": "setScaleX\tMatrixTransformer" , "contents": "setScaleX(${1:m:Matrix},${2:scaleX:Number});" },
{ "trigger": "setScaleY\tMatrixTransformer" , "contents": "setScaleY(${1:m:Matrix},${2:scaleY:Number});" },
{ "trigger": "setSkewXRadians\tMatrixTransformer" , "contents": "setSkewXRadians(${1:m:Matrix},${2:skewX:Number});" },
{ "trigger": "setSkewX\tMatrixTransformer" , "contents": "setSkewX(${1:m:Matrix},${2:skewX:Number});" },
{ "trigger": "setSkewYRadians\tMatrixTransformer" , "contents": "setSkewYRadians(${1:m:Matrix},${2:skewY:Number});" },
{ "trigger": "setSkewY\tMatrixTransformer" , "contents": "setSkewY(${1:m:Matrix},${2:skewY:Number});" },
"Motion",
{ "trigger": "Motion\tMotion" , "contents": "Motion();" },
{ "trigger": "fromXMLString\tMotion" , "contents": "fromXMLString(${1:xmlString:String});" },
{ "trigger": "getColorTransform\tMotion" , "contents": "getColorTransform(${1:index:int});" },
{ "trigger": "getFilters\tMotion" , "contents": "getFilters(${1:index:Number});" },
{ "trigger": "interpolateFilters\tMotion" , "contents": "interpolateFilters(${1:fromFilters:Array},${2:toFilters:Array},${3:progress:Number});" },
{ "trigger": "interpolateFilter\tMotion" , "contents": "interpolateFilter(${1:fromFilter:BitmapFilter},${2:toFilter:BitmapFilter},${3:progress:Number});" },
"MotionBase",
{ "trigger": "MotionBase\tMotionBase" , "contents": "MotionBase();" },
{ "trigger": "addFilterPropertyArray\tMotionBase" , "contents": "addFilterPropertyArray(${1:index:int},${2:name:String},${3:values:Array});" },
{ "trigger": "addKeyframe\tMotionBase" , "contents": "addKeyframe(${1:newKeyframe:KeyframeBase});" },
{ "trigger": "addPropertyArray\tMotionBase" , "contents": "addPropertyArray(${1:name:String},${2:values:Array});" },
{ "trigger": "getColorTransform\tMotionBase" , "contents": "getColorTransform(${1:index:int});" },
{ "trigger": "getCurrentKeyframe\tMotionBase" , "contents": "getCurrentKeyframe(${1:index:int},${2:tweenableName:String});" },
{ "trigger": "getFilters\tMotionBase" , "contents": "getFilters(${1:index:Number});" },
{ "trigger": "getMatrix3D\tMotionBase" , "contents": "getMatrix3D(${1:index:int});" },
{ "trigger": "getMatrix\tMotionBase" , "contents": "getMatrix(${1:index:int});" },
{ "trigger": "getNextKeyframe\tMotionBase" , "contents": "getNextKeyframe(${1:index:int},${2:tweenableName:String});" },
{ "trigger": "getValue\tMotionBase" , "contents": "getValue(${1:index:Number},${2:tweenableName:String});" },
{ "trigger": "initFilters\tMotionBase" , "contents": "initFilters(${1:filterClasses:Array},${2:gradientSubarrayLengths:Array});" },
{ "trigger": "overrideTargetTransform\tMotionBase" , "contents": "overrideTargetTransform();" },
{ "trigger": "setValue\tMotionBase" , "contents": "setValue(${1:index:int},${2:tweenableName:String},${3:value:Number});" },
{ "trigger": "useRotationConcat\tMotionBase" , "contents": "useRotationConcat(${1:index:int});" },
"MotionEvent",
{ "trigger": "MotionEvent\tMotionEvent" , "contents": "MotionEvent(${1:type:String});" },
"RotateDirection",
"SimpleEase",
{ "trigger": "SimpleEase\tSimpleEase" , "contents": "SimpleEase();" },
{ "trigger": "easeNone\tSimpleEase" , "contents": "easeNone(${1:time:Number},${2:begin:Number},${3:change:Number},${4:duration:Number});" },
{ "trigger": "easeQuadPercent\tSimpleEase" , "contents": "easeQuadPercent(${1:time:Number},${2:begin:Number},${3:change:Number},${4:duration:Number},${5:percent:Number});" },
{ "trigger": "getValue\tSimpleEase" , "contents": "getValue(${1:time:Number},${2:begin:Number},${3:change:Number},${4:duration:Number});" },
"Source",
{ "trigger": "Source\tSource" , "contents": "Source();" },
"Tweenables",
"Back",
{ "trigger": "easeInOut\tBack" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tBack" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tBack" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Bounce",
{ "trigger": "easeInOut\tBounce" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tBounce" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tBounce" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Circular",
{ "trigger": "easeInOut\tCircular" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tCircular" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tCircular" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Cubic",
{ "trigger": "easeInOut\tCubic" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tCubic" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tCubic" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Elastic",
{ "trigger": "easeInOut\tElastic" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tElastic" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tElastic" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Exponential",
{ "trigger": "easeInOut\tExponential" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tExponential" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tExponential" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Linear",
{ "trigger": "easeInOut\tLinear" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tLinear" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeNone\tLinear" , "contents": "easeNone(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tLinear" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Quadratic",
{ "trigger": "easeInOut\tQuadratic" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tQuadratic" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tQuadratic" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Quartic",
{ "trigger": "easeInOut\tQuartic" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tQuartic" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tQuartic" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Quintic",
{ "trigger": "easeInOut\tQuintic" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tQuintic" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tQuintic" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Sine",
{ "trigger": "easeInOut\tSine" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tSine" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tSine" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"RSLInfo",
{ "trigger": "RSLInfo\tRSLInfo" , "contents": "RSLInfo();" },
{ "trigger": "addEntry\tRSLInfo" , "contents": "addEntry(${1:url:String});" },
{ "trigger": "load\tRSLInfo" , "contents": "load();" },
"RSLPreloader",
{ "trigger": "RSLPreloader\tRSLPreloader" , "contents": "RSLPreloader();" },
{ "trigger": "addRSLInfo\tRSLPreloader" , "contents": "addRSLInfo(${1:info:RSLInfo});" },
{ "trigger": "getRSLInfoAt\tRSLPreloader" , "contents": "getRSLInfoAt(${1:index:int});" },
{ "trigger": "loadContent\tRSLPreloader" , "contents": "loadContent();" },
{ "trigger": "start\tRSLPreloader" , "contents": "start();" },
"SWZInfo",
{ "trigger": "SWZInfo\tSWZInfo" , "contents": "SWZInfo(${1:digest:String});" },
"TLFTextField",
{ "trigger": "TLFTextField\tTLFTextField" , "contents": "TLFTextField();" },
{ "trigger": "appendText\tTLFTextField" , "contents": "appendText(${1:newText:String});" },
{ "trigger": "getCharBoundaries\tTLFTextField" , "contents": "getCharBoundaries(${1:charIndex:int});" },
{ "trigger": "getCharIndexAtPoint\tTLFTextField" , "contents": "getCharIndexAtPoint(${1:x:Number},${2:y:Number});" },
{ "trigger": "getFirstCharInParagraph\tTLFTextField" , "contents": "getFirstCharInParagraph(${1:charIndex:int});" },
{ "trigger": "getImageReference\tTLFTextField" , "contents": "getImageReference(${1:id:String});" },
{ "trigger": "getLineIndexAtPoint\tTLFTextField" , "contents": "getLineIndexAtPoint(${1:x:Number},${2:y:Number});" },
{ "trigger": "getLineIndexOfChar\tTLFTextField" , "contents": "getLineIndexOfChar(${1:charIndex:int});" },
{ "trigger": "getLineLength\tTLFTextField" , "contents": "getLineLength(${1:lineIndex:int});" },
{ "trigger": "getLineMetrics\tTLFTextField" , "contents": "getLineMetrics(${1:lineIndex:int});" },
{ "trigger": "getLineOffset\tTLFTextField" , "contents": "getLineOffset(${1:lineIndex:int});" },
{ "trigger": "getLineText\tTLFTextField" , "contents": "getLineText(${1:lineIndex:int});" },
{ "trigger": "getParagraphLength\tTLFTextField" , "contents": "getParagraphLength(${1:charIndex:int});" },
{ "trigger": "getTextFormat\tTLFTextField" , "contents": "getTextFormat();" },
{ "trigger": "isFontCompatible\tTLFTextField" , "contents": "isFontCompatible(${1:fontName:String},${2:fontStyle:String});" },
{ "trigger": "replaceSelectedText\tTLFTextField" , "contents": "replaceSelectedText(${1:value:String});" },
{ "trigger": "replaceText\tTLFTextField" , "contents": "replaceText(${1:beginIndex:int},${2:endIndex:int},${3:newText:String});" },
{ "trigger": "setSelection\tTLFTextField" , "contents": "setSelection(${1:begIdx:int},${2:endIdx:int});" },
{ "trigger": "setTextFormat\tTLFTextField" , "contents": "setTextFormat(${1:format:TextFormat});" },
"Iris",
"Transition",
"TransitionManager",
{ "trigger": "TransitionManager\tTransitionManager" , "contents": "TransitionManager(${1:content:MovieClip});" },
{ "trigger": "startTransition\tTransitionManager" , "contents": "startTransition(${1:transParams:Object});" },
{ "trigger": "start\tTransitionManager" , "contents": "start(${1:content:MovieClip},${2:transParams:Object});" },
"Tween",
{ "trigger": "Tween\tTween" , "contents": "Tween(${1:obj:Object},${2:prop:String},${3:func:Function},${4:begin:Number},${5:finish:Number},${6:duration:Number});" },
{ "trigger": "continueTo\tTween" , "contents": "continueTo(${1:finish:Number},${2:duration:Number});" },
{ "trigger": "fforward\tTween" , "contents": "fforward();" },
{ "trigger": "nextFrame\tTween" , "contents": "nextFrame();" },
{ "trigger": "prevFrame\tTween" , "contents": "prevFrame();" },
{ "trigger": "resume\tTween" , "contents": "resume();" },
{ "trigger": "rewind\tTween" , "contents": "rewind();" },
{ "trigger": "start\tTween" , "contents": "start();" },
{ "trigger": "stop\tTween" , "contents": "stop();" },
{ "trigger": "yoyo\tTween" , "contents": "yoyo();" },
"TweenEvent",
{ "trigger": "TweenEvent\tTweenEvent" , "contents": "TweenEvent(${1:type:String},${2:time:Number},${3:position:Number});" },
"None",
{ "trigger": "easeInOut\tNone" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tNone" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeNone\tNone" , "contents": "easeNone(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tNone" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Regular",
{ "trigger": "easeInOut\tRegular" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tRegular" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tRegular" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"Strong",
{ "trigger": "easeInOut\tStrong" , "contents": "easeInOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeIn\tStrong" , "contents": "easeIn(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
{ "trigger": "easeOut\tStrong" , "contents": "easeOut(${1:t:Number},${2:b:Number},${3:c:Number},${4:d:Number});" },
"AutoLayoutEvent",
{ "trigger": "AutoLayoutEvent\tAutoLayoutEvent" , "contents": "AutoLayoutEvent(${1:type:String});" },
"CaptionChangeEvent",
{ "trigger": "CaptionChangeEvent\tCaptionChangeEvent" , "contents": "CaptionChangeEvent(${1:type:String});" },
"CaptionTargetEvent",
{ "trigger": "CaptionTargetEvent\tCaptionTargetEvent" , "contents": "CaptionTargetEvent(${1:type:String});" },
"CuePointType",
"FLVPlayback",
{ "trigger": "FLVPlayback\tFLVPlayback" , "contents": "FLVPlayback();" },
{ "trigger": "addASCuePoint\tFLVPlayback" , "contents": "addASCuePoint(${1:timeOrCuePoint:*});" },
{ "trigger": "assignTabIndexes\tFLVPlayback" , "contents": "assignTabIndexes(${1:startTabIndex:int});" },
{ "trigger": "bringVideoPlayerToFront\tFLVPlayback" , "contents": "bringVideoPlayerToFront(${1:index:uint});" },
{ "trigger": "closeVideoPlayer\tFLVPlayback" , "contents": "closeVideoPlayer(${1:index:uint});" },
{ "trigger": "enterFullScreenDisplayState\tFLVPlayback" , "contents": "enterFullScreenDisplayState();" },
{ "trigger": "findCuePoint\tFLVPlayback" , "contents": "findCuePoint(${1:timeNameOrCuePoint:*});" },
{ "trigger": "findNearestCuePoint\tFLVPlayback" , "contents": "findNearestCuePoint(${1:timeNameOrCuePoint:*});" },
{ "trigger": "findNextCuePointWithName\tFLVPlayback" , "contents": "findNextCuePointWithName(${1:cuePoint:Object});" },
{ "trigger": "getVideoPlayer\tFLVPlayback" , "contents": "getVideoPlayer(${1:index:Number});" },
{ "trigger": "isFLVCuePointEnabled\tFLVPlayback" , "contents": "isFLVCuePointEnabled(${1:timeNameOrCuePoint:*});" },
{ "trigger": "load\tFLVPlayback" , "contents": "load(${1:source:String});" },
{ "trigger": "pause\tFLVPlayback" , "contents": "pause();" },
{ "trigger": "playWhenEnoughDownloaded\tFLVPlayback" , "contents": "playWhenEnoughDownloaded();" },
{ "trigger": "play\tFLVPlayback" , "contents": "play();" },
{ "trigger": "removeASCuePoint\tFLVPlayback" , "contents": "removeASCuePoint(${1:timeNameOrCuePoint:*});" },
{ "trigger": "seekPercent\tFLVPlayback" , "contents": "seekPercent(${1:percent:Number});" },
{ "trigger": "seekSeconds\tFLVPlayback" , "contents": "seekSeconds(${1:time:Number});" },
{ "trigger": "seekToNavCuePoint\tFLVPlayback" , "contents": "seekToNavCuePoint(${1:timeNameOrCuePoint:*});" },
{ "trigger": "seekToNextNavCuePoint\tFLVPlayback" , "contents": "seekToNextNavCuePoint();" },
{ "trigger": "seekToPrevNavCuePoint\tFLVPlayback" , "contents": "seekToPrevNavCuePoint();" },
{ "trigger": "seek\tFLVPlayback" , "contents": "seek(${1:time:Number});" },
{ "trigger": "setFLVCuePointEnabled\tFLVPlayback" , "contents": "setFLVCuePointEnabled(${1:enabled:Boolean},${2:timeNameOrCuePoint:*});" },
{ "trigger": "setScale\tFLVPlayback" , "contents": "setScale(${1:scaleX:Number},${2:scaleY:Number});" },
{ "trigger": "setSize\tFLVPlayback" , "contents": "setSize(${1:width:Number},${2:height:Number});" },
{ "trigger": "stop\tFLVPlayback" , "contents": "stop();" },
"FLVPlaybackCaptioning",
{ "trigger": "FLVPlaybackCaptioning\tFLVPlaybackCaptioning" , "contents": "FLVPlaybackCaptioning();" },
{ "trigger": "findInCaptions\tFLVPlaybackCaptioning" , "contents": "findInCaptions(${1:searchString:String});" },
{ "trigger": "getCaptionsAsArray\tFLVPlaybackCaptioning" , "contents": "getCaptionsAsArray();" },
{ "trigger": "getCaptionsAsTranscript\tFLVPlaybackCaptioning" , "contents": "getCaptionsAsTranscript();" },
{ "trigger": "secondsToTime\tFLVPlaybackCaptioning" , "contents": "secondsToTime(${1:sec:Number});" },
"INCManager",
{ "trigger": "close\tINCManager" , "contents": "close();" },
{ "trigger": "connectAgain\tINCManager" , "contents": "connectAgain();" },
{ "trigger": "connectToURL\tINCManager" , "contents": "connectToURL(${1:url:String});" },
{ "trigger": "getProperty\tINCManager" , "contents": "getProperty(${1:propertyName:String});" },
{ "trigger": "helperDone\tINCManager" , "contents": "helperDone(${1:helper:Object},${2:success:Boolean});" },
{ "trigger": "reconnect\tINCManager" , "contents": "reconnect();" },
{ "trigger": "setProperty\tINCManager" , "contents": "setProperty(${1:propertyName:String},${2:value:*});" },
"IVPEvent",
"LayoutEvent",
{ "trigger": "LayoutEvent\tLayoutEvent" , "contents": "LayoutEvent(${1:type:String});" },
"MetadataEvent",
{ "trigger": "MetadataEvent\tMetadataEvent" , "contents": "MetadataEvent(${1:type:String});" },
"NCManager",
{ "trigger": "NCManager\tNCManager" , "contents": "NCManager();" },
{ "trigger": "close\tNCManager" , "contents": "close();" },
{ "trigger": "connectAgain\tNCManager" , "contents": "connectAgain();" },
{ "trigger": "connectToURL\tNCManager" , "contents": "connectToURL(${1:url:String});" },
{ "trigger": "getProperty\tNCManager" , "contents": "getProperty(${1:propertyName:String});" },
{ "trigger": "helperDone\tNCManager" , "contents": "helperDone(${1:helper:Object},${2:success:Boolean});" },
{ "trigger": "reconnect\tNCManager" , "contents": "reconnect();" },
{ "trigger": "setProperty\tNCManager" , "contents": "setProperty(${1:propertyName:String},${2:value:*});" },
"NCManagerNative",
{ "trigger": "NCManagerNative\tNCManagerNative" , "contents": "NCManagerNative();" },
"SkinErrorEvent",
{ "trigger": "SkinErrorEvent\tSkinErrorEvent" , "contents": "SkinErrorEvent(${1:type:String});" },
"SoundEvent",
{ "trigger": "SoundEvent\tSoundEvent" , "contents": "SoundEvent(${1:type:String});" },
"VideoAlign",
"VideoError",
{ "trigger": "VideoError\tVideoError" , "contents": "VideoError(${1:errCode:uint});" },
"VideoEvent",
{ "trigger": "VideoEvent\tVideoEvent" , "contents": "VideoEvent(${1:type:String});" },
"VideoPlayer",
{ "trigger": "VideoPlayer\tVideoPlayer" , "contents": "VideoPlayer();" },
{ "trigger": "close\tVideoPlayer" , "contents": "close();" },
{ "trigger": "load\tVideoPlayer" , "contents": "load(${1:url:String});" },
{ "trigger": "ncConnected\tVideoPlayer" , "contents": "ncConnected();" },
{ "trigger": "ncReconnected\tVideoPlayer" , "contents": "ncReconnected();" },
{ "trigger": "pause\tVideoPlayer" , "contents": "pause();" },
{ "trigger": "playWhenEnoughDownloaded\tVideoPlayer" , "contents": "playWhenEnoughDownloaded();" },
{ "trigger": "play\tVideoPlayer" , "contents": "play();" },
{ "trigger": "seek\tVideoPlayer" , "contents": "seek(${1:time:Number});" },
{ "trigger": "setScale\tVideoPlayer" , "contents": "setScale(${1:scaleX:Number},${2:scaleY:Number});" },
{ "trigger": "setSize\tVideoPlayer" , "contents": "setSize(${1:width:Number},${2:height:Number});" },
{ "trigger": "stop\tVideoPlayer" , "contents": "stop();" },
"VideoProgressEvent",
{ "trigger": "VideoProgressEvent\tVideoProgressEvent" , "contents": "VideoProgressEvent(${1:type:String});" },
"VideoScaleMode",
"VideoState",
"Accessibility",
{ "trigger": "updateProperties\tAccessibility" , "contents": "updateProperties();" },
"AccessibilityImplementation",
{ "trigger": "AccessibilityImplementation\tAccessibilityImplementation" , "contents": "AccessibilityImplementation();" },
{ "trigger": "accDoDefaultAction\tAccessibilityImplementation" , "contents": "accDoDefaultAction(${1:childID:uint});" },
{ "trigger": "accLocation\tAccessibilityImplementation" , "contents": "accLocation(${1:childID:uint});" },
{ "trigger": "accSelect\tAccessibilityImplementation" , "contents": "accSelect(${1:operation:uint},${2:childID:uint});" },
{ "trigger": "getChildIDArray\tAccessibilityImplementation" , "contents": "getChildIDArray();" },
{ "trigger": "get_accDefaultAction\tAccessibilityImplementation" , "contents": "get_accDefaultAction(${1:childID:uint});" },
{ "trigger": "get_accFocus\tAccessibilityImplementation" , "contents": "get_accFocus();" },
{ "trigger": "get_accName\tAccessibilityImplementation" , "contents": "get_accName(${1:childID:uint});" },
{ "trigger": "get_accRole\tAccessibilityImplementation" , "contents": "get_accRole(${1:childID:uint});" },
{ "trigger": "get_accSelection\tAccessibilityImplementation" , "contents": "get_accSelection();" },
{ "trigger": "get_accState\tAccessibilityImplementation" , "contents": "get_accState(${1:childID:uint});" },
{ "trigger": "get_accValue\tAccessibilityImplementation" , "contents": "get_accValue(${1:childID:uint});" },
{ "trigger": "isLabeledBy\tAccessibilityImplementation" , "contents": "isLabeledBy(${1:labelBounds:Rectangle});" },
"AccessibilityProperties",
{ "trigger": "AccessibilityProperties\tAccessibilityProperties" , "contents": "AccessibilityProperties();" },
"ISearchableText",
"ISimpleTextSelection",
"EncryptedLocalStore",
{ "trigger": "getItem\tEncryptedLocalStore" , "contents": "getItem(${1:name:String});" },
{ "trigger": "removeItem\tEncryptedLocalStore" , "contents": "removeItem(${1:name:String});" },
{ "trigger": "reset\tEncryptedLocalStore" , "contents": "reset();" },
{ "trigger": "setItem\tEncryptedLocalStore" , "contents": "setItem(${1:name:String},${2:data:ByteArray});" },
"SQLCollationType",
"SQLColumnNameStyle",
"SQLColumnSchema",
{ "trigger": "SQLColumnSchema\tSQLColumnSchema" , "contents": "SQLColumnSchema(${1:name:String},${2:primaryKey:Boolean},${3:allowNull:Boolean},${4:autoIncrement:Boolean},${5:dataType:String},${6:defaultCollationType:String});" },
"SQLConnection",
{ "trigger": "SQLConnection\tSQLConnection" , "contents": "SQLConnection();" },
{ "trigger": "addEventListener\tSQLConnection" , "contents": "addEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "analyze\tSQLConnection" , "contents": "analyze();" },
{ "trigger": "attach\tSQLConnection" , "contents": "attach(${1:name:String});" },
{ "trigger": "begin\tSQLConnection" , "contents": "begin();" },
{ "trigger": "cancel\tSQLConnection" , "contents": "cancel();" },
{ "trigger": "close\tSQLConnection" , "contents": "close();" },
{ "trigger": "commit\tSQLConnection" , "contents": "commit();" },
{ "trigger": "compact\tSQLConnection" , "contents": "compact();" },
{ "trigger": "deanalyze\tSQLConnection" , "contents": "deanalyze();" },
{ "trigger": "detach\tSQLConnection" , "contents": "detach(${1:name:String});" },
{ "trigger": "getSchemaResult\tSQLConnection" , "contents": "getSchemaResult();" },
{ "trigger": "loadSchema\tSQLConnection" , "contents": "loadSchema();" },
{ "trigger": "openAsync\tSQLConnection" , "contents": "openAsync();" },
{ "trigger": "open\tSQLConnection" , "contents": "open();" },
{ "trigger": "reencrypt\tSQLConnection" , "contents": "reencrypt(${1:newEncryptionKey:ByteArray});" },
{ "trigger": "releaseSavepoint\tSQLConnection" , "contents": "releaseSavepoint();" },
{ "trigger": "removeEventListener\tSQLConnection" , "contents": "removeEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "rollbackToSavepoint\tSQLConnection" , "contents": "rollbackToSavepoint();" },
{ "trigger": "rollback\tSQLConnection" , "contents": "rollback();" },
{ "trigger": "setSavepoint\tSQLConnection" , "contents": "setSavepoint();" },
"SQLIndexSchema",
{ "trigger": "SQLIndexSchema\tSQLIndexSchema" , "contents": "SQLIndexSchema(${1:database:String},${2:name:String},${3:sql:String},${4:table:String});" },
"SQLMode",
"SQLResult",
{ "trigger": "SQLResult\tSQLResult" , "contents": "SQLResult();" },
"SQLSchema",
{ "trigger": "SQLSchema\tSQLSchema" , "contents": "SQLSchema(${1:database:String},${2:name:String},${3:sql:String});" },
"SQLSchemaResult",
{ "trigger": "SQLSchemaResult\tSQLSchemaResult" , "contents": "SQLSchemaResult(${1:tables:Array},${2:views:Array},${3:indices:Array},${4:triggers:Array});" },
"SQLStatement",
{ "trigger": "SQLStatement\tSQLStatement" , "contents": "SQLStatement();" },
{ "trigger": "cancel\tSQLStatement" , "contents": "cancel();" },
{ "trigger": "clearParameters\tSQLStatement" , "contents": "clearParameters();" },
{ "trigger": "execute\tSQLStatement" , "contents": "execute();" },
{ "trigger": "getResult\tSQLStatement" , "contents": "getResult();" },
{ "trigger": "next\tSQLStatement" , "contents": "next();" },
"SQLTableSchema",
{ "trigger": "SQLTableSchema\tSQLTableSchema" , "contents": "SQLTableSchema(${1:database:String},${2:name:String},${3:sql:String},${4:columns:Array});" },
"SQLTransactionLockType",
"SQLTriggerSchema",
{ "trigger": "SQLTriggerSchema\tSQLTriggerSchema" , "contents": "SQLTriggerSchema(${1:database:String},${2:name:String},${3:sql:String},${4:table:String});" },
"SQLViewSchema",
{ "trigger": "SQLViewSchema\tSQLViewSchema" , "contents": "SQLViewSchema(${1:database:String},${2:name:String},${3:sql:String},${4:columns:Array});" },
"Clipboard",
{ "trigger": "Clipboard\tClipboard" , "contents": "Clipboard();" },
{ "trigger": "clearData\tClipboard" , "contents": "clearData(${1:format:String});" },
{ "trigger": "clear\tClipboard" , "contents": "clear();" },
{ "trigger": "getData\tClipboard" , "contents": "getData(${1:format:String});" },
{ "trigger": "hasFormat\tClipboard" , "contents": "hasFormat(${1:format:String});" },
{ "trigger": "setDataHandler\tClipboard" , "contents": "setDataHandler(${1:format:String},${2:handler:Function});" },
{ "trigger": "setData\tClipboard" , "contents": "setData(${1:format:String},${2:data:Object});" },
"ClipboardFormats",
"ClipboardTransferMode",
"DockIcon",
{ "trigger": "bounce\tDockIcon" , "contents": "bounce();" },
"Icon",
"IFilePromise",
{ "trigger": "close\tIFilePromise" , "contents": "close();" },
{ "trigger": "open\tIFilePromise" , "contents": "open();" },
{ "trigger": "reportError\tIFilePromise" , "contents": "reportError(${1:e:ErrorEvent});" },
"InteractiveIcon",
"InvokeEventReason",
"NativeApplication",
{ "trigger": "activate\tNativeApplication" , "contents": "activate();" },
{ "trigger": "addEventListener\tNativeApplication" , "contents": "addEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "clear\tNativeApplication" , "contents": "clear();" },
{ "trigger": "copy\tNativeApplication" , "contents": "copy();" },
{ "trigger": "cut\tNativeApplication" , "contents": "cut();" },
{ "trigger": "dispatchEvent\tNativeApplication" , "contents": "dispatchEvent(${1:event:Event});" },
{ "trigger": "exit\tNativeApplication" , "contents": "exit();" },
{ "trigger": "getDefaultApplication\tNativeApplication" , "contents": "getDefaultApplication(${1:extension:String});" },
{ "trigger": "isSetAsDefaultApplication\tNativeApplication" , "contents": "isSetAsDefaultApplication(${1:extension:String});" },
{ "trigger": "paste\tNativeApplication" , "contents": "paste();" },
{ "trigger": "removeAsDefaultApplication\tNativeApplication" , "contents": "removeAsDefaultApplication(${1:extension:String});" },
{ "trigger": "removeEventListener\tNativeApplication" , "contents": "removeEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "selectAll\tNativeApplication" , "contents": "selectAll();" },
{ "trigger": "setAsDefaultApplication\tNativeApplication" , "contents": "setAsDefaultApplication(${1:extension:String});" },
"NativeDragActions",
"NativeDragManager",
{ "trigger": "acceptDragDrop\tNativeDragManager" , "contents": "acceptDragDrop(${1:target:InteractiveObject});" },
{ "trigger": "doDrag\tNativeDragManager" , "contents": "doDrag(${1:dragInitiator:InteractiveObject},${2:clipboard:Clipboard});" },
"NativeDragOptions",
{ "trigger": "toString\tNativeDragOptions" , "contents": "toString();" },
"NativeProcess",
{ "trigger": "NativeProcess\tNativeProcess" , "contents": "NativeProcess();" },
{ "trigger": "closeInput\tNativeProcess" , "contents": "closeInput();" },
{ "trigger": "exit\tNativeProcess" , "contents": "exit();" },
{ "trigger": "start\tNativeProcess" , "contents": "start(${1:info:NativeProcessStartupInfo});" },
"NativeProcessStartupInfo",
{ "trigger": "NativeProcessStartupInfo\tNativeProcessStartupInfo" , "contents": "NativeProcessStartupInfo();" },
"NotificationType",
"SystemIdleMode",
"SystemTrayIcon",
"Updater",
{ "trigger": "Updater\tUpdater" , "contents": "Updater();" },
{ "trigger": "update\tUpdater" , "contents": "update(${1:airFile:File},${2:version:String});" },
"ActionScriptVersion",
"Bitmap",
{ "trigger": "Bitmap\tBitmap" , "contents": "Bitmap();" },
"BitmapData",
{ "trigger": "BitmapData\tBitmapData" , "contents": "BitmapData(${1:width:int},${2:height:int});" },
{ "trigger": "applyFilter\tBitmapData" , "contents": "applyFilter(${1:sourceBitmapData:BitmapData},${2:sourceRect:Rectangle},${3:destPoint:Point},${4:filter:BitmapFilter});" },
{ "trigger": "clone\tBitmapData" , "contents": "clone();" },
{ "trigger": "colorTransform\tBitmapData" , "contents": "colorTransform(${1:rect:Rectangle},${2:colorTransform:ColorTransform});" },
{ "trigger": "compare\tBitmapData" , "contents": "compare(${1:otherBitmapData:BitmapData});" },
{ "trigger": "copyChannel\tBitmapData" , "contents": "copyChannel(${1:sourceBitmapData:BitmapData},${2:sourceRect:Rectangle},${3:destPoint:Point},${4:sourceChannel:uint},${5:destChannel:uint});" },
{ "trigger": "copyPixels\tBitmapData" , "contents": "copyPixels(${1:sourceBitmapData:BitmapData},${2:sourceRect:Rectangle},${3:destPoint:Point});" },
{ "trigger": "dispose\tBitmapData" , "contents": "dispose();" },
{ "trigger": "draw\tBitmapData" , "contents": "draw(${1:source:IBitmapDrawable});" },
{ "trigger": "fillRect\tBitmapData" , "contents": "fillRect(${1:rect:Rectangle},${2:color:uint});" },
{ "trigger": "floodFill\tBitmapData" , "contents": "floodFill(${1:x:int},${2:y:int},${3:color:uint});" },
{ "trigger": "generateFilterRect\tBitmapData" , "contents": "generateFilterRect(${1:sourceRect:Rectangle},${2:filter:BitmapFilter});" },
{ "trigger": "getColorBoundsRect\tBitmapData" , "contents": "getColorBoundsRect(${1:mask:uint},${2:color:uint});" },
{ "trigger": "getPixel32\tBitmapData" , "contents": "getPixel32(${1:x:int},${2:y:int});" },
{ "trigger": "getPixel\tBitmapData" , "contents": "getPixel(${1:x:int},${2:y:int});" },
{ "trigger": "getPixels\tBitmapData" , "contents": "getPixels(${1:rect:Rectangle});" },
{ "trigger": "getVector\tBitmapData" , "contents": "getVector(${1:rect:Rectangle});" },
{ "trigger": "histogram\tBitmapData" , "contents": "histogram();" },
{ "trigger": "hitTest\tBitmapData" , "contents": "hitTest(${1:firstPoint:Point},${2:firstAlphaThreshold:uint},${3:secondObject:Object});" },
{ "trigger": "lock\tBitmapData" , "contents": "lock();" },
{ "trigger": "merge\tBitmapData" , "contents": "merge(${1:sourceBitmapData:BitmapData},${2:sourceRect:Rectangle},${3:destPoint:Point},${4:redMultiplier:uint},${5:greenMultiplier:uint},${6:blueMultiplier:uint},${7:alphaMultiplier:uint});" },
{ "trigger": "noise\tBitmapData" , "contents": "noise(${1:randomSeed:int});" },
{ "trigger": "paletteMap\tBitmapData" , "contents": "paletteMap(${1:sourceBitmapData:BitmapData},${2:sourceRect:Rectangle},${3:destPoint:Point});" },
{ "trigger": "perlinNoise\tBitmapData" , "contents": "perlinNoise(${1:baseX:Number},${2:baseY:Number},${3:numOctaves:uint},${4:randomSeed:int},${5:stitch:Boolean},${6:fractalNoise:Boolean});" },
{ "trigger": "pixelDissolve\tBitmapData" , "contents": "pixelDissolve(${1:sourceBitmapData:BitmapData},${2:sourceRect:Rectangle},${3:destPoint:Point});" },
{ "trigger": "scroll\tBitmapData" , "contents": "scroll(${1:x:int},${2:y:int});" },
{ "trigger": "setPixel32\tBitmapData" , "contents": "setPixel32(${1:x:int},${2:y:int},${3:color:uint});" },
{ "trigger": "setPixel\tBitmapData" , "contents": "setPixel(${1:x:int},${2:y:int},${3:color:uint});" },
{ "trigger": "setPixels\tBitmapData" , "contents": "setPixels(${1:rect:Rectangle},${2:inputByteArray:ByteArray});" },
{ "trigger": "setVector\tBitmapData" , "contents": "setVector(${1:rect:Rectangle},${2:inputVector:Vector$uint});" },
{ "trigger": "threshold\tBitmapData" , "contents": "threshold(${1:sourceBitmapData:BitmapData},${2:sourceRect:Rectangle},${3:destPoint:Point},${4:operation:String},${5:threshold:uint});" },
{ "trigger": "unlock\tBitmapData" , "contents": "unlock();" },
"BitmapDataChannel",
"BlendMode",
"CapsStyle",
"ColorCorrection",
"ColorCorrectionSupport",
"DisplayObject",
{ "trigger": "getBounds\tDisplayObject" , "contents": "getBounds(${1:targetCoordinateSpace:DisplayObject});" },
{ "trigger": "getRect\tDisplayObject" , "contents": "getRect(${1:targetCoordinateSpace:DisplayObject});" },
{ "trigger": "globalToLocal3D\tDisplayObject" , "contents": "globalToLocal3D(${1:point:Point});" },
{ "trigger": "globalToLocal\tDisplayObject" , "contents": "globalToLocal(${1:point:Point});" },
{ "trigger": "hitTestObject\tDisplayObject" , "contents": "hitTestObject(${1:obj:DisplayObject});" },
{ "trigger": "hitTestPoint\tDisplayObject" , "contents": "hitTestPoint(${1:x:Number},${2:y:Number});" },
{ "trigger": "local3DToGlobal\tDisplayObject" , "contents": "local3DToGlobal(${1:point3d:Vector3D});" },
{ "trigger": "localToGlobal\tDisplayObject" , "contents": "localToGlobal(${1:point:Point});" },
"DisplayObjectContainer",
{ "trigger": "DisplayObjectContainer\tDisplayObjectContainer" , "contents": "DisplayObjectContainer();" },
{ "trigger": "addChildAt\tDisplayObjectContainer" , "contents": "addChildAt(${1:child:DisplayObject},${2:index:int});" },
{ "trigger": "addChild\tDisplayObjectContainer" , "contents": "addChild(${1:child:DisplayObject});" },
{ "trigger": "areInaccessibleObjectsUnderPoint\tDisplayObjectContainer" , "contents": "areInaccessibleObjectsUnderPoint(${1:point:Point});" },
{ "trigger": "contains\tDisplayObjectContainer" , "contents": "contains(${1:child:DisplayObject});" },
{ "trigger": "getChildAt\tDisplayObjectContainer" , "contents": "getChildAt(${1:index:int});" },
{ "trigger": "getChildByName\tDisplayObjectContainer" , "contents": "getChildByName(${1:name:String});" },
{ "trigger": "getChildIndex\tDisplayObjectContainer" , "contents": "getChildIndex(${1:child:DisplayObject});" },
{ "trigger": "getObjectsUnderPoint\tDisplayObjectContainer" , "contents": "getObjectsUnderPoint(${1:point:Point});" },
{ "trigger": "removeChildAt\tDisplayObjectContainer" , "contents": "removeChildAt(${1:index:int});" },
{ "trigger": "removeChild\tDisplayObjectContainer" , "contents": "removeChild(${1:child:DisplayObject});" },
{ "trigger": "setChildIndex\tDisplayObjectContainer" , "contents": "setChildIndex(${1:child:DisplayObject},${2:index:int});" },
{ "trigger": "swapChildrenAt\tDisplayObjectContainer" , "contents": "swapChildrenAt(${1:index1:int},${2:index2:int});" },
{ "trigger": "swapChildren\tDisplayObjectContainer" , "contents": "swapChildren(${1:child1:DisplayObject},${2:child2:DisplayObject});" },
"FocusDirection",
"FrameLabel",
"GradientType",
"Graphics",
{ "trigger": "beginBitmapFill\tGraphics" , "contents": "beginBitmapFill(${1:bitmap:BitmapData});" },
{ "trigger": "beginFill\tGraphics" , "contents": "beginFill(${1:color:uint});" },
{ "trigger": "beginGradientFill\tGraphics" , "contents": "beginGradientFill(${1:type:String},${2:colors:Array},${3:alphas:Array},${4:ratios:Array});" },
{ "trigger": "beginShaderFill\tGraphics" , "contents": "beginShaderFill(${1:shader:Shader});" },
{ "trigger": "clear\tGraphics" , "contents": "clear();" },
{ "trigger": "copyFrom\tGraphics" , "contents": "copyFrom(${1:sourceGraphics:Graphics});" },
{ "trigger": "curveTo\tGraphics" , "contents": "curveTo(${1:controlX:Number},${2:controlY:Number},${3:anchorX:Number},${4:anchorY:Number});" },
{ "trigger": "drawCircle\tGraphics" , "contents": "drawCircle(${1:x:Number},${2:y:Number},${3:radius:Number});" },
{ "trigger": "drawEllipse\tGraphics" , "contents": "drawEllipse(${1:x:Number},${2:y:Number},${3:width:Number},${4:height:Number});" },
{ "trigger": "drawGraphicsData\tGraphics" , "contents": "drawGraphicsData(${1:graphicsData:IGraphicsData});" },
{ "trigger": "drawPath\tGraphics" , "contents": "drawPath(${1:commands:Vector$int},${2:data:Vector$Number});" },
{ "trigger": "drawRect\tGraphics" , "contents": "drawRect(${1:x:Number},${2:y:Number},${3:width:Number},${4:height:Number});" },
{ "trigger": "drawRoundRect\tGraphics" , "contents": "drawRoundRect(${1:x:Number},${2:y:Number},${3:width:Number},${4:height:Number},${5:ellipseWidth:Number});" },
{ "trigger": "drawTriangles\tGraphics" , "contents": "drawTriangles(${1:vertices:Vector$Number});" },
{ "trigger": "endFill\tGraphics" , "contents": "endFill();" },
{ "trigger": "lineBitmapStyle\tGraphics" , "contents": "lineBitmapStyle(${1:bitmap:BitmapData});" },
{ "trigger": "lineGradientStyle\tGraphics" , "contents": "lineGradientStyle(${1:type:String},${2:colors:Array},${3:alphas:Array},${4:ratios:Array});" },
{ "trigger": "lineShaderStyle\tGraphics" , "contents": "lineShaderStyle(${1:shader:Shader});" },
{ "trigger": "lineStyle\tGraphics" , "contents": "lineStyle();" },
{ "trigger": "lineTo\tGraphics" , "contents": "lineTo(${1:x:Number},${2:y:Number});" },
{ "trigger": "moveTo\tGraphics" , "contents": "moveTo(${1:x:Number},${2:y:Number});" },
"GraphicsBitmapFill",
{ "trigger": "GraphicsBitmapFill\tGraphicsBitmapFill" , "contents": "GraphicsBitmapFill();" },
"GraphicsEndFill",
{ "trigger": "GraphicsEndFill\tGraphicsEndFill" , "contents": "GraphicsEndFill();" },
"GraphicsGradientFill",
{ "trigger": "GraphicsGradientFill\tGraphicsGradientFill" , "contents": "GraphicsGradientFill();" },
"GraphicsPath",
{ "trigger": "GraphicsPath\tGraphicsPath" , "contents": "GraphicsPath();" },
{ "trigger": "curveTo\tGraphicsPath" , "contents": "curveTo(${1:controlX:Number},${2:controlY:Number},${3:anchorX:Number},${4:anchorY:Number});" },
{ "trigger": "lineTo\tGraphicsPath" , "contents": "lineTo(${1:x:Number},${2:y:Number});" },
{ "trigger": "moveTo\tGraphicsPath" , "contents": "moveTo(${1:x:Number},${2:y:Number});" },
{ "trigger": "wideLineTo\tGraphicsPath" , "contents": "wideLineTo(${1:x:Number},${2:y:Number});" },
{ "trigger": "wideMoveTo\tGraphicsPath" , "contents": "wideMoveTo(${1:x:Number},${2:y:Number});" },
"GraphicsPathCommand",
"GraphicsPathWinding",
"GraphicsShaderFill",
{ "trigger": "GraphicsShaderFill\tGraphicsShaderFill" , "contents": "GraphicsShaderFill();" },
"GraphicsSolidFill",
{ "trigger": "GraphicsSolidFill\tGraphicsSolidFill" , "contents": "GraphicsSolidFill();" },
"GraphicsStroke",
{ "trigger": "GraphicsStroke\tGraphicsStroke" , "contents": "GraphicsStroke();" },
"GraphicsTrianglePath",
{ "trigger": "GraphicsTrianglePath\tGraphicsTrianglePath" , "contents": "GraphicsTrianglePath();" },
"InteractiveObject",
{ "trigger": "InteractiveObject\tInteractiveObject" , "contents": "InteractiveObject();" },
{ "trigger": "requestSoftKeyboard\tInteractiveObject" , "contents": "requestSoftKeyboard();" },
"InterpolationMethod",
"JointStyle",
"LineScaleMode",
"Loader",
{ "trigger": "Loader\tLoader" , "contents": "Loader();" },
{ "trigger": "close\tLoader" , "contents": "close();" },
{ "trigger": "loadBytes\tLoader" , "contents": "loadBytes(${1:bytes:ByteArray});" },
{ "trigger": "loadFilePromise\tLoader" , "contents": "loadFilePromise(${1:promise:IFilePromise});" },
{ "trigger": "load\tLoader" , "contents": "load(${1:request:URLRequest});" },
{ "trigger": "unloadAndStop\tLoader" , "contents": "unloadAndStop();" },
{ "trigger": "unload\tLoader" , "contents": "unload();" },
"LoaderInfo",
{ "trigger": "getLoaderInfoByDefinition\tLoaderInfo" , "contents": "getLoaderInfoByDefinition(${1:object:Object});" },
"MovieClip",
{ "trigger": "MovieClip\tMovieClip" , "contents": "MovieClip();" },
{ "trigger": "gotoAndPlay\tMovieClip" , "contents": "gotoAndPlay(${1:frame:Object});" },
{ "trigger": "gotoAndStop\tMovieClip" , "contents": "gotoAndStop(${1:frame:Object});" },
{ "trigger": "nextFrame\tMovieClip" , "contents": "nextFrame();" },
{ "trigger": "nextScene\tMovieClip" , "contents": "nextScene();" },
{ "trigger": "play\tMovieClip" , "contents": "play();" },
{ "trigger": "prevFrame\tMovieClip" , "contents": "prevFrame();" },
{ "trigger": "prevScene\tMovieClip" , "contents": "prevScene();" },
{ "trigger": "stop\tMovieClip" , "contents": "stop();" },
"NativeMenu",
{ "trigger": "NativeMenu\tNativeMenu" , "contents": "NativeMenu();" },
{ "trigger": "addItemAt\tNativeMenu" , "contents": "addItemAt(${1:item:NativeMenuItem},${2:index:int});" },
{ "trigger": "addItem\tNativeMenu" , "contents": "addItem(${1:item:NativeMenuItem});" },
{ "trigger": "addSubmenuAt\tNativeMenu" , "contents": "addSubmenuAt(${1:submenu:NativeMenu},${2:index:int},${3:label:String});" },
{ "trigger": "addSubmenu\tNativeMenu" , "contents": "addSubmenu(${1:submenu:NativeMenu},${2:label:String});" },
{ "trigger": "clone\tNativeMenu" , "contents": "clone();" },
{ "trigger": "containsItem\tNativeMenu" , "contents": "containsItem(${1:item:NativeMenuItem});" },
{ "trigger": "display\tNativeMenu" , "contents": "display(${1:stage:Stage},${2:stageX:Number},${3:stageY:Number});" },
{ "trigger": "getItemAt\tNativeMenu" , "contents": "getItemAt(${1:index:int});" },
{ "trigger": "getItemByName\tNativeMenu" , "contents": "getItemByName(${1:name:String});" },
{ "trigger": "getItemIndex\tNativeMenu" , "contents": "getItemIndex(${1:item:NativeMenuItem});" },
{ "trigger": "removeAllItems\tNativeMenu" , "contents": "removeAllItems();" },
{ "trigger": "removeItemAt\tNativeMenu" , "contents": "removeItemAt(${1:index:int});" },
{ "trigger": "removeItem\tNativeMenu" , "contents": "removeItem(${1:item:NativeMenuItem});" },
{ "trigger": "setItemIndex\tNativeMenu" , "contents": "setItemIndex(${1:item:NativeMenuItem},${2:index:int});" },
"NativeMenuItem",
{ "trigger": "NativeMenuItem\tNativeMenuItem" , "contents": "NativeMenuItem(${1:label:String});" },
{ "trigger": "clone\tNativeMenuItem" , "contents": "clone();" },
{ "trigger": "toString\tNativeMenuItem" , "contents": "toString();" },
"NativeWindow",
{ "trigger": "NativeWindow\tNativeWindow" , "contents": "NativeWindow(${1:initOptions:NativeWindowInitOptions});" },
{ "trigger": "activate\tNativeWindow" , "contents": "activate();" },
{ "trigger": "close\tNativeWindow" , "contents": "close();" },
{ "trigger": "globalToScreen\tNativeWindow" , "contents": "globalToScreen(${1:globalPoint:Point});" },
{ "trigger": "listOwnedWindows\tNativeWindow" , "contents": "listOwnedWindows();" },
{ "trigger": "maximize\tNativeWindow" , "contents": "maximize();" },
{ "trigger": "minimize\tNativeWindow" , "contents": "minimize();" },
{ "trigger": "notifyUser\tNativeWindow" , "contents": "notifyUser(${1:type:String});" },
{ "trigger": "orderInBackOf\tNativeWindow" , "contents": "orderInBackOf(${1:window:NativeWindow});" },
{ "trigger": "orderInFrontOf\tNativeWindow" , "contents": "orderInFrontOf(${1:window:NativeWindow});" },
{ "trigger": "orderToBack\tNativeWindow" , "contents": "orderToBack();" },
{ "trigger": "orderToFront\tNativeWindow" , "contents": "orderToFront();" },
{ "trigger": "restore\tNativeWindow" , "contents": "restore();" },
{ "trigger": "startMove\tNativeWindow" , "contents": "startMove();" },
{ "trigger": "startResize\tNativeWindow" , "contents": "startResize();" },
"NativeWindowDisplayState",
"NativeWindowInitOptions",
{ "trigger": "NativeWindowInitOptions\tNativeWindowInitOptions" , "contents": "NativeWindowInitOptions();" },
"NativeWindowResize",
"NativeWindowSystemChrome",
"NativeWindowType",
"PixelSnapping",
"Scene",
"Screen",
{ "trigger": "getScreensForRectangle\tScreen" , "contents": "getScreensForRectangle(${1:rect:Rectangle});" },
"Shader",
{ "trigger": "Shader\tShader" , "contents": "Shader();" },
"ShaderData",
{ "trigger": "ShaderData\tShaderData" , "contents": "ShaderData(${1:byteCode:ByteArray});" },
"ShaderInput",
{ "trigger": "ShaderInput\tShaderInput" , "contents": "ShaderInput();" },
"ShaderJob",
{ "trigger": "ShaderJob\tShaderJob" , "contents": "ShaderJob();" },
{ "trigger": "cancel\tShaderJob" , "contents": "cancel();" },
{ "trigger": "start\tShaderJob" , "contents": "start();" },
"ShaderParameter",
{ "trigger": "ShaderParameter\tShaderParameter" , "contents": "ShaderParameter();" },
"ShaderParameterType",
"ShaderPrecision",
"Shape",
{ "trigger": "Shape\tShape" , "contents": "Shape();" },
"SimpleButton",
{ "trigger": "SimpleButton\tSimpleButton" , "contents": "SimpleButton();" },
"SpreadMethod",
"Sprite",
{ "trigger": "Sprite\tSprite" , "contents": "Sprite();" },
{ "trigger": "startDrag\tSprite" , "contents": "startDrag();" },
{ "trigger": "startTouchDrag\tSprite" , "contents": "startTouchDrag(${1:touchPointID:int});" },
{ "trigger": "stopDrag\tSprite" , "contents": "stopDrag();" },
{ "trigger": "stopTouchDrag\tSprite" , "contents": "stopTouchDrag(${1:touchPointID:int});" },
"Stage",
{ "trigger": "addChildAt\tStage" , "contents": "addChildAt(${1:child:DisplayObject},${2:index:int});" },
{ "trigger": "addChild\tStage" , "contents": "addChild(${1:child:DisplayObject});" },
{ "trigger": "addEventListener\tStage" , "contents": "addEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "assignFocus\tStage" , "contents": "assignFocus(${1:objectToFocus:InteractiveObject},${2:direction:String});" },
{ "trigger": "dispatchEvent\tStage" , "contents": "dispatchEvent(${1:event:Event});" },
{ "trigger": "getChildAt\tStage" , "contents": "getChildAt(${1:index:int});" },
{ "trigger": "hasEventListener\tStage" , "contents": "hasEventListener(${1:type:String});" },
{ "trigger": "invalidate\tStage" , "contents": "invalidate();" },
{ "trigger": "isFocusInaccessible\tStage" , "contents": "isFocusInaccessible();" },
{ "trigger": "removeChildAt\tStage" , "contents": "removeChildAt(${1:index:int});" },
{ "trigger": "removeChild\tStage" , "contents": "removeChild(${1:child:DisplayObject});" },
{ "trigger": "setAspectRatio\tStage" , "contents": "setAspectRatio(${1:newAspectRatio:String});" },
{ "trigger": "setChildIndex\tStage" , "contents": "setChildIndex(${1:child:DisplayObject},${2:index:int});" },
{ "trigger": "setOrientation\tStage" , "contents": "setOrientation(${1:newOrientation:String});" },
{ "trigger": "swapChildrenAt\tStage" , "contents": "swapChildrenAt(${1:index1:int},${2:index2:int});" },
{ "trigger": "swapChildren\tStage" , "contents": "swapChildren(${1:child1:DisplayObject},${2:child2:DisplayObject});" },
{ "trigger": "willTrigger\tStage" , "contents": "willTrigger(${1:type:String});" },
"StageAlign",
"StageAspectRatio",
"StageDisplayState",
"StageOrientation",
"StageQuality",
"StageScaleMode",
"SWFVersion",
"TriangleCulling",
"DRMManagerError",
{ "trigger": "DRMManagerError\tDRMManagerError" , "contents": "DRMManagerError(${1:message:String},${2:id:int},${3:subErrorID:int});" },
{ "trigger": "toString\tDRMManagerError" , "contents": "toString();" },
"EOFError",
{ "trigger": "EOFError\tEOFError" , "contents": "EOFError(${1:message:String});" },
"IllegalOperationError",
{ "trigger": "IllegalOperationError\tIllegalOperationError" , "contents": "IllegalOperationError(${1:message:String});" },
"InvalidSWFError",
{ "trigger": "InvalidSWFError\tInvalidSWFError" , "contents": "InvalidSWFError(${1:message:String});" },
"IOError",
{ "trigger": "IOError\tIOError" , "contents": "IOError(${1:message:String});" },
"MemoryError",
{ "trigger": "MemoryError\tMemoryError" , "contents": "MemoryError(${1:message:String});" },
"ScriptTimeoutError",
{ "trigger": "ScriptTimeoutError\tScriptTimeoutError" , "contents": "ScriptTimeoutError(${1:message:String});" },
"SQLError",
{ "trigger": "SQLError\tSQLError" , "contents": "SQLError(${1:operation:String},${2:details:String},${3:message:String});" },
{ "trigger": "toString\tSQLError" , "contents": "toString();" },
"SQLErrorOperation",
"StackOverflowError",
{ "trigger": "StackOverflowError\tStackOverflowError" , "contents": "StackOverflowError(${1:message:String});" },
"AccelerometerEvent",
{ "trigger": "AccelerometerEvent\tAccelerometerEvent" , "contents": "AccelerometerEvent(${1:type:String});" },
{ "trigger": "clone\tAccelerometerEvent" , "contents": "clone();" },
{ "trigger": "toString\tAccelerometerEvent" , "contents": "toString();" },
"ActivityEvent",
{ "trigger": "ActivityEvent\tActivityEvent" , "contents": "ActivityEvent(${1:type:String});" },
{ "trigger": "clone\tActivityEvent" , "contents": "clone();" },
{ "trigger": "toString\tActivityEvent" , "contents": "toString();" },
"AsyncErrorEvent",
{ "trigger": "AsyncErrorEvent\tAsyncErrorEvent" , "contents": "AsyncErrorEvent(${1:type:String});" },
{ "trigger": "clone\tAsyncErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tAsyncErrorEvent" , "contents": "toString();" },
"BrowserInvokeEvent",
{ "trigger": "BrowserInvokeEvent\tBrowserInvokeEvent" , "contents": "BrowserInvokeEvent(${1:type:String},${2:bubbles:Boolean},${3:cancelable:Boolean},${4:arguments:Array},${5:sandboxType:String},${6:securityDomain:String},${7:isHTTPS:Boolean},${8:isUserEvent:Boolean});" },
{ "trigger": "clone\tBrowserInvokeEvent" , "contents": "clone();" },
"ContextMenuEvent",
{ "trigger": "ContextMenuEvent\tContextMenuEvent" , "contents": "ContextMenuEvent(${1:type:String});" },
{ "trigger": "clone\tContextMenuEvent" , "contents": "clone();" },
{ "trigger": "toString\tContextMenuEvent" , "contents": "toString();" },
"DataEvent",
{ "trigger": "DataEvent\tDataEvent" , "contents": "DataEvent(${1:type:String});" },
{ "trigger": "clone\tDataEvent" , "contents": "clone();" },
{ "trigger": "toString\tDataEvent" , "contents": "toString();" },
"DatagramSocketDataEvent",
{ "trigger": "DatagramSocketDataEvent\tDatagramSocketDataEvent" , "contents": "DatagramSocketDataEvent(${1:type:String});" },
{ "trigger": "clone\tDatagramSocketDataEvent" , "contents": "clone();" },
{ "trigger": "toString\tDatagramSocketDataEvent" , "contents": "toString();" },
"DNSResolverEvent",
{ "trigger": "DNSResolverEvent\tDNSResolverEvent" , "contents": "DNSResolverEvent(${1:type:String});" },
{ "trigger": "clone\tDNSResolverEvent" , "contents": "clone();" },
{ "trigger": "toString\tDNSResolverEvent" , "contents": "toString();" },
"DRMAuthenticateEvent",
{ "trigger": "DRMAuthenticateEvent\tDRMAuthenticateEvent" , "contents": "DRMAuthenticateEvent(${1:type:String});" },
{ "trigger": "clone\tDRMAuthenticateEvent" , "contents": "clone();" },
{ "trigger": "toString\tDRMAuthenticateEvent" , "contents": "toString();" },
"DRMAuthenticationCompleteEvent",
{ "trigger": "DRMAuthenticationCompleteEvent\tDRMAuthenticationCompleteEvent" , "contents": "DRMAuthenticationCompleteEvent(${1:type:String});" },
{ "trigger": "clone\tDRMAuthenticationCompleteEvent" , "contents": "clone();" },
"DRMAuthenticationErrorEvent",
{ "trigger": "DRMAuthenticationErrorEvent\tDRMAuthenticationErrorEvent" , "contents": "DRMAuthenticationErrorEvent(${1:type:String});" },
{ "trigger": "clone\tDRMAuthenticationErrorEvent" , "contents": "clone();" },
"DRMErrorEvent",
{ "trigger": "DRMErrorEvent\tDRMErrorEvent" , "contents": "DRMErrorEvent();" },
{ "trigger": "clone\tDRMErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tDRMErrorEvent" , "contents": "toString();" },
"DRMStatusEvent",
{ "trigger": "DRMStatusEvent\tDRMStatusEvent" , "contents": "DRMStatusEvent();" },
{ "trigger": "clone\tDRMStatusEvent" , "contents": "clone();" },
{ "trigger": "toString\tDRMStatusEvent" , "contents": "toString();" },
"ErrorEvent",
{ "trigger": "ErrorEvent\tErrorEvent" , "contents": "ErrorEvent(${1:type:String});" },
{ "trigger": "clone\tErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tErrorEvent" , "contents": "toString();" },
"Event",
{ "trigger": "Event\tEvent" , "contents": "Event(${1:type:String});" },
{ "trigger": "clone\tEvent" , "contents": "clone();" },
{ "trigger": "formatToString\tEvent" , "contents": "formatToString(${1:className:String},${2:arguments:restParam});" },
{ "trigger": "isDefaultPrevented\tEvent" , "contents": "isDefaultPrevented();" },
{ "trigger": "preventDefault\tEvent" , "contents": "preventDefault();" },
{ "trigger": "stopImmediatePropagation\tEvent" , "contents": "stopImmediatePropagation();" },
{ "trigger": "stopPropagation\tEvent" , "contents": "stopPropagation();" },
{ "trigger": "toString\tEvent" , "contents": "toString();" },
"EventDispatcher",
{ "trigger": "EventDispatcher\tEventDispatcher" , "contents": "EventDispatcher();" },
{ "trigger": "addEventListener\tEventDispatcher" , "contents": "addEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "dispatchEvent\tEventDispatcher" , "contents": "dispatchEvent(${1:event:Event});" },
{ "trigger": "hasEventListener\tEventDispatcher" , "contents": "hasEventListener(${1:type:String});" },
{ "trigger": "removeEventListener\tEventDispatcher" , "contents": "removeEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "willTrigger\tEventDispatcher" , "contents": "willTrigger(${1:type:String});" },
"EventPhase",
"FileListEvent",
{ "trigger": "FileListEvent\tFileListEvent" , "contents": "FileListEvent(${1:type:String});" },
"FocusEvent",
{ "trigger": "FocusEvent\tFocusEvent" , "contents": "FocusEvent(${1:type:String});" },
{ "trigger": "clone\tFocusEvent" , "contents": "clone();" },
{ "trigger": "toString\tFocusEvent" , "contents": "toString();" },
"FullScreenEvent",
{ "trigger": "FullScreenEvent\tFullScreenEvent" , "contents": "FullScreenEvent(${1:type:String});" },
{ "trigger": "clone\tFullScreenEvent" , "contents": "clone();" },
{ "trigger": "toString\tFullScreenEvent" , "contents": "toString();" },
"GeolocationEvent",
{ "trigger": "GeolocationEvent\tGeolocationEvent" , "contents": "GeolocationEvent(${1:type:String});" },
{ "trigger": "clone\tGeolocationEvent" , "contents": "clone();" },
{ "trigger": "toString\tGeolocationEvent" , "contents": "toString();" },
"GestureEvent",
{ "trigger": "GestureEvent\tGestureEvent" , "contents": "GestureEvent(${1:type:String});" },
{ "trigger": "clone\tGestureEvent" , "contents": "clone();" },
{ "trigger": "toString\tGestureEvent" , "contents": "toString();" },
{ "trigger": "updateAfterEvent\tGestureEvent" , "contents": "updateAfterEvent();" },
"GesturePhase",
"HTMLUncaughtScriptExceptionEvent",
{ "trigger": "HTMLUncaughtScriptExceptionEvent\tHTMLUncaughtScriptExceptionEvent" , "contents": "HTMLUncaughtScriptExceptionEvent(${1:exceptionValue:*});" },
{ "trigger": "clone\tHTMLUncaughtScriptExceptionEvent" , "contents": "clone();" },
"HTTPStatusEvent",
{ "trigger": "HTTPStatusEvent\tHTTPStatusEvent" , "contents": "HTTPStatusEvent(${1:type:String});" },
{ "trigger": "clone\tHTTPStatusEvent" , "contents": "clone();" },
{ "trigger": "toString\tHTTPStatusEvent" , "contents": "toString();" },
"IEventDispatcher",
{ "trigger": "addEventListener\tIEventDispatcher" , "contents": "addEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "dispatchEvent\tIEventDispatcher" , "contents": "dispatchEvent(${1:event:Event});" },
{ "trigger": "hasEventListener\tIEventDispatcher" , "contents": "hasEventListener(${1:type:String});" },
{ "trigger": "removeEventListener\tIEventDispatcher" , "contents": "removeEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "willTrigger\tIEventDispatcher" , "contents": "willTrigger(${1:type:String});" },
"IMEEvent",
{ "trigger": "IMEEvent\tIMEEvent" , "contents": "IMEEvent(${1:type:String});" },
{ "trigger": "clone\tIMEEvent" , "contents": "clone();" },
{ "trigger": "toString\tIMEEvent" , "contents": "toString();" },
"InvokeEvent",
{ "trigger": "InvokeEvent\tInvokeEvent" , "contents": "InvokeEvent(${1:type:String});" },
{ "trigger": "clone\tInvokeEvent" , "contents": "clone();" },
"IOErrorEvent",
{ "trigger": "IOErrorEvent\tIOErrorEvent" , "contents": "IOErrorEvent(${1:type:String});" },
{ "trigger": "clone\tIOErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tIOErrorEvent" , "contents": "toString();" },
"KeyboardEvent",
{ "trigger": "KeyboardEvent\tKeyboardEvent" , "contents": "KeyboardEvent(${1:type:String});" },
{ "trigger": "clone\tKeyboardEvent" , "contents": "clone();" },
{ "trigger": "toString\tKeyboardEvent" , "contents": "toString();" },
{ "trigger": "updateAfterEvent\tKeyboardEvent" , "contents": "updateAfterEvent();" },
"LocationChangeEvent",
{ "trigger": "LocationChangeEvent\tLocationChangeEvent" , "contents": "LocationChangeEvent(${1:type:String});" },
{ "trigger": "clone\tLocationChangeEvent" , "contents": "clone();" },
{ "trigger": "toString\tLocationChangeEvent" , "contents": "toString();" },
"MediaEvent",
{ "trigger": "MediaEvent\tMediaEvent" , "contents": "MediaEvent(${1:type:String});" },
{ "trigger": "clone\tMediaEvent" , "contents": "clone();" },
{ "trigger": "toString\tMediaEvent" , "contents": "toString();" },
"MouseEvent",
{ "trigger": "MouseEvent\tMouseEvent" , "contents": "MouseEvent(${1:type:String});" },
{ "trigger": "clone\tMouseEvent" , "contents": "clone();" },
{ "trigger": "toString\tMouseEvent" , "contents": "toString();" },
{ "trigger": "updateAfterEvent\tMouseEvent" , "contents": "updateAfterEvent();" },
"NativeDragEvent",
{ "trigger": "NativeDragEvent\tNativeDragEvent" , "contents": "NativeDragEvent(${1:type:String});" },
{ "trigger": "clone\tNativeDragEvent" , "contents": "clone();" },
{ "trigger": "toString\tNativeDragEvent" , "contents": "toString();" },
"NativeProcessExitEvent",
{ "trigger": "NativeProcessExitEvent\tNativeProcessExitEvent" , "contents": "NativeProcessExitEvent(${1:type:String});" },
{ "trigger": "clone\tNativeProcessExitEvent" , "contents": "clone();" },
{ "trigger": "toString\tNativeProcessExitEvent" , "contents": "toString();" },
"NativeWindowBoundsEvent",
{ "trigger": "NativeWindowBoundsEvent\tNativeWindowBoundsEvent" , "contents": "NativeWindowBoundsEvent(${1:type:String});" },
{ "trigger": "clone\tNativeWindowBoundsEvent" , "contents": "clone();" },
{ "trigger": "toString\tNativeWindowBoundsEvent" , "contents": "toString();" },
"NativeWindowDisplayStateEvent",
{ "trigger": "NativeWindowDisplayStateEvent\tNativeWindowDisplayStateEvent" , "contents": "NativeWindowDisplayStateEvent(${1:type:String});" },
{ "trigger": "clone\tNativeWindowDisplayStateEvent" , "contents": "clone();" },
{ "trigger": "toString\tNativeWindowDisplayStateEvent" , "contents": "toString();" },
"NetStatusEvent",
{ "trigger": "NetStatusEvent\tNetStatusEvent" , "contents": "NetStatusEvent(${1:type:String});" },
{ "trigger": "clone\tNetStatusEvent" , "contents": "clone();" },
{ "trigger": "toString\tNetStatusEvent" , "contents": "toString();" },
"OutputProgressEvent",
{ "trigger": "OutputProgressEvent\tOutputProgressEvent" , "contents": "OutputProgressEvent(${1:type:String});" },
{ "trigger": "clone\tOutputProgressEvent" , "contents": "clone();" },
{ "trigger": "toString\tOutputProgressEvent" , "contents": "toString();" },
"PressAndTapGestureEvent",
{ "trigger": "PressAndTapGestureEvent\tPressAndTapGestureEvent" , "contents": "PressAndTapGestureEvent(${1:type:String});" },
{ "trigger": "clone\tPressAndTapGestureEvent" , "contents": "clone();" },
{ "trigger": "toString\tPressAndTapGestureEvent" , "contents": "toString();" },
"ProgressEvent",
{ "trigger": "ProgressEvent\tProgressEvent" , "contents": "ProgressEvent(${1:type:String});" },
{ "trigger": "clone\tProgressEvent" , "contents": "clone();" },
{ "trigger": "toString\tProgressEvent" , "contents": "toString();" },
"SampleDataEvent",
{ "trigger": "SampleDataEvent\tSampleDataEvent" , "contents": "SampleDataEvent(${1:type:String});" },
{ "trigger": "clone\tSampleDataEvent" , "contents": "clone();" },
{ "trigger": "toString\tSampleDataEvent" , "contents": "toString();" },
"ScreenMouseEvent",
{ "trigger": "ScreenMouseEvent\tScreenMouseEvent" , "contents": "ScreenMouseEvent(${1:type:String});" },
{ "trigger": "clone\tScreenMouseEvent" , "contents": "clone();" },
{ "trigger": "toString\tScreenMouseEvent" , "contents": "toString();" },
"SecurityErrorEvent",
{ "trigger": "SecurityErrorEvent\tSecurityErrorEvent" , "contents": "SecurityErrorEvent(${1:type:String});" },
{ "trigger": "clone\tSecurityErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tSecurityErrorEvent" , "contents": "toString();" },
"ServerSocketConnectEvent",
{ "trigger": "ServerSocketConnectEvent\tServerSocketConnectEvent" , "contents": "ServerSocketConnectEvent(${1:type:String});" },
{ "trigger": "clone\tServerSocketConnectEvent" , "contents": "clone();" },
{ "trigger": "toString\tServerSocketConnectEvent" , "contents": "toString();" },
"ShaderEvent",
{ "trigger": "ShaderEvent\tShaderEvent" , "contents": "ShaderEvent(${1:type:String});" },
{ "trigger": "clone\tShaderEvent" , "contents": "clone();" },
{ "trigger": "toString\tShaderEvent" , "contents": "toString();" },
"SoftKeyboardEvent",
{ "trigger": "SoftKeyboardEvent\tSoftKeyboardEvent" , "contents": "SoftKeyboardEvent(${1:type:String},${2:bubbles:Boolean},${3:cancelable:Boolean},${4:relatedObjectVal:InteractiveObject},${5:triggerTypeVal:String});" },
{ "trigger": "clone\tSoftKeyboardEvent" , "contents": "clone();" },
{ "trigger": "toString\tSoftKeyboardEvent" , "contents": "toString();" },
"SoftKeyboardTrigger",
"SQLErrorEvent",
{ "trigger": "SQLErrorEvent\tSQLErrorEvent" , "contents": "SQLErrorEvent(${1:type:String});" },
{ "trigger": "clone\tSQLErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tSQLErrorEvent" , "contents": "toString();" },
"SQLEvent",
{ "trigger": "SQLEvent\tSQLEvent" , "contents": "SQLEvent(${1:type:String});" },
{ "trigger": "clone\tSQLEvent" , "contents": "clone();" },
"SQLUpdateEvent",
{ "trigger": "SQLUpdateEvent\tSQLUpdateEvent" , "contents": "SQLUpdateEvent(${1:type:String});" },
{ "trigger": "clone\tSQLUpdateEvent" , "contents": "clone();" },
"StageOrientationEvent",
{ "trigger": "StageOrientationEvent\tStageOrientationEvent" , "contents": "StageOrientationEvent(${1:type:String});" },
{ "trigger": "clone\tStageOrientationEvent" , "contents": "clone();" },
{ "trigger": "toString\tStageOrientationEvent" , "contents": "toString();" },
"StageVideoAvailabilityEvent",
{ "trigger": "StageVideoAvailabilityEvent\tStageVideoAvailabilityEvent" , "contents": "StageVideoAvailabilityEvent(${1:type:String});" },
"StageVideoEvent",
{ "trigger": "StageVideoEvent\tStageVideoEvent" , "contents": "StageVideoEvent(${1:type:String});" },
"StatusEvent",
{ "trigger": "StatusEvent\tStatusEvent" , "contents": "StatusEvent(${1:type:String});" },
{ "trigger": "clone\tStatusEvent" , "contents": "clone();" },
{ "trigger": "toString\tStatusEvent" , "contents": "toString();" },
"StorageVolumeChangeEvent",
{ "trigger": "StorageVolumeChangeEvent\tStorageVolumeChangeEvent" , "contents": "StorageVolumeChangeEvent(${1:type:String});" },
{ "trigger": "clone\tStorageVolumeChangeEvent" , "contents": "clone();" },
{ "trigger": "toString\tStorageVolumeChangeEvent" , "contents": "toString();" },
"SyncEvent",
{ "trigger": "SyncEvent\tSyncEvent" , "contents": "SyncEvent(${1:type:String});" },
{ "trigger": "clone\tSyncEvent" , "contents": "clone();" },
{ "trigger": "toString\tSyncEvent" , "contents": "toString();" },
"TextEvent",
{ "trigger": "TextEvent\tTextEvent" , "contents": "TextEvent(${1:type:String});" },
{ "trigger": "clone\tTextEvent" , "contents": "clone();" },
{ "trigger": "toString\tTextEvent" , "contents": "toString();" },
"TimerEvent",
{ "trigger": "TimerEvent\tTimerEvent" , "contents": "TimerEvent(${1:type:String});" },
{ "trigger": "clone\tTimerEvent" , "contents": "clone();" },
{ "trigger": "toString\tTimerEvent" , "contents": "toString();" },
{ "trigger": "updateAfterEvent\tTimerEvent" , "contents": "updateAfterEvent();" },
"TouchEvent",
{ "trigger": "TouchEvent\tTouchEvent" , "contents": "TouchEvent(${1:type:String});" },
{ "trigger": "clone\tTouchEvent" , "contents": "clone();" },
{ "trigger": "toString\tTouchEvent" , "contents": "toString();" },
{ "trigger": "updateAfterEvent\tTouchEvent" , "contents": "updateAfterEvent();" },
"TransformGestureEvent",
{ "trigger": "TransformGestureEvent\tTransformGestureEvent" , "contents": "TransformGestureEvent(${1:type:String});" },
{ "trigger": "clone\tTransformGestureEvent" , "contents": "clone();" },
{ "trigger": "toString\tTransformGestureEvent" , "contents": "toString();" },
"UncaughtErrorEvent",
{ "trigger": "UncaughtErrorEvent\tUncaughtErrorEvent" , "contents": "UncaughtErrorEvent();" },
{ "trigger": "clone\tUncaughtErrorEvent" , "contents": "clone();" },
{ "trigger": "toString\tUncaughtErrorEvent" , "contents": "toString();" },
"UncaughtErrorEvents",
{ "trigger": "UncaughtErrorEvents\tUncaughtErrorEvents" , "contents": "UncaughtErrorEvents();" },
"ExtensionContext",
{ "trigger": "call\tExtensionContext" , "contents": "call(${1:functionName:String},${2:args:restParam});" },
{ "trigger": "createExtensionContext\tExtensionContext" , "contents": "createExtensionContext(${1:extensionID:String},${2:contextType:String});" },
{ "trigger": "dispose\tExtensionContext" , "contents": "dispose();" },
{ "trigger": "getExtensionDirectory\tExtensionContext" , "contents": "getExtensionDirectory(${1:extensionID:String});" },
"ExternalInterface",
{ "trigger": "addCallback\tExternalInterface" , "contents": "addCallback(${1:functionName:String},${2:closure:Function});" },
{ "trigger": "call\tExternalInterface" , "contents": "call(${1:functionName:String},${2:arguments:restParam});" },
"File",
{ "trigger": "File\tFile" , "contents": "File();" },
{ "trigger": "browseForDirectory\tFile" , "contents": "browseForDirectory(${1:title:String});" },
{ "trigger": "browseForOpenMultiple\tFile" , "contents": "browseForOpenMultiple(${1:title:String});" },
{ "trigger": "browseForOpen\tFile" , "contents": "browseForOpen(${1:title:String});" },
{ "trigger": "browseForSave\tFile" , "contents": "browseForSave(${1:title:String});" },
{ "trigger": "cancel\tFile" , "contents": "cancel();" },
{ "trigger": "canonicalize\tFile" , "contents": "canonicalize();" },
{ "trigger": "clone\tFile" , "contents": "clone();" },
{ "trigger": "copyToAsync\tFile" , "contents": "copyToAsync(${1:newLocation:FileReference});" },
{ "trigger": "copyTo\tFile" , "contents": "copyTo(${1:newLocation:FileReference});" },
{ "trigger": "createDirectory\tFile" , "contents": "createDirectory();" },
{ "trigger": "createTempDirectory\tFile" , "contents": "createTempDirectory();" },
{ "trigger": "createTempFile\tFile" , "contents": "createTempFile();" },
{ "trigger": "deleteDirectoryAsync\tFile" , "contents": "deleteDirectoryAsync();" },
{ "trigger": "deleteDirectory\tFile" , "contents": "deleteDirectory();" },
{ "trigger": "deleteFileAsync\tFile" , "contents": "deleteFileAsync();" },
{ "trigger": "deleteFile\tFile" , "contents": "deleteFile();" },
{ "trigger": "getDirectoryListingAsync\tFile" , "contents": "getDirectoryListingAsync();" },
{ "trigger": "getDirectoryListing\tFile" , "contents": "getDirectoryListing();" },
{ "trigger": "getRelativePath\tFile" , "contents": "getRelativePath(${1:ref:FileReference});" },
{ "trigger": "getRootDirectories\tFile" , "contents": "getRootDirectories();" },
{ "trigger": "moveToAsync\tFile" , "contents": "moveToAsync(${1:newLocation:FileReference});" },
{ "trigger": "moveToTrashAsync\tFile" , "contents": "moveToTrashAsync();" },
{ "trigger": "moveToTrash\tFile" , "contents": "moveToTrash();" },
{ "trigger": "moveTo\tFile" , "contents": "moveTo(${1:newLocation:FileReference});" },
{ "trigger": "openWithDefaultApplication\tFile" , "contents": "openWithDefaultApplication();" },
{ "trigger": "resolvePath\tFile" , "contents": "resolvePath(${1:path:String});" },
"FileMode",
"FileStream",
{ "trigger": "FileStream\tFileStream" , "contents": "FileStream();" },
{ "trigger": "close\tFileStream" , "contents": "close();" },
{ "trigger": "openAsync\tFileStream" , "contents": "openAsync(${1:file:File},${2:fileMode:String});" },
{ "trigger": "open\tFileStream" , "contents": "open(${1:file:File},${2:fileMode:String});" },
{ "trigger": "readBoolean\tFileStream" , "contents": "readBoolean();" },
{ "trigger": "readByte\tFileStream" , "contents": "readByte();" },
{ "trigger": "readBytes\tFileStream" , "contents": "readBytes(${1:bytes:ByteArray});" },
{ "trigger": "readDouble\tFileStream" , "contents": "readDouble();" },
{ "trigger": "readFloat\tFileStream" , "contents": "readFloat();" },
{ "trigger": "readInt\tFileStream" , "contents": "readInt();" },
{ "trigger": "readMultiByte\tFileStream" , "contents": "readMultiByte(${1:length:uint},${2:charSet:String});" },
{ "trigger": "readObject\tFileStream" , "contents": "readObject();" },
{ "trigger": "readShort\tFileStream" , "contents": "readShort();" },
{ "trigger": "readUTFBytes\tFileStream" , "contents": "readUTFBytes(${1:length:uint});" },
{ "trigger": "readUTF\tFileStream" , "contents": "readUTF();" },
{ "trigger": "readUnsignedByte\tFileStream" , "contents": "readUnsignedByte();" },
{ "trigger": "readUnsignedInt\tFileStream" , "contents": "readUnsignedInt();" },
{ "trigger": "readUnsignedShort\tFileStream" , "contents": "readUnsignedShort();" },
{ "trigger": "truncate\tFileStream" , "contents": "truncate();" },
{ "trigger": "writeBoolean\tFileStream" , "contents": "writeBoolean(${1:value:Boolean});" },
{ "trigger": "writeByte\tFileStream" , "contents": "writeByte(${1:value:int});" },
{ "trigger": "writeBytes\tFileStream" , "contents": "writeBytes(${1:bytes:ByteArray});" },
{ "trigger": "writeDouble\tFileStream" , "contents": "writeDouble(${1:value:Number});" },
{ "trigger": "writeFloat\tFileStream" , "contents": "writeFloat(${1:value:Number});" },
{ "trigger": "writeInt\tFileStream" , "contents": "writeInt(${1:value:int});" },
{ "trigger": "writeMultiByte\tFileStream" , "contents": "writeMultiByte(${1:value:String},${2:charSet:String});" },
{ "trigger": "writeObject\tFileStream" , "contents": "writeObject(${1:object:*});" },
{ "trigger": "writeShort\tFileStream" , "contents": "writeShort(${1:value:int});" },
{ "trigger": "writeUTFBytes\tFileStream" , "contents": "writeUTFBytes(${1:value:String});" },
{ "trigger": "writeUTF\tFileStream" , "contents": "writeUTF(${1:value:String});" },
{ "trigger": "writeUnsignedInt\tFileStream" , "contents": "writeUnsignedInt(${1:value:uint});" },
"StorageVolume",
{ "trigger": "StorageVolume\tStorageVolume" , "contents": "StorageVolume(${1:rootDirPath:File},${2:name:String},${3:writable:Boolean},${4:removable:Boolean},${5:fileSysType:String},${6:drive:String});" },
"StorageVolumeInfo",
{ "trigger": "getStorageVolumes\tStorageVolumeInfo" , "contents": "getStorageVolumes();" },
"BevelFilter",
{ "trigger": "BevelFilter\tBevelFilter" , "contents": "BevelFilter();" },
{ "trigger": "clone\tBevelFilter" , "contents": "clone();" },
"BitmapFilter",
{ "trigger": "clone\tBitmapFilter" , "contents": "clone();" },
"BitmapFilterQuality",
"BitmapFilterType",
"BlurFilter",
{ "trigger": "BlurFilter\tBlurFilter" , "contents": "BlurFilter();" },
{ "trigger": "clone\tBlurFilter" , "contents": "clone();" },
"ColorMatrixFilter",
{ "trigger": "ColorMatrixFilter\tColorMatrixFilter" , "contents": "ColorMatrixFilter();" },
{ "trigger": "clone\tColorMatrixFilter" , "contents": "clone();" },
"ConvolutionFilter",
{ "trigger": "ConvolutionFilter\tConvolutionFilter" , "contents": "ConvolutionFilter();" },
{ "trigger": "clone\tConvolutionFilter" , "contents": "clone();" },
"DisplacementMapFilter",
{ "trigger": "DisplacementMapFilter\tDisplacementMapFilter" , "contents": "DisplacementMapFilter();" },
{ "trigger": "clone\tDisplacementMapFilter" , "contents": "clone();" },
"DisplacementMapFilterMode",
"DropShadowFilter",
{ "trigger": "DropShadowFilter\tDropShadowFilter" , "contents": "DropShadowFilter();" },
{ "trigger": "clone\tDropShadowFilter" , "contents": "clone();" },
"GlowFilter",
{ "trigger": "GlowFilter\tGlowFilter" , "contents": "GlowFilter();" },
{ "trigger": "clone\tGlowFilter" , "contents": "clone();" },
"GradientBevelFilter",
{ "trigger": "GradientBevelFilter\tGradientBevelFilter" , "contents": "GradientBevelFilter();" },
{ "trigger": "clone\tGradientBevelFilter" , "contents": "clone();" },
"GradientGlowFilter",
{ "trigger": "GradientGlowFilter\tGradientGlowFilter" , "contents": "GradientGlowFilter();" },
{ "trigger": "clone\tGradientGlowFilter" , "contents": "clone();" },
"ShaderFilter",
{ "trigger": "ShaderFilter\tShaderFilter" , "contents": "ShaderFilter();" },
"ColorTransform",
{ "trigger": "ColorTransform\tColorTransform" , "contents": "ColorTransform();" },
{ "trigger": "concat\tColorTransform" , "contents": "concat(${1:second:ColorTransform});" },
{ "trigger": "toString\tColorTransform" , "contents": "toString();" },
"Matrix",
{ "trigger": "Matrix\tMatrix" , "contents": "Matrix();" },
{ "trigger": "clone\tMatrix" , "contents": "clone();" },
{ "trigger": "concat\tMatrix" , "contents": "concat(${1:m:Matrix});" },
{ "trigger": "createBox\tMatrix" , "contents": "createBox(${1:scaleX:Number},${2:scaleY:Number});" },
{ "trigger": "createGradientBox\tMatrix" , "contents": "createGradientBox(${1:width:Number},${2:height:Number});" },
{ "trigger": "deltaTransformPoint\tMatrix" , "contents": "deltaTransformPoint(${1:point:Point});" },
{ "trigger": "identity\tMatrix" , "contents": "identity();" },
{ "trigger": "invert\tMatrix" , "contents": "invert();" },
{ "trigger": "rotate\tMatrix" , "contents": "rotate(${1:angle:Number});" },
{ "trigger": "scale\tMatrix" , "contents": "scale(${1:sx:Number},${2:sy:Number});" },
{ "trigger": "toString\tMatrix" , "contents": "toString();" },
{ "trigger": "transformPoint\tMatrix" , "contents": "transformPoint(${1:point:Point});" },
{ "trigger": "translate\tMatrix" , "contents": "translate(${1:dx:Number},${2:dy:Number});" },
"Matrix3D",
{ "trigger": "Matrix3D\tMatrix3D" , "contents": "Matrix3D();" },
{ "trigger": "appendRotation\tMatrix3D" , "contents": "appendRotation(${1:degrees:Number},${2:axis:Vector3D});" },
{ "trigger": "appendScale\tMatrix3D" , "contents": "appendScale(${1:xScale:Number},${2:yScale:Number},${3:zScale:Number});" },
{ "trigger": "appendTranslation\tMatrix3D" , "contents": "appendTranslation(${1:x:Number},${2:y:Number},${3:z:Number});" },
{ "trigger": "append\tMatrix3D" , "contents": "append(${1:lhs:Matrix3D});" },
{ "trigger": "clone\tMatrix3D" , "contents": "clone();" },
{ "trigger": "decompose\tMatrix3D" , "contents": "decompose();" },
{ "trigger": "deltaTransformVector\tMatrix3D" , "contents": "deltaTransformVector(${1:v:Vector3D});" },
{ "trigger": "identity\tMatrix3D" , "contents": "identity();" },
{ "trigger": "interpolateTo\tMatrix3D" , "contents": "interpolateTo(${1:toMat:Matrix3D},${2:percent:Number});" },
{ "trigger": "interpolate\tMatrix3D" , "contents": "interpolate(${1:thisMat:Matrix3D},${2:toMat:Matrix3D},${3:percent:Number});" },
{ "trigger": "invert\tMatrix3D" , "contents": "invert();" },
{ "trigger": "pointAt\tMatrix3D" , "contents": "pointAt(${1:pos:Vector3D});" },
{ "trigger": "prependRotation\tMatrix3D" , "contents": "prependRotation(${1:degrees:Number},${2:axis:Vector3D});" },
{ "trigger": "prependScale\tMatrix3D" , "contents": "prependScale(${1:xScale:Number},${2:yScale:Number},${3:zScale:Number});" },
{ "trigger": "prependTranslation\tMatrix3D" , "contents": "prependTranslation(${1:x:Number},${2:y:Number},${3:z:Number});" },
{ "trigger": "prepend\tMatrix3D" , "contents": "prepend(${1:rhs:Matrix3D});" },
{ "trigger": "recompose\tMatrix3D" , "contents": "recompose(${1:components:Vector3D});" },
{ "trigger": "transformVector\tMatrix3D" , "contents": "transformVector(${1:v:Vector3D});" },
{ "trigger": "transformVectors\tMatrix3D" , "contents": "transformVectors(${1:vin:Vector$Number},${2:vout:Vector$Number});" },
{ "trigger": "transpose\tMatrix3D" , "contents": "transpose();" },
"Orientation3D",
"PerspectiveProjection",
{ "trigger": "PerspectiveProjection\tPerspectiveProjection" , "contents": "PerspectiveProjection();" },
{ "trigger": "toMatrix3D\tPerspectiveProjection" , "contents": "toMatrix3D();" },
"Point",
{ "trigger": "Point\tPoint" , "contents": "Point();" },
{ "trigger": "add\tPoint" , "contents": "add(${1:v:Point});" },
{ "trigger": "clone\tPoint" , "contents": "clone();" },
{ "trigger": "distance\tPoint" , "contents": "distance(${1:pt1:Point},${2:pt2:Point});" },
{ "trigger": "equals\tPoint" , "contents": "equals(${1:toCompare:Point});" },
{ "trigger": "interpolate\tPoint" , "contents": "interpolate(${1:pt1:Point},${2:pt2:Point},${3:f:Number});" },
{ "trigger": "normalize\tPoint" , "contents": "normalize(${1:thickness:Number});" },
{ "trigger": "offset\tPoint" , "contents": "offset(${1:dx:Number},${2:dy:Number});" },
{ "trigger": "polar\tPoint" , "contents": "polar(${1:len:Number},${2:angle:Number});" },
{ "trigger": "subtract\tPoint" , "contents": "subtract(${1:v:Point});" },
{ "trigger": "toString\tPoint" , "contents": "toString();" },
"Rectangle",
{ "trigger": "Rectangle\tRectangle" , "contents": "Rectangle();" },
{ "trigger": "clone\tRectangle" , "contents": "clone();" },
{ "trigger": "containsPoint\tRectangle" , "contents": "containsPoint(${1:point:Point});" },
{ "trigger": "containsRect\tRectangle" , "contents": "containsRect(${1:rect:Rectangle});" },
{ "trigger": "contains\tRectangle" , "contents": "contains(${1:x:Number},${2:y:Number});" },
{ "trigger": "equals\tRectangle" , "contents": "equals(${1:toCompare:Rectangle});" },
{ "trigger": "inflatePoint\tRectangle" , "contents": "inflatePoint(${1:point:Point});" },
{ "trigger": "inflate\tRectangle" , "contents": "inflate(${1:dx:Number},${2:dy:Number});" },
{ "trigger": "intersection\tRectangle" , "contents": "intersection(${1:toIntersect:Rectangle});" },
{ "trigger": "intersects\tRectangle" , "contents": "intersects(${1:toIntersect:Rectangle});" },
{ "trigger": "isEmpty\tRectangle" , "contents": "isEmpty();" },
{ "trigger": "offsetPoint\tRectangle" , "contents": "offsetPoint(${1:point:Point});" },
{ "trigger": "offset\tRectangle" , "contents": "offset(${1:dx:Number},${2:dy:Number});" },
{ "trigger": "setEmpty\tRectangle" , "contents": "setEmpty();" },
{ "trigger": "toString\tRectangle" , "contents": "toString();" },
{ "trigger": "union\tRectangle" , "contents": "union(${1:toUnion:Rectangle});" },
"Transform",
{ "trigger": "getRelativeMatrix3D\tTransform" , "contents": "getRelativeMatrix3D(${1:relativeTo:DisplayObject});" },
"Utils3D",
{ "trigger": "pointTowards\tUtils3D" , "contents": "pointTowards(${1:percent:Number},${2:mat:Matrix3D},${3:pos:Vector3D});" },
{ "trigger": "projectVectors\tUtils3D" , "contents": "projectVectors(${1:m:Matrix3D},${2:verts:Vector$Number},${3:projectedVerts:Vector$Number},${4:uvts:Vector$Number});" },
{ "trigger": "projectVector\tUtils3D" , "contents": "projectVector(${1:m:Matrix3D},${2:v:Vector3D});" },
"Vector3D",
{ "trigger": "Vector3D\tVector3D" , "contents": "Vector3D();" },
{ "trigger": "add\tVector3D" , "contents": "add(${1:a:Vector3D});" },
{ "trigger": "angleBetween\tVector3D" , "contents": "angleBetween(${1:a:Vector3D},${2:b:Vector3D});" },
{ "trigger": "clone\tVector3D" , "contents": "clone();" },
{ "trigger": "crossProduct\tVector3D" , "contents": "crossProduct(${1:a:Vector3D});" },
{ "trigger": "decrementBy\tVector3D" , "contents": "decrementBy(${1:a:Vector3D});" },
{ "trigger": "distance\tVector3D" , "contents": "distance(${1:pt1:Vector3D},${2:pt2:Vector3D});" },
{ "trigger": "dotProduct\tVector3D" , "contents": "dotProduct(${1:a:Vector3D});" },
{ "trigger": "equals\tVector3D" , "contents": "equals(${1:toCompare:Vector3D});" },
{ "trigger": "incrementBy\tVector3D" , "contents": "incrementBy(${1:a:Vector3D});" },
{ "trigger": "nearEquals\tVector3D" , "contents": "nearEquals(${1:toCompare:Vector3D},${2:tolerance:Number});" },
{ "trigger": "negate\tVector3D" , "contents": "negate();" },
{ "trigger": "normalize\tVector3D" , "contents": "normalize();" },
{ "trigger": "project\tVector3D" , "contents": "project();" },
{ "trigger": "scaleBy\tVector3D" , "contents": "scaleBy(${1:s:Number});" },
{ "trigger": "subtract\tVector3D" , "contents": "subtract(${1:a:Vector3D});" },
{ "trigger": "toString\tVector3D" , "contents": "toString();" },
"Collator",
{ "trigger": "Collator\tCollator" , "contents": "Collator(${1:requestedLocaleIDName:String});" },
{ "trigger": "compare\tCollator" , "contents": "compare(${1:string1:String},${2:string2:String});" },
{ "trigger": "equals\tCollator" , "contents": "equals(${1:string1:String},${2:string2:String});" },
{ "trigger": "getAvailableLocaleIDNames\tCollator" , "contents": "getAvailableLocaleIDNames();" },
"CollatorMode",
"CurrencyFormatter",
{ "trigger": "CurrencyFormatter\tCurrencyFormatter" , "contents": "CurrencyFormatter(${1:requestedLocaleIDName:String});" },
{ "trigger": "format\tCurrencyFormatter" , "contents": "format(${1:value:Number});" },
{ "trigger": "formattingWithCurrencySymbolIsSafe\tCurrencyFormatter" , "contents": "formattingWithCurrencySymbolIsSafe(${1:requestedISOCode:String});" },
{ "trigger": "getAvailableLocaleIDNames\tCurrencyFormatter" , "contents": "getAvailableLocaleIDNames();" },
{ "trigger": "parse\tCurrencyFormatter" , "contents": "parse(${1:inputString:String});" },
{ "trigger": "setCurrency\tCurrencyFormatter" , "contents": "setCurrency(${1:currencyISOCode:String},${2:currencySymbol:String});" },
"CurrencyParseResult",
{ "trigger": "CurrencyParseResult\tCurrencyParseResult" , "contents": "CurrencyParseResult();" },
"DateTimeFormatter",
{ "trigger": "DateTimeFormatter\tDateTimeFormatter" , "contents": "DateTimeFormatter(${1:requestedLocaleIDName:String});" },
{ "trigger": "formatUTC\tDateTimeFormatter" , "contents": "formatUTC(${1:dateTime:Date});" },
{ "trigger": "format\tDateTimeFormatter" , "contents": "format(${1:dateTime:Date});" },
{ "trigger": "getAvailableLocaleIDNames\tDateTimeFormatter" , "contents": "getAvailableLocaleIDNames();" },
{ "trigger": "getDateStyle\tDateTimeFormatter" , "contents": "getDateStyle();" },
{ "trigger": "getDateTimePattern\tDateTimeFormatter" , "contents": "getDateTimePattern();" },
{ "trigger": "getFirstWeekday\tDateTimeFormatter" , "contents": "getFirstWeekday();" },
{ "trigger": "getMonthNames\tDateTimeFormatter" , "contents": "getMonthNames();" },
{ "trigger": "getTimeStyle\tDateTimeFormatter" , "contents": "getTimeStyle();" },
{ "trigger": "getWeekdayNames\tDateTimeFormatter" , "contents": "getWeekdayNames();" },
{ "trigger": "setDateTimePattern\tDateTimeFormatter" , "contents": "setDateTimePattern(${1:pattern:String});" },
{ "trigger": "setDateTimeStyles\tDateTimeFormatter" , "contents": "setDateTimeStyles(${1:dateStyle:String},${2:timeStyle:String});" },
"DateTimeNameContext",
"DateTimeNameStyle",
"DateTimeStyle",
"LastOperationStatus",
"LocaleID",
{ "trigger": "LocaleID\tLocaleID" , "contents": "LocaleID(${1:name:String});" },
{ "trigger": "determinePreferredLocales\tLocaleID" , "contents": "determinePreferredLocales(${1:want:Vector$String},${2:have:Vector$String});" },
{ "trigger": "getKeysAndValues\tLocaleID" , "contents": "getKeysAndValues();" },
{ "trigger": "getLanguage\tLocaleID" , "contents": "getLanguage();" },
{ "trigger": "getRegion\tLocaleID" , "contents": "getRegion();" },
{ "trigger": "getScript\tLocaleID" , "contents": "getScript();" },
{ "trigger": "getVariant\tLocaleID" , "contents": "getVariant();" },
{ "trigger": "isRightToLeft\tLocaleID" , "contents": "isRightToLeft();" },
"NationalDigitsType",
"NumberFormatter",
{ "trigger": "NumberFormatter\tNumberFormatter" , "contents": "NumberFormatter(${1:requestedLocaleIDName:String});" },
{ "trigger": "formatInt\tNumberFormatter" , "contents": "formatInt(${1:value:int});" },
{ "trigger": "formatNumber\tNumberFormatter" , "contents": "formatNumber(${1:value:Number});" },
{ "trigger": "formatUint\tNumberFormatter" , "contents": "formatUint(${1:value:uint});" },
{ "trigger": "getAvailableLocaleIDNames\tNumberFormatter" , "contents": "getAvailableLocaleIDNames();" },
{ "trigger": "parseNumber\tNumberFormatter" , "contents": "parseNumber(${1:parseString:String});" },
{ "trigger": "parse\tNumberFormatter" , "contents": "parse(${1:parseString:String});" },
"NumberParseResult",
{ "trigger": "NumberParseResult\tNumberParseResult" , "contents": "NumberParseResult();" },
"StringTools",
{ "trigger": "StringTools\tStringTools" , "contents": "StringTools(${1:requestedLocaleIDName:String});" },
{ "trigger": "getAvailableLocaleIDNames\tStringTools" , "contents": "getAvailableLocaleIDNames();" },
{ "trigger": "toLowerCase\tStringTools" , "contents": "toLowerCase(${1:s:String});" },
{ "trigger": "toUpperCase\tStringTools" , "contents": "toUpperCase(${1:s:String});" },
"HTMLHistoryItem",
"HTMLHost",
{ "trigger": "HTMLHost\tHTMLHost" , "contents": "HTMLHost();" },
{ "trigger": "createWindow\tHTMLHost" , "contents": "createWindow(${1:windowCreateOptions:HTMLWindowCreateOptions});" },
{ "trigger": "updateLocation\tHTMLHost" , "contents": "updateLocation(${1:locationURL:String});" },
{ "trigger": "updateStatus\tHTMLHost" , "contents": "updateStatus(${1:status:String});" },
{ "trigger": "updateTitle\tHTMLHost" , "contents": "updateTitle(${1:title:String});" },
{ "trigger": "windowBlur\tHTMLHost" , "contents": "windowBlur();" },
{ "trigger": "windowClose\tHTMLHost" , "contents": "windowClose();" },
{ "trigger": "windowFocus\tHTMLHost" , "contents": "windowFocus();" },
"HTMLLoader",
{ "trigger": "HTMLLoader\tHTMLLoader" , "contents": "HTMLLoader();" },
{ "trigger": "cancelLoad\tHTMLLoader" , "contents": "cancelLoad();" },
{ "trigger": "createRootWindow\tHTMLLoader" , "contents": "createRootWindow();" },
{ "trigger": "getHistoryAt\tHTMLLoader" , "contents": "getHistoryAt(${1:position:uint});" },
{ "trigger": "historyBack\tHTMLLoader" , "contents": "historyBack();" },
{ "trigger": "historyForward\tHTMLLoader" , "contents": "historyForward();" },
{ "trigger": "historyGo\tHTMLLoader" , "contents": "historyGo(${1:steps:int});" },
{ "trigger": "loadString\tHTMLLoader" , "contents": "loadString(${1:htmlContent:String});" },
{ "trigger": "load\tHTMLLoader" , "contents": "load(${1:urlRequestToLoad:URLRequest});" },
{ "trigger": "reload\tHTMLLoader" , "contents": "reload();" },
"HTMLPDFCapability",
"HTMLSWFCapability",
"HTMLWindowCreateOptions",
"Camera",
{ "trigger": "getCamera\tCamera" , "contents": "getCamera();" },
{ "trigger": "setKeyFrameInterval\tCamera" , "contents": "setKeyFrameInterval(${1:keyFrameInterval:int});" },
{ "trigger": "setLoopback\tCamera" , "contents": "setLoopback();" },
{ "trigger": "setMode\tCamera" , "contents": "setMode(${1:width:int},${2:height:int},${3:fps:Number});" },
{ "trigger": "setMotionLevel\tCamera" , "contents": "setMotionLevel(${1:motionLevel:int});" },
{ "trigger": "setQuality\tCamera" , "contents": "setQuality(${1:bandwidth:int},${2:quality:int});" },
"CameraRoll",
{ "trigger": "CameraRoll\tCameraRoll" , "contents": "CameraRoll();" },
{ "trigger": "addBitmapData\tCameraRoll" , "contents": "addBitmapData(${1:bitmapData:BitmapData});" },
{ "trigger": "browseForImage\tCameraRoll" , "contents": "browseForImage();" },
"CameraUI",
{ "trigger": "CameraUI\tCameraUI" , "contents": "CameraUI();" },
{ "trigger": "launch\tCameraUI" , "contents": "launch(${1:requestedMediaType:String});" },
"ID3Info",
"MediaPromise",
{ "trigger": "close\tMediaPromise" , "contents": "close();" },
{ "trigger": "open\tMediaPromise" , "contents": "open();" },
{ "trigger": "reportError\tMediaPromise" , "contents": "reportError(${1:e:ErrorEvent});" },
"MediaType",
"Microphone",
{ "trigger": "getMicrophone\tMicrophone" , "contents": "getMicrophone();" },
{ "trigger": "setLoopBack\tMicrophone" , "contents": "setLoopBack();" },
{ "trigger": "setSilenceLevel\tMicrophone" , "contents": "setSilenceLevel(${1:silenceLevel:Number});" },
{ "trigger": "setUseEchoSuppression\tMicrophone" , "contents": "setUseEchoSuppression(${1:useEchoSuppression:Boolean});" },
"Sound",
{ "trigger": "Sound\tSound" , "contents": "Sound();" },
{ "trigger": "close\tSound" , "contents": "close();" },
{ "trigger": "extract\tSound" , "contents": "extract(${1:target:ByteArray},${2:length:Number});" },
{ "trigger": "load\tSound" , "contents": "load(${1:stream:URLRequest});" },
{ "trigger": "play\tSound" , "contents": "play();" },
"SoundChannel",
{ "trigger": "stop\tSoundChannel" , "contents": "stop();" },
"SoundCodec",
"SoundLoaderContext",
{ "trigger": "SoundLoaderContext\tSoundLoaderContext" , "contents": "SoundLoaderContext();" },
"SoundMixer",
{ "trigger": "areSoundsInaccessible\tSoundMixer" , "contents": "areSoundsInaccessible();" },
{ "trigger": "computeSpectrum\tSoundMixer" , "contents": "computeSpectrum(${1:outputArray:ByteArray});" },
{ "trigger": "stopAll\tSoundMixer" , "contents": "stopAll();" },
"SoundTransform",
{ "trigger": "SoundTransform\tSoundTransform" , "contents": "SoundTransform();" },
"StageVideo",
{ "trigger": "attachNetStream\tStageVideo" , "contents": "attachNetStream(${1:netStream:NetStream});" },
"StageVideoAvailability",
"StageWebView",
{ "trigger": "StageWebView\tStageWebView" , "contents": "StageWebView();" },
{ "trigger": "assignFocus\tStageWebView" , "contents": "assignFocus();" },
{ "trigger": "dispose\tStageWebView" , "contents": "dispose();" },
{ "trigger": "drawViewPortToBitmapData\tStageWebView" , "contents": "drawViewPortToBitmapData(${1:bitmap:BitmapData});" },
{ "trigger": "historyBack\tStageWebView" , "contents": "historyBack();" },
{ "trigger": "historyForward\tStageWebView" , "contents": "historyForward();" },
{ "trigger": "loadString\tStageWebView" , "contents": "loadString(${1:text:String});" },
{ "trigger": "loadURL\tStageWebView" , "contents": "loadURL(${1:url:String});" },
{ "trigger": "reload\tStageWebView" , "contents": "reload();" },
{ "trigger": "stop\tStageWebView" , "contents": "stop();" },
"Video",
{ "trigger": "Video\tVideo" , "contents": "Video();" },
{ "trigger": "attachCamera\tVideo" , "contents": "attachCamera(${1:camera:Camera});" },
{ "trigger": "attachNetStream\tVideo" , "contents": "attachNetStream(${1:netStream:NetStream});" },
{ "trigger": "clear\tVideo" , "contents": "clear();" },
"VideoStatus",
"DatagramSocket",
{ "trigger": "DatagramSocket\tDatagramSocket" , "contents": "DatagramSocket();" },
{ "trigger": "bind\tDatagramSocket" , "contents": "bind();" },
{ "trigger": "close\tDatagramSocket" , "contents": "close();" },
{ "trigger": "connect\tDatagramSocket" , "contents": "connect(${1:remoteAddress:String},${2:remotePort:int});" },
{ "trigger": "receive\tDatagramSocket" , "contents": "receive();" },
{ "trigger": "send\tDatagramSocket" , "contents": "send(${1:bytes:ByteArray});" },
"FileFilter",
{ "trigger": "FileFilter\tFileFilter" , "contents": "FileFilter(${1:description:String},${2:extension:String});" },
"FileReference",
{ "trigger": "FileReference\tFileReference" , "contents": "FileReference();" },
{ "trigger": "browse\tFileReference" , "contents": "browse();" },
{ "trigger": "cancel\tFileReference" , "contents": "cancel();" },
{ "trigger": "download\tFileReference" , "contents": "download(${1:request:URLRequest});" },
{ "trigger": "load\tFileReference" , "contents": "load();" },
{ "trigger": "save\tFileReference" , "contents": "save(${1:data:*});" },
{ "trigger": "uploadUnencoded\tFileReference" , "contents": "uploadUnencoded(${1:request:URLRequest});" },
{ "trigger": "upload\tFileReference" , "contents": "upload(${1:request:URLRequest});" },
"FileReferenceList",
{ "trigger": "FileReferenceList\tFileReferenceList" , "contents": "FileReferenceList();" },
{ "trigger": "browse\tFileReferenceList" , "contents": "browse();" },
"GroupSpecifier",
{ "trigger": "GroupSpecifier\tGroupSpecifier" , "contents": "GroupSpecifier(${1:name:String});" },
{ "trigger": "addBootstrapPeer\tGroupSpecifier" , "contents": "addBootstrapPeer(${1:peerID:String});" },
{ "trigger": "addIPMulticastAddress\tGroupSpecifier" , "contents": "addIPMulticastAddress(${1:address:String});" },
{ "trigger": "authorizations\tGroupSpecifier" , "contents": "authorizations();" },
{ "trigger": "encodeBootstrapPeerIDSpec\tGroupSpecifier" , "contents": "encodeBootstrapPeerIDSpec(${1:peerID:String});" },
{ "trigger": "encodeIPMulticastAddressSpec\tGroupSpecifier" , "contents": "encodeIPMulticastAddressSpec(${1:address:String});" },
{ "trigger": "encodePostingAuthorization\tGroupSpecifier" , "contents": "encodePostingAuthorization(${1:password:String});" },
{ "trigger": "encodePublishAuthorization\tGroupSpecifier" , "contents": "encodePublishAuthorization(${1:password:String});" },
{ "trigger": "groupspecWithAuthorizations\tGroupSpecifier" , "contents": "groupspecWithAuthorizations();" },
{ "trigger": "groupspecWithoutAuthorizations\tGroupSpecifier" , "contents": "groupspecWithoutAuthorizations();" },
{ "trigger": "makeUnique\tGroupSpecifier" , "contents": "makeUnique();" },
{ "trigger": "setPostingPassword\tGroupSpecifier" , "contents": "setPostingPassword();" },
{ "trigger": "setPublishPassword\tGroupSpecifier" , "contents": "setPublishPassword();" },
{ "trigger": "toString\tGroupSpecifier" , "contents": "toString();" },
"IDynamicPropertyOutput",
{ "trigger": "writeDynamicProperty\tIDynamicPropertyOutput" , "contents": "writeDynamicProperty(${1:name:String},${2:value:*});" },
"IDynamicPropertyWriter",
{ "trigger": "writeDynamicProperties\tIDynamicPropertyWriter" , "contents": "writeDynamicProperties(${1:obj:Object},${2:output:IDynamicPropertyOutput});" },
"InterfaceAddress",
"IPVersion",
"LocalConnection",
{ "trigger": "LocalConnection\tLocalConnection" , "contents": "LocalConnection();" },
{ "trigger": "allowDomain\tLocalConnection" , "contents": "allowDomain(${1:domains:restParam});" },
{ "trigger": "allowInsecureDomain\tLocalConnection" , "contents": "allowInsecureDomain(${1:domains:restParam});" },
{ "trigger": "close\tLocalConnection" , "contents": "close();" },
{ "trigger": "connect\tLocalConnection" , "contents": "connect(${1:connectionName:String});" },
{ "trigger": "send\tLocalConnection" , "contents": "send(${1:connectionName:String},${2:methodName:String},${3:arguments:restParam});" },
"NetConnection",
{ "trigger": "NetConnection\tNetConnection" , "contents": "NetConnection();" },
{ "trigger": "addHeader\tNetConnection" , "contents": "addHeader(${1:operation:String});" },
{ "trigger": "call\tNetConnection" , "contents": "call(${1:command:String},${2:responder:Responder},${3:arguments:restParam});" },
{ "trigger": "close\tNetConnection" , "contents": "close();" },
{ "trigger": "connect\tNetConnection" , "contents": "connect(${1:command:String},${2:arguments:restParam});" },
"NetGroup",
{ "trigger": "NetGroup\tNetGroup" , "contents": "NetGroup(${1:connection:NetConnection},${2:groupspec:String});" },
{ "trigger": "addHaveObjects\tNetGroup" , "contents": "addHaveObjects(${1:startIndex:Number},${2:endIndex:Number});" },
{ "trigger": "addMemberHint\tNetGroup" , "contents": "addMemberHint(${1:peerID:String});" },
{ "trigger": "addNeighbor\tNetGroup" , "contents": "addNeighbor(${1:peerID:String});" },
{ "trigger": "addWantObjects\tNetGroup" , "contents": "addWantObjects(${1:startIndex:Number},${2:endIndex:Number});" },
{ "trigger": "close\tNetGroup" , "contents": "close();" },
{ "trigger": "convertPeerIDToGroupAddress\tNetGroup" , "contents": "convertPeerIDToGroupAddress(${1:peerID:String});" },
{ "trigger": "denyRequestedObject\tNetGroup" , "contents": "denyRequestedObject(${1:requestID:int});" },
{ "trigger": "post\tNetGroup" , "contents": "post(${1:message:Object});" },
{ "trigger": "removeHaveObjects\tNetGroup" , "contents": "removeHaveObjects(${1:startIndex:Number},${2:endIndex:Number});" },
{ "trigger": "removeWantObjects\tNetGroup" , "contents": "removeWantObjects(${1:startIndex:Number},${2:endIndex:Number});" },
{ "trigger": "sendToAllNeighbors\tNetGroup" , "contents": "sendToAllNeighbors(${1:message:Object});" },
{ "trigger": "sendToNearest\tNetGroup" , "contents": "sendToNearest(${1:message:Object},${2:groupAddress:String});" },
{ "trigger": "sendToNeighbor\tNetGroup" , "contents": "sendToNeighbor(${1:message:Object},${2:sendMode:String});" },
{ "trigger": "writeRequestedObject\tNetGroup" , "contents": "writeRequestedObject(${1:requestID:int},${2:object:Object});" },
"NetGroupInfo",
{ "trigger": "toString\tNetGroupInfo" , "contents": "toString();" },
"NetGroupReceiveMode",
"NetGroupReplicationStrategy",
"NetGroupSendMode",
"NetGroupSendResult",
"NetStream",
{ "trigger": "NetStream\tNetStream" , "contents": "NetStream(${1:connection:NetConnection});" },
{ "trigger": "appendBytesAction\tNetStream" , "contents": "appendBytesAction(${1:netStreamAppendBytesAction:String});" },
{ "trigger": "appendBytes\tNetStream" , "contents": "appendBytes(${1:bytes:ByteArray});" },
{ "trigger": "attachAudio\tNetStream" , "contents": "attachAudio(${1:microphone:Microphone});" },
{ "trigger": "attachCamera\tNetStream" , "contents": "attachCamera(${1:theCamera:Camera});" },
{ "trigger": "attach\tNetStream" , "contents": "attach(${1:connection:NetConnection});" },
{ "trigger": "close\tNetStream" , "contents": "close();" },
{ "trigger": "onPeerConnect\tNetStream" , "contents": "onPeerConnect(${1:subscriber:NetStream});" },
{ "trigger": "pause\tNetStream" , "contents": "pause();" },
{ "trigger": "play2\tNetStream" , "contents": "play2(${1:param:NetStreamPlayOptions});" },
{ "trigger": "play\tNetStream" , "contents": "play(${1:arguments:restParam});" },
{ "trigger": "preloadEmbeddedData\tNetStream" , "contents": "preloadEmbeddedData(${1:param:NetStreamPlayOptions});" },
{ "trigger": "publish\tNetStream" , "contents": "publish();" },
{ "trigger": "receiveAudio\tNetStream" , "contents": "receiveAudio(${1:flag:Boolean});" },
{ "trigger": "receiveVideoFPS\tNetStream" , "contents": "receiveVideoFPS(${1:FPS:Number});" },
{ "trigger": "receiveVideo\tNetStream" , "contents": "receiveVideo(${1:flag:Boolean});" },
{ "trigger": "resetDRMVouchers\tNetStream" , "contents": "resetDRMVouchers();" },
{ "trigger": "resume\tNetStream" , "contents": "resume();" },
{ "trigger": "seek\tNetStream" , "contents": "seek(${1:offset:Number});" },
{ "trigger": "send\tNetStream" , "contents": "send(${1:handlerName:String},${2:arguments:restParam});" },
{ "trigger": "setDRMAuthenticationCredentials\tNetStream" , "contents": "setDRMAuthenticationCredentials(${1:userName:String},${2:password:String},${3:type:String});" },
{ "trigger": "step\tNetStream" , "contents": "step(${1:frames:int});" },
{ "trigger": "togglePause\tNetStream" , "contents": "togglePause();" },
"NetStreamAppendBytesAction",
"NetStreamInfo",
{ "trigger": "toString\tNetStreamInfo" , "contents": "toString();" },
"NetStreamMulticastInfo",
{ "trigger": "toString\tNetStreamMulticastInfo" , "contents": "toString();" },
"NetStreamPlayOptions",
{ "trigger": "NetStreamPlayOptions\tNetStreamPlayOptions" , "contents": "NetStreamPlayOptions();" },
"NetStreamPlayTransitions",
"NetworkInfo",
{ "trigger": "findInterfaces\tNetworkInfo" , "contents": "findInterfaces();" },
"NetworkInterface",
"ObjectEncoding",
"Responder",
{ "trigger": "Responder\tResponder" , "contents": "Responder(${1:result:Function});" },
"SecureSocket",
{ "trigger": "SecureSocket\tSecureSocket" , "contents": "SecureSocket();" },
{ "trigger": "connect\tSecureSocket" , "contents": "connect(${1:host:String},${2:port:int});" },
"ServerSocket",
{ "trigger": "ServerSocket\tServerSocket" , "contents": "ServerSocket();" },
{ "trigger": "bind\tServerSocket" , "contents": "bind();" },
{ "trigger": "close\tServerSocket" , "contents": "close();" },
{ "trigger": "listen\tServerSocket" , "contents": "listen();" },
"SharedObject",
{ "trigger": "clear\tSharedObject" , "contents": "clear();" },
{ "trigger": "close\tSharedObject" , "contents": "close();" },
{ "trigger": "connect\tSharedObject" , "contents": "connect(${1:myConnection:NetConnection});" },
{ "trigger": "flush\tSharedObject" , "contents": "flush();" },
{ "trigger": "getLocal\tSharedObject" , "contents": "getLocal(${1:name:String});" },
{ "trigger": "getRemote\tSharedObject" , "contents": "getRemote(${1:name:String});" },
{ "trigger": "send\tSharedObject" , "contents": "send(${1:arguments:restParam});" },
{ "trigger": "setDirty\tSharedObject" , "contents": "setDirty(${1:propertyName:String});" },
{ "trigger": "setProperty\tSharedObject" , "contents": "setProperty(${1:propertyName:String});" },
"SharedObjectFlushStatus",
"Socket",
{ "trigger": "Socket\tSocket" , "contents": "Socket();" },
{ "trigger": "close\tSocket" , "contents": "close();" },
{ "trigger": "connect\tSocket" , "contents": "connect(${1:host:String},${2:port:int});" },
{ "trigger": "flush\tSocket" , "contents": "flush();" },
{ "trigger": "readBoolean\tSocket" , "contents": "readBoolean();" },
{ "trigger": "readByte\tSocket" , "contents": "readByte();" },
{ "trigger": "readBytes\tSocket" , "contents": "readBytes(${1:bytes:ByteArray});" },
{ "trigger": "readDouble\tSocket" , "contents": "readDouble();" },
{ "trigger": "readFloat\tSocket" , "contents": "readFloat();" },
{ "trigger": "readInt\tSocket" , "contents": "readInt();" },
{ "trigger": "readMultiByte\tSocket" , "contents": "readMultiByte(${1:length:uint},${2:charSet:String});" },
{ "trigger": "readObject\tSocket" , "contents": "readObject();" },
{ "trigger": "readShort\tSocket" , "contents": "readShort();" },
{ "trigger": "readUTFBytes\tSocket" , "contents": "readUTFBytes(${1:length:uint});" },
{ "trigger": "readUTF\tSocket" , "contents": "readUTF();" },
{ "trigger": "readUnsignedByte\tSocket" , "contents": "readUnsignedByte();" },
{ "trigger": "readUnsignedInt\tSocket" , "contents": "readUnsignedInt();" },
{ "trigger": "readUnsignedShort\tSocket" , "contents": "readUnsignedShort();" },
{ "trigger": "writeBoolean\tSocket" , "contents": "writeBoolean(${1:value:Boolean});" },
{ "trigger": "writeByte\tSocket" , "contents": "writeByte(${1:value:int});" },
{ "trigger": "writeBytes\tSocket" , "contents": "writeBytes(${1:bytes:ByteArray});" },
{ "trigger": "writeDouble\tSocket" , "contents": "writeDouble(${1:value:Number});" },
{ "trigger": "writeFloat\tSocket" , "contents": "writeFloat(${1:value:Number});" },
{ "trigger": "writeInt\tSocket" , "contents": "writeInt(${1:value:int});" },
{ "trigger": "writeMultiByte\tSocket" , "contents": "writeMultiByte(${1:value:String},${2:charSet:String});" },
{ "trigger": "writeObject\tSocket" , "contents": "writeObject(${1:object:*});" },
{ "trigger": "writeShort\tSocket" , "contents": "writeShort(${1:value:int});" },
{ "trigger": "writeUTFBytes\tSocket" , "contents": "writeUTFBytes(${1:value:String});" },
{ "trigger": "writeUTF\tSocket" , "contents": "writeUTF(${1:value:String});" },
{ "trigger": "writeUnsignedInt\tSocket" , "contents": "writeUnsignedInt(${1:value:uint});" },
"URLLoader",
{ "trigger": "URLLoader\tURLLoader" , "contents": "URLLoader();" },
{ "trigger": "addEventListener\tURLLoader" , "contents": "addEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "close\tURLLoader" , "contents": "close();" },
{ "trigger": "load\tURLLoader" , "contents": "load(${1:request:URLRequest});" },
"URLLoaderDataFormat",
"URLRequest",
{ "trigger": "URLRequest\tURLRequest" , "contents": "URLRequest();" },
"URLRequestDefaults",
{ "trigger": "setLoginCredentialsForHost\tURLRequestDefaults" , "contents": "setLoginCredentialsForHost(${1:hostname:String},${2:user:String},${3:password:String});" },
"URLRequestHeader",
{ "trigger": "URLRequestHeader\tURLRequestHeader" , "contents": "URLRequestHeader(${1:name:String},${2:value:String});" },
"URLRequestMethod",
"URLStream",
{ "trigger": "close\tURLStream" , "contents": "close();" },
{ "trigger": "load\tURLStream" , "contents": "load(${1:request:URLRequest});" },
{ "trigger": "readBoolean\tURLStream" , "contents": "readBoolean();" },
{ "trigger": "readByte\tURLStream" , "contents": "readByte();" },
{ "trigger": "readBytes\tURLStream" , "contents": "readBytes(${1:bytes:ByteArray});" },
{ "trigger": "readDouble\tURLStream" , "contents": "readDouble();" },
{ "trigger": "readFloat\tURLStream" , "contents": "readFloat();" },
{ "trigger": "readInt\tURLStream" , "contents": "readInt();" },
{ "trigger": "readMultiByte\tURLStream" , "contents": "readMultiByte(${1:length:uint},${2:charSet:String});" },
{ "trigger": "readObject\tURLStream" , "contents": "readObject();" },
{ "trigger": "readShort\tURLStream" , "contents": "readShort();" },
{ "trigger": "readUTFBytes\tURLStream" , "contents": "readUTFBytes(${1:length:uint});" },
{ "trigger": "readUTF\tURLStream" , "contents": "readUTF();" },
{ "trigger": "readUnsignedByte\tURLStream" , "contents": "readUnsignedByte();" },
{ "trigger": "readUnsignedInt\tURLStream" , "contents": "readUnsignedInt();" },
{ "trigger": "readUnsignedShort\tURLStream" , "contents": "readUnsignedShort();" },
"URLVariables",
{ "trigger": "URLVariables\tURLVariables" , "contents": "URLVariables();" },
{ "trigger": "decode\tURLVariables" , "contents": "decode(${1:source:String});" },
{ "trigger": "toString\tURLVariables" , "contents": "toString();" },
"XMLSocket",
{ "trigger": "XMLSocket\tXMLSocket" , "contents": "XMLSocket();" },
{ "trigger": "close\tXMLSocket" , "contents": "close();" },
{ "trigger": "connect\tXMLSocket" , "contents": "connect(${1:host:String},${2:port:int});" },
{ "trigger": "send\tXMLSocket" , "contents": "send(${1:object:*});" },
"AAAARecord",
{ "trigger": "AAAARecord\tAAAARecord" , "contents": "AAAARecord();" },
"ARecord",
{ "trigger": "ARecord\tARecord" , "contents": "ARecord();" },
"DNSResolver",
{ "trigger": "DNSResolver\tDNSResolver" , "contents": "DNSResolver();" },
{ "trigger": "lookup\tDNSResolver" , "contents": "lookup(${1:host:String},${2:recordType:Class});" },
"MXRecord",
{ "trigger": "MXRecord\tMXRecord" , "contents": "MXRecord();" },
"PTRRecord",
{ "trigger": "PTRRecord\tPTRRecord" , "contents": "PTRRecord();" },
"ResourceRecord",
"SRVRecord",
{ "trigger": "SRVRecord\tSRVRecord" , "contents": "SRVRecord();" },
"AuthenticationMethod",
"DRMContentData",
{ "trigger": "DRMContentData\tDRMContentData" , "contents": "DRMContentData();" },
{ "trigger": "getVoucherAccessInfo\tDRMContentData" , "contents": "getVoucherAccessInfo();" },
"DRMManager",
{ "trigger": "authenticate\tDRMManager" , "contents": "authenticate(${1:serverURL:String},${2:domain:String},${3:username:String},${4:password:String});" },
{ "trigger": "getDRMManager\tDRMManager" , "contents": "getDRMManager();" },
{ "trigger": "loadPreviewVoucher\tDRMManager" , "contents": "loadPreviewVoucher(${1:contentData:DRMContentData});" },
{ "trigger": "loadVoucher\tDRMManager" , "contents": "loadVoucher(${1:contentData:DRMContentData},${2:setting:String});" },
{ "trigger": "resetDRMVouchers\tDRMManager" , "contents": "resetDRMVouchers();" },
{ "trigger": "setAuthenticationToken\tDRMManager" , "contents": "setAuthenticationToken(${1:serverUrl:String},${2:domain:String},${3:token:ByteArray});" },
"DRMPlaybackTimeWindow",
"DRMVoucher",
"LoadVoucherSetting",
"VoucherAccessInfo",
"PaperSize",
"PrintJob",
{ "trigger": "PrintJob\tPrintJob" , "contents": "PrintJob();" },
{ "trigger": "addPage\tPrintJob" , "contents": "addPage(${1:sprite:Sprite});" },
{ "trigger": "selectPaperSize\tPrintJob" , "contents": "selectPaperSize(${1:paperSize:String});" },
{ "trigger": "send\tPrintJob" , "contents": "send();" },
{ "trigger": "showPageSetupDialog\tPrintJob" , "contents": "showPageSetupDialog();" },
{ "trigger": "start2\tPrintJob" , "contents": "start2();" },
{ "trigger": "start\tPrintJob" , "contents": "start();" },
{ "trigger": "terminate\tPrintJob" , "contents": "terminate();" },
"PrintJobOptions",
{ "trigger": "PrintJobOptions\tPrintJobOptions" , "contents": "PrintJobOptions();" },
"PrintJobOrientation",
"PrintMethod",
"PrintUIOptions",
{ "trigger": "PrintUIOptions\tPrintUIOptions" , "contents": "PrintUIOptions();" },
"DeleteObjectSample",
"NewObjectSample",
"Sample",
"StackFrame",
{ "trigger": "toString\tStackFrame" , "contents": "toString();" },
"CertificateStatus",
"IURIDereferencer",
{ "trigger": "dereference\tIURIDereferencer" , "contents": "dereference(${1:uri:String});" },
"ReferencesValidationSetting",
"RevocationCheckSettings",
"SignatureStatus",
"SignerTrustSettings",
"XMLSignatureValidator",
{ "trigger": "XMLSignatureValidator\tXMLSignatureValidator" , "contents": "XMLSignatureValidator();" },
{ "trigger": "addCertificate\tXMLSignatureValidator" , "contents": "addCertificate(${1:cert:ByteArray},${2:trusted:Boolean});" },
{ "trigger": "verify\tXMLSignatureValidator" , "contents": "verify(${1:signature:XML});" },
"Accelerometer",
{ "trigger": "Accelerometer\tAccelerometer" , "contents": "Accelerometer();" },
{ "trigger": "setRequestedUpdateInterval\tAccelerometer" , "contents": "setRequestedUpdateInterval(${1:interval:Number});" },
"Geolocation",
{ "trigger": "Geolocation\tGeolocation" , "contents": "Geolocation();" },
{ "trigger": "setRequestedUpdateInterval\tGeolocation" , "contents": "setRequestedUpdateInterval(${1:interval:Number});" },
"ApplicationDomain",
{ "trigger": "ApplicationDomain\tApplicationDomain" , "contents": "ApplicationDomain();" },
{ "trigger": "getDefinition\tApplicationDomain" , "contents": "getDefinition(${1:name:String});" },
{ "trigger": "hasDefinition\tApplicationDomain" , "contents": "hasDefinition(${1:name:String});" },
"Capabilities",
"ImageDecodingPolicy",
"IME",
{ "trigger": "compositionAbandoned\tIME" , "contents": "compositionAbandoned();" },
{ "trigger": "compositionSelectionChanged\tIME" , "contents": "compositionSelectionChanged(${1:start:int},${2:end:int});" },
{ "trigger": "doConversion\tIME" , "contents": "doConversion();" },
{ "trigger": "setCompositionString\tIME" , "contents": "setCompositionString(${1:composition:String});" },
"IMEConversionMode",
"JPEGLoaderContext",
{ "trigger": "JPEGLoaderContext\tJPEGLoaderContext" , "contents": "JPEGLoaderContext();" },
"LoaderContext",
{ "trigger": "LoaderContext\tLoaderContext" , "contents": "LoaderContext();" },
"Security",
{ "trigger": "allowDomain\tSecurity" , "contents": "allowDomain(${1:domains:restParam});" },
{ "trigger": "allowInsecureDomain\tSecurity" , "contents": "allowInsecureDomain(${1:domains:restParam});" },
{ "trigger": "loadPolicyFile\tSecurity" , "contents": "loadPolicyFile(${1:url:String});" },
{ "trigger": "showSettings\tSecurity" , "contents": "showSettings();" },
"SecurityDomain",
"SecurityPanel",
"System",
{ "trigger": "disposeXML\tSystem" , "contents": "disposeXML(${1:node:XML});" },
{ "trigger": "exit\tSystem" , "contents": "exit(${1:code:uint});" },
{ "trigger": "gc\tSystem" , "contents": "gc();" },
{ "trigger": "pause\tSystem" , "contents": "pause();" },
{ "trigger": "resume\tSystem" , "contents": "resume();" },
{ "trigger": "setClipboard\tSystem" , "contents": "setClipboard(${1:string:String});" },
"SystemUpdater",
{ "trigger": "SystemUpdater\tSystemUpdater" , "contents": "SystemUpdater();" },
{ "trigger": "cancel\tSystemUpdater" , "contents": "cancel();" },
{ "trigger": "update\tSystemUpdater" , "contents": "update(${1:type:String});" },
"SystemUpdaterType",
"TouchscreenType",
"AntiAliasType",
"CSMSettings",
{ "trigger": "CSMSettings\tCSMSettings" , "contents": "CSMSettings(${1:fontSize:Number},${2:insideCutoff:Number},${3:outsideCutoff:Number});" },
"Font",
{ "trigger": "enumerateFonts\tFont" , "contents": "enumerateFonts();" },
{ "trigger": "hasGlyphs\tFont" , "contents": "hasGlyphs(${1:str:String});" },
{ "trigger": "registerFont\tFont" , "contents": "registerFont(${1:font:Class});" },
"FontStyle",
"FontType",
"GridFitType",
"StaticText",
"StyleSheet",
{ "trigger": "StyleSheet\tStyleSheet" , "contents": "StyleSheet();" },
{ "trigger": "clear\tStyleSheet" , "contents": "clear();" },
{ "trigger": "getStyle\tStyleSheet" , "contents": "getStyle(${1:styleName:String});" },
{ "trigger": "parseCSS\tStyleSheet" , "contents": "parseCSS(${1:CSSText:String});" },
{ "trigger": "setStyle\tStyleSheet" , "contents": "setStyle(${1:styleName:String},${2:styleObject:Object});" },
{ "trigger": "transform\tStyleSheet" , "contents": "transform(${1:formatObject:Object});" },
"TextColorType",
"TextDisplayMode",
"TextExtent",
{ "trigger": "TextExtent\tTextExtent" , "contents": "TextExtent(${1:width:Number},${2:height:Number},${3:textFieldWidth:Number},${4:textFieldHeight:Number},${5:ascent:Number},${6:descent:Number});" },
"TextField",
{ "trigger": "TextField\tTextField" , "contents": "TextField();" },
{ "trigger": "appendText\tTextField" , "contents": "appendText(${1:newText:String});" },
{ "trigger": "getCharBoundaries\tTextField" , "contents": "getCharBoundaries(${1:charIndex:int});" },
{ "trigger": "getCharIndexAtPoint\tTextField" , "contents": "getCharIndexAtPoint(${1:x:Number},${2:y:Number});" },
{ "trigger": "getFirstCharInParagraph\tTextField" , "contents": "getFirstCharInParagraph(${1:charIndex:int});" },
{ "trigger": "getImageReference\tTextField" , "contents": "getImageReference(${1:id:String});" },
{ "trigger": "getLineIndexAtPoint\tTextField" , "contents": "getLineIndexAtPoint(${1:x:Number},${2:y:Number});" },
{ "trigger": "getLineIndexOfChar\tTextField" , "contents": "getLineIndexOfChar(${1:charIndex:int});" },
{ "trigger": "getLineLength\tTextField" , "contents": "getLineLength(${1:lineIndex:int});" },
{ "trigger": "getLineMetrics\tTextField" , "contents": "getLineMetrics(${1:lineIndex:int});" },
{ "trigger": "getLineOffset\tTextField" , "contents": "getLineOffset(${1:lineIndex:int});" },
{ "trigger": "getLineText\tTextField" , "contents": "getLineText(${1:lineIndex:int});" },
{ "trigger": "getParagraphLength\tTextField" , "contents": "getParagraphLength(${1:charIndex:int});" },
{ "trigger": "getTextFormat\tTextField" , "contents": "getTextFormat();" },
{ "trigger": "isFontCompatible\tTextField" , "contents": "isFontCompatible(${1:fontName:String},${2:fontStyle:String});" },
{ "trigger": "replaceSelectedText\tTextField" , "contents": "replaceSelectedText(${1:value:String});" },
{ "trigger": "replaceText\tTextField" , "contents": "replaceText(${1:beginIndex:int},${2:endIndex:int},${3:newText:String});" },
{ "trigger": "setSelection\tTextField" , "contents": "setSelection(${1:beginIndex:int},${2:endIndex:int});" },
{ "trigger": "setTextFormat\tTextField" , "contents": "setTextFormat(${1:format:TextFormat});" },
"TextFieldAutoSize",
"TextFieldType",
"TextFormat",
{ "trigger": "TextFormat\tTextFormat" , "contents": "TextFormat();" },
"TextFormatAlign",
"TextInteractionMode",
"TextLineMetrics",
{ "trigger": "TextLineMetrics\tTextLineMetrics" , "contents": "TextLineMetrics(${1:x:Number},${2:width:Number},${3:height:Number},${4:ascent:Number},${5:descent:Number},${6:leading:Number});" },
"TextRenderer",
{ "trigger": "setAdvancedAntiAliasingTable\tTextRenderer" , "contents": "setAdvancedAntiAliasingTable(${1:fontName:String},${2:fontStyle:String},${3:colorType:String},${4:advancedAntiAliasingTable:Array});" },
"TextSnapshot",
{ "trigger": "findText\tTextSnapshot" , "contents": "findText(${1:beginIndex:int},${2:textToFind:String},${3:caseSensitive:Boolean});" },
{ "trigger": "getSelectedText\tTextSnapshot" , "contents": "getSelectedText();" },
{ "trigger": "getSelected\tTextSnapshot" , "contents": "getSelected(${1:beginIndex:int},${2:endIndex:int});" },
{ "trigger": "getTextRunInfo\tTextSnapshot" , "contents": "getTextRunInfo(${1:beginIndex:int},${2:endIndex:int});" },
{ "trigger": "getText\tTextSnapshot" , "contents": "getText(${1:beginIndex:int},${2:endIndex:int});" },
{ "trigger": "hitTestTextNearPos\tTextSnapshot" , "contents": "hitTestTextNearPos(${1:x:Number},${2:y:Number});" },
{ "trigger": "setSelectColor\tTextSnapshot" , "contents": "setSelectColor();" },
{ "trigger": "setSelected\tTextSnapshot" , "contents": "setSelected(${1:beginIndex:int},${2:endIndex:int},${3:select:Boolean});" },
"BreakOpportunity",
"CFFHinting",
"ContentElement",
{ "trigger": "ContentElement\tContentElement" , "contents": "ContentElement();" },
"DigitCase",
"DigitWidth",
"EastAsianJustifier",
{ "trigger": "EastAsianJustifier\tEastAsianJustifier" , "contents": "EastAsianJustifier();" },
{ "trigger": "clone\tEastAsianJustifier" , "contents": "clone();" },
"ElementFormat",
{ "trigger": "ElementFormat\tElementFormat" , "contents": "ElementFormat();" },
{ "trigger": "clone\tElementFormat" , "contents": "clone();" },
{ "trigger": "getFontMetrics\tElementFormat" , "contents": "getFontMetrics();" },
"FontDescription",
{ "trigger": "FontDescription\tFontDescription" , "contents": "FontDescription();" },
{ "trigger": "clone\tFontDescription" , "contents": "clone();" },
{ "trigger": "isDeviceFontCompatible\tFontDescription" , "contents": "isDeviceFontCompatible(${1:fontName:String},${2:fontWeight:String},${3:fontPosture:String});" },
{ "trigger": "isFontCompatible\tFontDescription" , "contents": "isFontCompatible(${1:fontName:String},${2:fontWeight:String},${3:fontPosture:String});" },
"FontLookup",
"FontMetrics",
{ "trigger": "FontMetrics\tFontMetrics" , "contents": "FontMetrics(${1:emBox:Rectangle},${2:strikethroughOffset:Number},${3:strikethroughThickness:Number},${4:underlineOffset:Number},${5:underlineThickness:Number},${6:subscriptOffset:Number},${7:subscriptScale:Number},${8:superscriptOffset:Number},${9:superscriptScale:Number});" },
"FontPosture",
"FontWeight",
"GraphicElement",
{ "trigger": "GraphicElement\tGraphicElement" , "contents": "GraphicElement();" },
"GroupElement",
{ "trigger": "GroupElement\tGroupElement" , "contents": "GroupElement();" },
{ "trigger": "getElementAtCharIndex\tGroupElement" , "contents": "getElementAtCharIndex(${1:charIndex:int});" },
{ "trigger": "getElementAt\tGroupElement" , "contents": "getElementAt(${1:index:int});" },
{ "trigger": "getElementIndex\tGroupElement" , "contents": "getElementIndex(${1:element:ContentElement});" },
{ "trigger": "groupElements\tGroupElement" , "contents": "groupElements(${1:beginIndex:int},${2:endIndex:int});" },
{ "trigger": "mergeTextElements\tGroupElement" , "contents": "mergeTextElements(${1:beginIndex:int},${2:endIndex:int});" },
{ "trigger": "replaceElements\tGroupElement" , "contents": "replaceElements(${1:beginIndex:int},${2:endIndex:int},${3:newElements:ContentElement});" },
{ "trigger": "setElements\tGroupElement" , "contents": "setElements(${1:value:ContentElement});" },
{ "trigger": "splitTextElement\tGroupElement" , "contents": "splitTextElement(${1:elementIndex:int},${2:splitIndex:int});" },
{ "trigger": "ungroupElements\tGroupElement" , "contents": "ungroupElements(${1:groupIndex:int});" },
"JustificationStyle",
"Kerning",
"LigatureLevel",
"LineJustification",
"RenderingMode",
"SpaceJustifier",
{ "trigger": "SpaceJustifier\tSpaceJustifier" , "contents": "SpaceJustifier();" },
{ "trigger": "clone\tSpaceJustifier" , "contents": "clone();" },
"TabAlignment",
"TabStop",
{ "trigger": "TabStop\tTabStop" , "contents": "TabStop();" },
"TextBaseline",
"TextBlock",
{ "trigger": "TextBlock\tTextBlock" , "contents": "TextBlock();" },
{ "trigger": "createTextLine\tTextBlock" , "contents": "createTextLine();" },
{ "trigger": "dump\tTextBlock" , "contents": "dump();" },
{ "trigger": "findNextAtomBoundary\tTextBlock" , "contents": "findNextAtomBoundary(${1:afterCharIndex:int});" },
{ "trigger": "findNextWordBoundary\tTextBlock" , "contents": "findNextWordBoundary(${1:afterCharIndex:int});" },
{ "trigger": "findPreviousAtomBoundary\tTextBlock" , "contents": "findPreviousAtomBoundary(${1:beforeCharIndex:int});" },
{ "trigger": "findPreviousWordBoundary\tTextBlock" , "contents": "findPreviousWordBoundary(${1:beforeCharIndex:int});" },
{ "trigger": "getTextLineAtCharIndex\tTextBlock" , "contents": "getTextLineAtCharIndex(${1:charIndex:int});" },
{ "trigger": "recreateTextLine\tTextBlock" , "contents": "recreateTextLine(${1:textLine:TextLine});" },
{ "trigger": "releaseLineCreationData\tTextBlock" , "contents": "releaseLineCreationData();" },
{ "trigger": "releaseLines\tTextBlock" , "contents": "releaseLines(${1:firstLine:TextLine},${2:lastLine:TextLine});" },
"TextElement",
{ "trigger": "TextElement\tTextElement" , "contents": "TextElement();" },
{ "trigger": "replaceText\tTextElement" , "contents": "replaceText(${1:beginIndex:int},${2:endIndex:int},${3:newText:String});" },
"TextJustifier",
{ "trigger": "TextJustifier\tTextJustifier" , "contents": "TextJustifier(${1:locale:String},${2:lineJustification:String});" },
{ "trigger": "clone\tTextJustifier" , "contents": "clone();" },
{ "trigger": "getJustifierForLocale\tTextJustifier" , "contents": "getJustifierForLocale(${1:locale:String});" },
"TextLine",
{ "trigger": "dump\tTextLine" , "contents": "dump();" },
{ "trigger": "getAtomBidiLevel\tTextLine" , "contents": "getAtomBidiLevel(${1:atomIndex:int});" },
{ "trigger": "getAtomBounds\tTextLine" , "contents": "getAtomBounds(${1:atomIndex:int});" },
{ "trigger": "getAtomCenter\tTextLine" , "contents": "getAtomCenter(${1:atomIndex:int});" },
{ "trigger": "getAtomGraphic\tTextLine" , "contents": "getAtomGraphic(${1:atomIndex:int});" },
{ "trigger": "getAtomIndexAtCharIndex\tTextLine" , "contents": "getAtomIndexAtCharIndex(${1:charIndex:int});" },
{ "trigger": "getAtomIndexAtPoint\tTextLine" , "contents": "getAtomIndexAtPoint(${1:stageX:Number},${2:stageY:Number});" },
{ "trigger": "getAtomTextBlockBeginIndex\tTextLine" , "contents": "getAtomTextBlockBeginIndex(${1:atomIndex:int});" },
{ "trigger": "getAtomTextBlockEndIndex\tTextLine" , "contents": "getAtomTextBlockEndIndex(${1:atomIndex:int});" },
{ "trigger": "getAtomTextRotation\tTextLine" , "contents": "getAtomTextRotation(${1:atomIndex:int});" },
{ "trigger": "getAtomWordBoundaryOnLeft\tTextLine" , "contents": "getAtomWordBoundaryOnLeft(${1:atomIndex:int});" },
{ "trigger": "getBaselinePosition\tTextLine" , "contents": "getBaselinePosition(${1:baseline:String});" },
{ "trigger": "getMirrorRegion\tTextLine" , "contents": "getMirrorRegion(${1:mirror:EventDispatcher});" },
"TextLineCreationResult",
"TextLineMirrorRegion",
"TextLineValidity",
"TextRotation",
"TypographicCase",
"CompositionAttributeRange",
{ "trigger": "CompositionAttributeRange\tCompositionAttributeRange" , "contents": "CompositionAttributeRange(${1:relativeStart:int},${2:relativeEnd:int},${3:selected:Boolean},${4:converted:Boolean});" },
"IIMEClient",
{ "trigger": "confirmComposition\tIIMEClient" , "contents": "confirmComposition();" },
{ "trigger": "getTextBounds\tIIMEClient" , "contents": "getTextBounds(${1:startIndex:int},${2:endIndex:int});" },
{ "trigger": "getTextInRange\tIIMEClient" , "contents": "getTextInRange(${1:startIndex:int},${2:endIndex:int});" },
{ "trigger": "selectRange\tIIMEClient" , "contents": "selectRange(${1:anchorIndex:int},${2:activeIndex:int});" },
{ "trigger": "updateComposition\tIIMEClient" , "contents": "updateComposition(${1:text:String},${2:attributes:CompositionAttributeRange},${3:compositionStartIndex:int},${4:compositionEndIndex:int});" },
"ContextMenu",
{ "trigger": "ContextMenu\tContextMenu" , "contents": "ContextMenu();" },
{ "trigger": "addItemAt\tContextMenu" , "contents": "addItemAt(${1:item:NativeMenuItem},${2:index:int});" },
{ "trigger": "clone\tContextMenu" , "contents": "clone();" },
{ "trigger": "containsItem\tContextMenu" , "contents": "containsItem(${1:item:NativeMenuItem});" },
{ "trigger": "display\tContextMenu" , "contents": "display(${1:stage:Stage},${2:stageX:Number},${3:stageY:Number});" },
{ "trigger": "getItemAt\tContextMenu" , "contents": "getItemAt(${1:index:int});" },
{ "trigger": "getItemIndex\tContextMenu" , "contents": "getItemIndex(${1:item:NativeMenuItem});" },
{ "trigger": "hideBuiltInItems\tContextMenu" , "contents": "hideBuiltInItems();" },
{ "trigger": "removeAllItems\tContextMenu" , "contents": "removeAllItems();" },
{ "trigger": "removeItemAt\tContextMenu" , "contents": "removeItemAt(${1:index:int});" },
"ContextMenuBuiltInItems",
{ "trigger": "ContextMenuBuiltInItems\tContextMenuBuiltInItems" , "contents": "ContextMenuBuiltInItems();" },
"ContextMenuClipboardItems",
{ "trigger": "ContextMenuClipboardItems\tContextMenuClipboardItems" , "contents": "ContextMenuClipboardItems();" },
"ContextMenuItem",
{ "trigger": "ContextMenuItem\tContextMenuItem" , "contents": "ContextMenuItem(${1:caption:String});" },
{ "trigger": "clone\tContextMenuItem" , "contents": "clone();" },
{ "trigger": "systemClearMenuItem\tContextMenuItem" , "contents": "systemClearMenuItem();" },
{ "trigger": "systemCopyLinkMenuItem\tContextMenuItem" , "contents": "systemCopyLinkMenuItem();" },
{ "trigger": "systemCopyMenuItem\tContextMenuItem" , "contents": "systemCopyMenuItem();" },
{ "trigger": "systemCutMenuItem\tContextMenuItem" , "contents": "systemCutMenuItem();" },
{ "trigger": "systemOpenLinkMenuItem\tContextMenuItem" , "contents": "systemOpenLinkMenuItem();" },
{ "trigger": "systemPasteMenuItem\tContextMenuItem" , "contents": "systemPasteMenuItem();" },
{ "trigger": "systemSelectAllMenuItem\tContextMenuItem" , "contents": "systemSelectAllMenuItem();" },
"Keyboard",
{ "trigger": "isAccessible\tKeyboard" , "contents": "isAccessible();" },
"KeyboardType",
"KeyLocation",
"Mouse",
{ "trigger": "hide\tMouse" , "contents": "hide();" },
{ "trigger": "registerCursor\tMouse" , "contents": "registerCursor(${1:name:String},${2:cursor:MouseCursorData});" },
{ "trigger": "show\tMouse" , "contents": "show();" },
{ "trigger": "unregisterCursor\tMouse" , "contents": "unregisterCursor(${1:name:String});" },
"MouseCursor",
"MouseCursorData",
{ "trigger": "MouseCursorData\tMouseCursorData" , "contents": "MouseCursorData();" },
"Multitouch",
"MultitouchInputMode",
"ByteArray",
{ "trigger": "ByteArray\tByteArray" , "contents": "ByteArray();" },
{ "trigger": "clear\tByteArray" , "contents": "clear();" },
{ "trigger": "compress\tByteArray" , "contents": "compress();" },
{ "trigger": "deflate\tByteArray" , "contents": "deflate();" },
{ "trigger": "inflate\tByteArray" , "contents": "inflate();" },
{ "trigger": "readBoolean\tByteArray" , "contents": "readBoolean();" },
{ "trigger": "readByte\tByteArray" , "contents": "readByte();" },
{ "trigger": "readBytes\tByteArray" , "contents": "readBytes(${1:bytes:ByteArray});" },
{ "trigger": "readDouble\tByteArray" , "contents": "readDouble();" },
{ "trigger": "readFloat\tByteArray" , "contents": "readFloat();" },
{ "trigger": "readInt\tByteArray" , "contents": "readInt();" },
{ "trigger": "readMultiByte\tByteArray" , "contents": "readMultiByte(${1:length:uint},${2:charSet:String});" },
{ "trigger": "readObject\tByteArray" , "contents": "readObject();" },
{ "trigger": "readShort\tByteArray" , "contents": "readShort();" },
{ "trigger": "readUTFBytes\tByteArray" , "contents": "readUTFBytes(${1:length:uint});" },
{ "trigger": "readUTF\tByteArray" , "contents": "readUTF();" },
{ "trigger": "readUnsignedByte\tByteArray" , "contents": "readUnsignedByte();" },
{ "trigger": "readUnsignedInt\tByteArray" , "contents": "readUnsignedInt();" },
{ "trigger": "readUnsignedShort\tByteArray" , "contents": "readUnsignedShort();" },
{ "trigger": "toString\tByteArray" , "contents": "toString();" },
{ "trigger": "uncompress\tByteArray" , "contents": "uncompress();" },
{ "trigger": "writeBoolean\tByteArray" , "contents": "writeBoolean(${1:value:Boolean});" },
{ "trigger": "writeByte\tByteArray" , "contents": "writeByte(${1:value:int});" },
{ "trigger": "writeBytes\tByteArray" , "contents": "writeBytes(${1:bytes:ByteArray});" },
{ "trigger": "writeDouble\tByteArray" , "contents": "writeDouble(${1:value:Number});" },
{ "trigger": "writeFloat\tByteArray" , "contents": "writeFloat(${1:value:Number});" },
{ "trigger": "writeInt\tByteArray" , "contents": "writeInt(${1:value:int});" },
{ "trigger": "writeMultiByte\tByteArray" , "contents": "writeMultiByte(${1:value:String},${2:charSet:String});" },
{ "trigger": "writeObject\tByteArray" , "contents": "writeObject(${1:object:*});" },
{ "trigger": "writeShort\tByteArray" , "contents": "writeShort(${1:value:int});" },
{ "trigger": "writeUTFBytes\tByteArray" , "contents": "writeUTFBytes(${1:value:String});" },
{ "trigger": "writeUTF\tByteArray" , "contents": "writeUTF(${1:value:String});" },
{ "trigger": "writeUnsignedInt\tByteArray" , "contents": "writeUnsignedInt(${1:value:uint});" },
"CompressionAlgorithm",
"Dictionary",
{ "trigger": "Dictionary\tDictionary" , "contents": "Dictionary();" },
"Endian",
"IDataInput",
{ "trigger": "readBoolean\tIDataInput" , "contents": "readBoolean();" },
{ "trigger": "readByte\tIDataInput" , "contents": "readByte();" },
{ "trigger": "readBytes\tIDataInput" , "contents": "readBytes(${1:bytes:ByteArray});" },
{ "trigger": "readDouble\tIDataInput" , "contents": "readDouble();" },
{ "trigger": "readFloat\tIDataInput" , "contents": "readFloat();" },
{ "trigger": "readInt\tIDataInput" , "contents": "readInt();" },
{ "trigger": "readMultiByte\tIDataInput" , "contents": "readMultiByte(${1:length:uint},${2:charSet:String});" },
{ "trigger": "readObject\tIDataInput" , "contents": "readObject();" },
{ "trigger": "readShort\tIDataInput" , "contents": "readShort();" },
{ "trigger": "readUTFBytes\tIDataInput" , "contents": "readUTFBytes(${1:length:uint});" },
{ "trigger": "readUTF\tIDataInput" , "contents": "readUTF();" },
{ "trigger": "readUnsignedByte\tIDataInput" , "contents": "readUnsignedByte();" },
{ "trigger": "readUnsignedInt\tIDataInput" , "contents": "readUnsignedInt();" },
{ "trigger": "readUnsignedShort\tIDataInput" , "contents": "readUnsignedShort();" },
"IDataOutput",
{ "trigger": "writeBoolean\tIDataOutput" , "contents": "writeBoolean(${1:value:Boolean});" },
{ "trigger": "writeByte\tIDataOutput" , "contents": "writeByte(${1:value:int});" },
{ "trigger": "writeBytes\tIDataOutput" , "contents": "writeBytes(${1:bytes:ByteArray});" },
{ "trigger": "writeDouble\tIDataOutput" , "contents": "writeDouble(${1:value:Number});" },
{ "trigger": "writeFloat\tIDataOutput" , "contents": "writeFloat(${1:value:Number});" },
{ "trigger": "writeInt\tIDataOutput" , "contents": "writeInt(${1:value:int});" },
{ "trigger": "writeMultiByte\tIDataOutput" , "contents": "writeMultiByte(${1:value:String},${2:charSet:String});" },
{ "trigger": "writeObject\tIDataOutput" , "contents": "writeObject(${1:object:*});" },
{ "trigger": "writeShort\tIDataOutput" , "contents": "writeShort(${1:value:int});" },
{ "trigger": "writeUTFBytes\tIDataOutput" , "contents": "writeUTFBytes(${1:value:String});" },
{ "trigger": "writeUTF\tIDataOutput" , "contents": "writeUTF(${1:value:String});" },
{ "trigger": "writeUnsignedInt\tIDataOutput" , "contents": "writeUnsignedInt(${1:value:uint});" },
"IExternalizable",
{ "trigger": "readExternal\tIExternalizable" , "contents": "readExternal(${1:input:IDataInput});" },
{ "trigger": "writeExternal\tIExternalizable" , "contents": "writeExternal(${1:output:IDataOutput});" },
"Proxy",
{ "trigger": "callProperty\tProxy" , "contents": "callProperty(${1:name:*},${2:rest:restParam});" },
{ "trigger": "deleteProperty\tProxy" , "contents": "deleteProperty(${1:name:*});" },
{ "trigger": "getDescendants\tProxy" , "contents": "getDescendants(${1:name:*});" },
{ "trigger": "getProperty\tProxy" , "contents": "getProperty(${1:name:*});" },
{ "trigger": "hasProperty\tProxy" , "contents": "hasProperty(${1:name:*});" },
{ "trigger": "isAttribute\tProxy" , "contents": "isAttribute(${1:name:*});" },
{ "trigger": "nextNameIndex\tProxy" , "contents": "nextNameIndex(${1:index:int});" },
{ "trigger": "nextName\tProxy" , "contents": "nextName(${1:index:int});" },
{ "trigger": "nextValue\tProxy" , "contents": "nextValue(${1:index:int});" },
{ "trigger": "setProperty\tProxy" , "contents": "setProperty(${1:name:*},${2:value:*});" },
"Timer",
{ "trigger": "Timer\tTimer" , "contents": "Timer(${1:delay:Number});" },
{ "trigger": "reset\tTimer" , "contents": "reset();" },
{ "trigger": "start\tTimer" , "contents": "start();" },
{ "trigger": "stop\tTimer" , "contents": "stop();" },
"XMLDocument",
{ "trigger": "XMLDocument\tXMLDocument" , "contents": "XMLDocument();" },
{ "trigger": "createElement\tXMLDocument" , "contents": "createElement(${1:name:String});" },
{ "trigger": "createTextNode\tXMLDocument" , "contents": "createTextNode(${1:text:String});" },
{ "trigger": "parseXML\tXMLDocument" , "contents": "parseXML(${1:source:String});" },
{ "trigger": "toString\tXMLDocument" , "contents": "toString();" },
"XMLNode",
{ "trigger": "XMLNode\tXMLNode" , "contents": "XMLNode(${1:type:uint},${2:value:String});" },
{ "trigger": "appendChild\tXMLNode" , "contents": "appendChild(${1:node:XMLNode});" },
{ "trigger": "cloneNode\tXMLNode" , "contents": "cloneNode(${1:deep:Boolean});" },
{ "trigger": "getNamespaceForPrefix\tXMLNode" , "contents": "getNamespaceForPrefix(${1:prefix:String});" },
{ "trigger": "getPrefixForNamespace\tXMLNode" , "contents": "getPrefixForNamespace(${1:ns:String});" },
{ "trigger": "hasChildNodes\tXMLNode" , "contents": "hasChildNodes();" },
{ "trigger": "insertBefore\tXMLNode" , "contents": "insertBefore(${1:node:XMLNode},${2:before:XMLNode});" },
{ "trigger": "removeNode\tXMLNode" , "contents": "removeNode();" },
{ "trigger": "toString\tXMLNode" , "contents": "toString();" },
"XMLNodeType",
"FlowComposerBase",
{ "trigger": "FlowComposerBase\tFlowComposerBase" , "contents": "FlowComposerBase();" },
{ "trigger": "damage\tFlowComposerBase" , "contents": "damage(${1:startPosition:int},${2:damageLength:int},${3:damageType:String});" },
{ "trigger": "findLineAtPosition\tFlowComposerBase" , "contents": "findLineAtPosition(${1:absolutePosition:int});" },
{ "trigger": "findLineIndexAtPosition\tFlowComposerBase" , "contents": "findLineIndexAtPosition(${1:absolutePosition:int});" },
{ "trigger": "getLineAt\tFlowComposerBase" , "contents": "getLineAt(${1:index:int});" },
{ "trigger": "isDamaged\tFlowComposerBase" , "contents": "isDamaged(${1:absolutePosition:int});" },
{ "trigger": "updateLengths\tFlowComposerBase" , "contents": "updateLengths(${1:startPosition:int},${2:deltaLength:int});" },
"FlowDamageType",
"IFlowComposer",
{ "trigger": "addControllerAt\tIFlowComposer" , "contents": "addControllerAt(${1:controller:ContainerController},${2:index:int});" },
{ "trigger": "addController\tIFlowComposer" , "contents": "addController(${1:controller:ContainerController});" },
{ "trigger": "composeToController\tIFlowComposer" , "contents": "composeToController();" },
{ "trigger": "composeToPosition\tIFlowComposer" , "contents": "composeToPosition();" },
{ "trigger": "compose\tIFlowComposer" , "contents": "compose();" },
{ "trigger": "damage\tIFlowComposer" , "contents": "damage(${1:startPosition:int},${2:damageLength:int},${3:damageType:String});" },
{ "trigger": "findControllerIndexAtPosition\tIFlowComposer" , "contents": "findControllerIndexAtPosition(${1:absolutePosition:int});" },
{ "trigger": "findLineAtPosition\tIFlowComposer" , "contents": "findLineAtPosition(${1:absolutePosition:int});" },
{ "trigger": "findLineIndexAtPosition\tIFlowComposer" , "contents": "findLineIndexAtPosition(${1:absolutePosition:int});" },
{ "trigger": "getControllerAt\tIFlowComposer" , "contents": "getControllerAt(${1:index:int});" },
{ "trigger": "getControllerIndex\tIFlowComposer" , "contents": "getControllerIndex(${1:controller:ContainerController});" },
{ "trigger": "getLineAt\tIFlowComposer" , "contents": "getLineAt(${1:index:int});" },
{ "trigger": "interactionManagerChanged\tIFlowComposer" , "contents": "interactionManagerChanged(${1:newInteractionManager:ISelectionManager});" },
{ "trigger": "isDamaged\tIFlowComposer" , "contents": "isDamaged(${1:absolutePosition:int});" },
{ "trigger": "removeAllControllers\tIFlowComposer" , "contents": "removeAllControllers();" },
{ "trigger": "removeControllerAt\tIFlowComposer" , "contents": "removeControllerAt(${1:index:int});" },
{ "trigger": "removeController\tIFlowComposer" , "contents": "removeController(${1:controller:ContainerController});" },
{ "trigger": "setFocus\tIFlowComposer" , "contents": "setFocus(${1:absolutePosition:int});" },
{ "trigger": "setRootElement\tIFlowComposer" , "contents": "setRootElement(${1:newRootElement:ContainerFormattedElement});" },
{ "trigger": "updateAllControllers\tIFlowComposer" , "contents": "updateAllControllers();" },
{ "trigger": "updateLengths\tIFlowComposer" , "contents": "updateLengths(${1:startPosition:int},${2:deltaLength:int});" },
{ "trigger": "updateToController\tIFlowComposer" , "contents": "updateToController();" },
"ISWFContext",
{ "trigger": "callInContext\tISWFContext" , "contents": "callInContext(${1:fn:Function},${2:thisArg:Object},${3:argArray:Array});" },
"ITextLineCreator",
{ "trigger": "createTextLine\tITextLineCreator" , "contents": "createTextLine(${1:textBlock:TextBlock});" },
{ "trigger": "recreateTextLine\tITextLineCreator" , "contents": "recreateTextLine(${1:textBlock:TextBlock},${2:textLine:TextLine});" },
"IVerticalJustificationLine",
"StandardFlowComposer",
{ "trigger": "StandardFlowComposer\tStandardFlowComposer" , "contents": "StandardFlowComposer();" },
{ "trigger": "addControllerAt\tStandardFlowComposer" , "contents": "addControllerAt(${1:controller:ContainerController},${2:index:int});" },
{ "trigger": "addController\tStandardFlowComposer" , "contents": "addController(${1:controller:ContainerController});" },
{ "trigger": "composeToController\tStandardFlowComposer" , "contents": "composeToController();" },
{ "trigger": "composeToPosition\tStandardFlowComposer" , "contents": "composeToPosition();" },
{ "trigger": "compose\tStandardFlowComposer" , "contents": "compose();" },
{ "trigger": "findControllerIndexAtPosition\tStandardFlowComposer" , "contents": "findControllerIndexAtPosition(${1:absolutePosition:int});" },
{ "trigger": "getAbsoluteStart\tStandardFlowComposer" , "contents": "getAbsoluteStart(${1:controller:ContainerController});" },
{ "trigger": "getControllerAt\tStandardFlowComposer" , "contents": "getControllerAt(${1:index:int});" },
{ "trigger": "getControllerIndex\tStandardFlowComposer" , "contents": "getControllerIndex(${1:controller:ContainerController});" },
{ "trigger": "interactionManagerChanged\tStandardFlowComposer" , "contents": "interactionManagerChanged(${1:newInteractionManager:ISelectionManager});" },
{ "trigger": "preCompose\tStandardFlowComposer" , "contents": "preCompose();" },
{ "trigger": "removeAllControllers\tStandardFlowComposer" , "contents": "removeAllControllers();" },
{ "trigger": "removeControllerAt\tStandardFlowComposer" , "contents": "removeControllerAt(${1:index:int});" },
{ "trigger": "removeController\tStandardFlowComposer" , "contents": "removeController(${1:controller:ContainerController});" },
{ "trigger": "setFocus\tStandardFlowComposer" , "contents": "setFocus(${1:absolutePosition:int});" },
{ "trigger": "setRootElement\tStandardFlowComposer" , "contents": "setRootElement(${1:newRootElement:ContainerFormattedElement});" },
{ "trigger": "updateAllControllers\tStandardFlowComposer" , "contents": "updateAllControllers();" },
{ "trigger": "updateToController\tStandardFlowComposer" , "contents": "updateToController();" },
"TextFlowLine",
{ "trigger": "TextFlowLine\tTextFlowLine" , "contents": "TextFlowLine(${1:textLine:TextLine},${2:paragraph:ParagraphElement});" },
{ "trigger": "getBounds\tTextFlowLine" , "contents": "getBounds();" },
{ "trigger": "getTextLine\tTextFlowLine" , "contents": "getTextLine();" },
"TextFlowLineLocation",
"TextLineRecycler",
{ "trigger": "addLineForReuse\tTextLineRecycler" , "contents": "addLineForReuse(${1:textLine:TextLine});" },
{ "trigger": "getLineForReuse\tTextLineRecycler" , "contents": "getLineForReuse();" },
"ColumnState",
{ "trigger": "ColumnState\tColumnState" , "contents": "ColumnState(${1:blockProgression:String},${2:columnDirection:String},${3:controller:ContainerController},${4:compositionWidth:Number},${5:compositionHeight:Number});" },
{ "trigger": "getColumnAt\tColumnState" , "contents": "getColumnAt(${1:index:int});" },
"ContainerController",
{ "trigger": "ContainerController\tContainerController" , "contents": "ContainerController(${1:container:Sprite});" },
{ "trigger": "activateHandler\tContainerController" , "contents": "activateHandler(${1:event:Event});" },
{ "trigger": "addBackgroundShape\tContainerController" , "contents": "addBackgroundShape(${1:shape:Shape});" },
{ "trigger": "addSelectionContainer\tContainerController" , "contents": "addSelectionContainer(${1:selectionContainer:DisplayObjectContainer});" },
{ "trigger": "addTextLine\tContainerController" , "contents": "addTextLine(${1:textLine:TextLine},${2:index:int});" },
{ "trigger": "autoScrollIfNecessary\tContainerController" , "contents": "autoScrollIfNecessary(${1:mouseX:int},${2:mouseY:int});" },
{ "trigger": "beginMouseCapture\tContainerController" , "contents": "beginMouseCapture();" },
{ "trigger": "clearStyle\tContainerController" , "contents": "clearStyle(${1:styleProp:String});" },
{ "trigger": "createContextMenu\tContainerController" , "contents": "createContextMenu();" },
{ "trigger": "deactivateHandler\tContainerController" , "contents": "deactivateHandler(${1:event:Event});" },
{ "trigger": "editHandler\tContainerController" , "contents": "editHandler(${1:event:Event});" },
{ "trigger": "endMouseCapture\tContainerController" , "contents": "endMouseCapture();" },
{ "trigger": "focusChangeHandler\tContainerController" , "contents": "focusChangeHandler(${1:event:FocusEvent});" },
{ "trigger": "focusInHandler\tContainerController" , "contents": "focusInHandler(${1:event:FocusEvent});" },
{ "trigger": "focusOutHandler\tContainerController" , "contents": "focusOutHandler(${1:event:FocusEvent});" },
{ "trigger": "getContentBounds\tContainerController" , "contents": "getContentBounds();" },
{ "trigger": "getFirstTextLineChildIndex\tContainerController" , "contents": "getFirstTextLineChildIndex();" },
{ "trigger": "getScrollDelta\tContainerController" , "contents": "getScrollDelta(${1:numLines:int});" },
{ "trigger": "getStyle\tContainerController" , "contents": "getStyle(${1:styleProp:String});" },
{ "trigger": "imeStartCompositionHandler\tContainerController" , "contents": "imeStartCompositionHandler(${1:event:IMEEvent});" },
{ "trigger": "invalidateContents\tContainerController" , "contents": "invalidateContents();" },
{ "trigger": "isDamaged\tContainerController" , "contents": "isDamaged();" },
{ "trigger": "keyDownHandler\tContainerController" , "contents": "keyDownHandler(${1:event:KeyboardEvent});" },
{ "trigger": "keyFocusChangeHandler\tContainerController" , "contents": "keyFocusChangeHandler(${1:event:FocusEvent});" },
{ "trigger": "keyUpHandler\tContainerController" , "contents": "keyUpHandler(${1:event:KeyboardEvent});" },
{ "trigger": "menuSelectHandler\tContainerController" , "contents": "menuSelectHandler(${1:event:ContextMenuEvent});" },
{ "trigger": "mouseDoubleClickHandler\tContainerController" , "contents": "mouseDoubleClickHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseDownHandler\tContainerController" , "contents": "mouseDownHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseMoveHandler\tContainerController" , "contents": "mouseMoveHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseMoveSomewhere\tContainerController" , "contents": "mouseMoveSomewhere(${1:event:Event});" },
{ "trigger": "mouseOutHandler\tContainerController" , "contents": "mouseOutHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseOverHandler\tContainerController" , "contents": "mouseOverHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseUpHandler\tContainerController" , "contents": "mouseUpHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseUpSomewhere\tContainerController" , "contents": "mouseUpSomewhere(${1:event:Event});" },
{ "trigger": "mouseWheelHandler\tContainerController" , "contents": "mouseWheelHandler(${1:event:MouseEvent});" },
{ "trigger": "removeSelectionContainer\tContainerController" , "contents": "removeSelectionContainer(${1:selectionContainer:DisplayObjectContainer});" },
{ "trigger": "removeTextLine\tContainerController" , "contents": "removeTextLine(${1:textLine:TextLine});" },
{ "trigger": "scrollToRange\tContainerController" , "contents": "scrollToRange(${1:activePosition:int},${2:anchorPosition:int});" },
{ "trigger": "selectRange\tContainerController" , "contents": "selectRange(${1:anchorIndex:int},${2:activeIndex:int});" },
{ "trigger": "setCompositionSize\tContainerController" , "contents": "setCompositionSize(${1:w:Number},${2:h:Number});" },
{ "trigger": "setStyle\tContainerController" , "contents": "setStyle(${1:styleProp:String},${2:newValue:*});" },
{ "trigger": "textInputHandler\tContainerController" , "contents": "textInputHandler(${1:event:TextEvent});" },
{ "trigger": "updateVisibleRectangle\tContainerController" , "contents": "updateVisibleRectangle();" },
"ISandboxSupport",
{ "trigger": "beginMouseCapture\tISandboxSupport" , "contents": "beginMouseCapture();" },
{ "trigger": "endMouseCapture\tISandboxSupport" , "contents": "endMouseCapture();" },
{ "trigger": "mouseMoveSomewhere\tISandboxSupport" , "contents": "mouseMoveSomewhere(${1:event:Event});" },
{ "trigger": "mouseUpSomewhere\tISandboxSupport" , "contents": "mouseUpSomewhere(${1:event:Event});" },
"TextContainerManager",
{ "trigger": "TextContainerManager\tTextContainerManager" , "contents": "TextContainerManager(${1:container:Sprite});" },
{ "trigger": "activateHandler\tTextContainerManager" , "contents": "activateHandler(${1:event:Event});" },
{ "trigger": "beginInteraction\tTextContainerManager" , "contents": "beginInteraction();" },
{ "trigger": "beginMouseCapture\tTextContainerManager" , "contents": "beginMouseCapture();" },
{ "trigger": "compose\tTextContainerManager" , "contents": "compose();" },
{ "trigger": "createContextMenu\tTextContainerManager" , "contents": "createContextMenu();" },
{ "trigger": "createEditManager\tTextContainerManager" , "contents": "createEditManager(${1:undoManager:IUndoManager});" },
{ "trigger": "createSelectionManager\tTextContainerManager" , "contents": "createSelectionManager();" },
{ "trigger": "deactivateHandler\tTextContainerManager" , "contents": "deactivateHandler(${1:event:Event});" },
{ "trigger": "drawBackgroundAndSetScrollRect\tTextContainerManager" , "contents": "drawBackgroundAndSetScrollRect(${1:scrollX:Number},${2:scrollY:Number});" },
{ "trigger": "editHandler\tTextContainerManager" , "contents": "editHandler(${1:event:Event});" },
{ "trigger": "endInteraction\tTextContainerManager" , "contents": "endInteraction();" },
{ "trigger": "endMouseCapture\tTextContainerManager" , "contents": "endMouseCapture();" },
{ "trigger": "focusChangeHandler\tTextContainerManager" , "contents": "focusChangeHandler(${1:event:FocusEvent});" },
{ "trigger": "focusInHandler\tTextContainerManager" , "contents": "focusInHandler(${1:event:FocusEvent});" },
{ "trigger": "focusOutHandler\tTextContainerManager" , "contents": "focusOutHandler(${1:event:FocusEvent});" },
{ "trigger": "getContentBounds\tTextContainerManager" , "contents": "getContentBounds();" },
{ "trigger": "getFocusedSelectionFormat\tTextContainerManager" , "contents": "getFocusedSelectionFormat();" },
{ "trigger": "getInactiveSelectionFormat\tTextContainerManager" , "contents": "getInactiveSelectionFormat();" },
{ "trigger": "getLineAt\tTextContainerManager" , "contents": "getLineAt(${1:index:int});" },
{ "trigger": "getScrollDelta\tTextContainerManager" , "contents": "getScrollDelta(${1:numLines:int});" },
{ "trigger": "getTextFlow\tTextContainerManager" , "contents": "getTextFlow();" },
{ "trigger": "getText\tTextContainerManager" , "contents": "getText();" },
{ "trigger": "getUndoManager\tTextContainerManager" , "contents": "getUndoManager();" },
{ "trigger": "getUnfocusedSelectionFormat\tTextContainerManager" , "contents": "getUnfocusedSelectionFormat();" },
{ "trigger": "imeStartCompositionHandler\tTextContainerManager" , "contents": "imeStartCompositionHandler(${1:event:IMEEvent});" },
{ "trigger": "invalidateSelectionFormats\tTextContainerManager" , "contents": "invalidateSelectionFormats();" },
{ "trigger": "invalidateUndoManager\tTextContainerManager" , "contents": "invalidateUndoManager();" },
{ "trigger": "isDamaged\tTextContainerManager" , "contents": "isDamaged();" },
{ "trigger": "keyDownHandler\tTextContainerManager" , "contents": "keyDownHandler(${1:event:KeyboardEvent});" },
{ "trigger": "keyFocusChangeHandler\tTextContainerManager" , "contents": "keyFocusChangeHandler(${1:event:FocusEvent});" },
{ "trigger": "keyUpHandler\tTextContainerManager" , "contents": "keyUpHandler(${1:event:KeyboardEvent});" },
{ "trigger": "menuSelectHandler\tTextContainerManager" , "contents": "menuSelectHandler(${1:event:ContextMenuEvent});" },
{ "trigger": "mouseDoubleClickHandler\tTextContainerManager" , "contents": "mouseDoubleClickHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseDownHandler\tTextContainerManager" , "contents": "mouseDownHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseMoveHandler\tTextContainerManager" , "contents": "mouseMoveHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseMoveSomewhere\tTextContainerManager" , "contents": "mouseMoveSomewhere(${1:e:Event});" },
{ "trigger": "mouseOutHandler\tTextContainerManager" , "contents": "mouseOutHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseOverHandler\tTextContainerManager" , "contents": "mouseOverHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseUpHandler\tTextContainerManager" , "contents": "mouseUpHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseUpSomewhere\tTextContainerManager" , "contents": "mouseUpSomewhere(${1:e:Event});" },
{ "trigger": "mouseWheelHandler\tTextContainerManager" , "contents": "mouseWheelHandler(${1:event:MouseEvent});" },
{ "trigger": "scrollToRange\tTextContainerManager" , "contents": "scrollToRange(${1:activePosition:int},${2:anchorPosition:int});" },
{ "trigger": "setTextFlow\tTextContainerManager" , "contents": "setTextFlow(${1:textFlow:TextFlow});" },
{ "trigger": "setText\tTextContainerManager" , "contents": "setText(${1:text:String});" },
{ "trigger": "textInputHandler\tTextContainerManager" , "contents": "textInputHandler(${1:event:TextEvent});" },
{ "trigger": "updateContainer\tTextContainerManager" , "contents": "updateContainer();" },
"ConversionType",
"ITextExporter",
{ "trigger": "export\tITextExporter" , "contents": "export(${1:source:TextFlow},${2:conversionType:String});" },
"ITextImporter",
{ "trigger": "importToFlow\tITextImporter" , "contents": "importToFlow(${1:source:Object});" },
"PlainTextExporter",
{ "trigger": "PlainTextExporter\tPlainTextExporter" , "contents": "PlainTextExporter();" },
{ "trigger": "export\tPlainTextExporter" , "contents": "export(${1:source:TextFlow},${2:conversionType:String});" },
"TextConverter",
{ "trigger": "export\tTextConverter" , "contents": "export(${1:source:TextFlow},${2:format:String},${3:conversionType:String});" },
{ "trigger": "getExporter\tTextConverter" , "contents": "getExporter(${1:format:String});" },
{ "trigger": "getImporter\tTextConverter" , "contents": "getImporter(${1:format:String});" },
{ "trigger": "importToFlow\tTextConverter" , "contents": "importToFlow(${1:source:Object},${2:format:String});" },
"EditingMode",
"EditManager",
{ "trigger": "EditManager\tEditManager" , "contents": "EditManager();" },
{ "trigger": "applyContainerFormat\tEditManager" , "contents": "applyContainerFormat(${1:format:ITextLayoutFormat});" },
{ "trigger": "applyFormatToElement\tEditManager" , "contents": "applyFormatToElement(${1:targetElement:FlowElement},${2:format:ITextLayoutFormat});" },
{ "trigger": "applyFormat\tEditManager" , "contents": "applyFormat(${1:leafFormat:ITextLayoutFormat},${2:paragraphFormat:ITextLayoutFormat},${3:containerFormat:ITextLayoutFormat});" },
{ "trigger": "applyLeafFormat\tEditManager" , "contents": "applyLeafFormat(${1:format:ITextLayoutFormat});" },
{ "trigger": "applyLink\tEditManager" , "contents": "applyLink(${1:href:String});" },
{ "trigger": "applyParagraphFormat\tEditManager" , "contents": "applyParagraphFormat(${1:format:ITextLayoutFormat});" },
{ "trigger": "applyTCY\tEditManager" , "contents": "applyTCY(${1:tcyOn:Boolean});" },
{ "trigger": "beginCompositeOperation\tEditManager" , "contents": "beginCompositeOperation();" },
{ "trigger": "changeElementID\tEditManager" , "contents": "changeElementID(${1:newID:String},${2:targetElement:FlowElement});" },
{ "trigger": "changeStyleName\tEditManager" , "contents": "changeStyleName(${1:newName:String},${2:targetElement:FlowElement});" },
{ "trigger": "clearFormatOnElement\tEditManager" , "contents": "clearFormatOnElement(${1:targetElement:FlowElement},${2:format:ITextLayoutFormat});" },
{ "trigger": "clearFormat\tEditManager" , "contents": "clearFormat(${1:leafFormat:ITextLayoutFormat},${2:paragraphFormat:ITextLayoutFormat},${3:containerFormat:ITextLayoutFormat});" },
{ "trigger": "cutTextScrap\tEditManager" , "contents": "cutTextScrap();" },
{ "trigger": "deleteNextCharacter\tEditManager" , "contents": "deleteNextCharacter();" },
{ "trigger": "deleteNextWord\tEditManager" , "contents": "deleteNextWord();" },
{ "trigger": "deletePreviousCharacter\tEditManager" , "contents": "deletePreviousCharacter();" },
{ "trigger": "deletePreviousWord\tEditManager" , "contents": "deletePreviousWord();" },
{ "trigger": "deleteText\tEditManager" , "contents": "deleteText();" },
{ "trigger": "doOperation\tEditManager" , "contents": "doOperation(${1:operation:FlowOperation});" },
{ "trigger": "editHandler\tEditManager" , "contents": "editHandler(${1:event:Event});" },
{ "trigger": "endCompositeOperation\tEditManager" , "contents": "endCompositeOperation();" },
{ "trigger": "insertInlineGraphic\tEditManager" , "contents": "insertInlineGraphic(${1:source:Object},${2:width:Object},${3:height:Object});" },
{ "trigger": "insertText\tEditManager" , "contents": "insertText(${1:text:String});" },
{ "trigger": "modifyInlineGraphic\tEditManager" , "contents": "modifyInlineGraphic(${1:source:Object},${2:width:Object},${3:height:Object});" },
{ "trigger": "overwriteText\tEditManager" , "contents": "overwriteText(${1:text:String});" },
{ "trigger": "pasteTextScrap\tEditManager" , "contents": "pasteTextScrap(${1:scrapToPaste:TextScrap});" },
{ "trigger": "redo\tEditManager" , "contents": "redo();" },
{ "trigger": "splitParagraph\tEditManager" , "contents": "splitParagraph();" },
{ "trigger": "undo\tEditManager" , "contents": "undo();" },
{ "trigger": "updateAllControllers\tEditManager" , "contents": "updateAllControllers();" },
"ElementRange",
{ "trigger": "createElementRange\tElementRange" , "contents": "createElementRange(${1:textFlow:TextFlow},${2:absoluteStart:int},${3:absoluteEnd:int});" },
"IEditManager",
{ "trigger": "applyContainerFormat\tIEditManager" , "contents": "applyContainerFormat(${1:format:ITextLayoutFormat});" },
{ "trigger": "applyFormatToElement\tIEditManager" , "contents": "applyFormatToElement(${1:targetElement:FlowElement},${2:format:ITextLayoutFormat});" },
{ "trigger": "applyFormat\tIEditManager" , "contents": "applyFormat(${1:leafFormat:ITextLayoutFormat},${2:paragraphFormat:ITextLayoutFormat},${3:containerFormat:ITextLayoutFormat});" },
{ "trigger": "applyLeafFormat\tIEditManager" , "contents": "applyLeafFormat(${1:format:ITextLayoutFormat});" },
{ "trigger": "applyLink\tIEditManager" , "contents": "applyLink(${1:href:String});" },
{ "trigger": "applyParagraphFormat\tIEditManager" , "contents": "applyParagraphFormat(${1:format:ITextLayoutFormat});" },
{ "trigger": "applyTCY\tIEditManager" , "contents": "applyTCY(${1:tcyOn:Boolean});" },
{ "trigger": "beginCompositeOperation\tIEditManager" , "contents": "beginCompositeOperation();" },
{ "trigger": "changeElementID\tIEditManager" , "contents": "changeElementID(${1:newID:String},${2:targetElement:FlowElement});" },
{ "trigger": "changeStyleName\tIEditManager" , "contents": "changeStyleName(${1:newName:String},${2:targetElement:FlowElement});" },
{ "trigger": "clearFormatOnElement\tIEditManager" , "contents": "clearFormatOnElement(${1:targetElement:FlowElement},${2:format:ITextLayoutFormat});" },
{ "trigger": "clearFormat\tIEditManager" , "contents": "clearFormat(${1:leafFormat:ITextLayoutFormat},${2:paragraphFormat:ITextLayoutFormat},${3:containerFormat:ITextLayoutFormat});" },
{ "trigger": "cutTextScrap\tIEditManager" , "contents": "cutTextScrap();" },
{ "trigger": "deleteNextCharacter\tIEditManager" , "contents": "deleteNextCharacter();" },
{ "trigger": "deleteNextWord\tIEditManager" , "contents": "deleteNextWord();" },
{ "trigger": "deletePreviousCharacter\tIEditManager" , "contents": "deletePreviousCharacter();" },
{ "trigger": "deletePreviousWord\tIEditManager" , "contents": "deletePreviousWord();" },
{ "trigger": "deleteText\tIEditManager" , "contents": "deleteText();" },
{ "trigger": "doOperation\tIEditManager" , "contents": "doOperation(${1:operation:FlowOperation});" },
{ "trigger": "endCompositeOperation\tIEditManager" , "contents": "endCompositeOperation();" },
{ "trigger": "insertInlineGraphic\tIEditManager" , "contents": "insertInlineGraphic(${1:source:Object},${2:width:Object},${3:height:Object});" },
{ "trigger": "insertText\tIEditManager" , "contents": "insertText(${1:text:String});" },
{ "trigger": "modifyInlineGraphic\tIEditManager" , "contents": "modifyInlineGraphic(${1:source:Object},${2:width:Object},${3:height:Object});" },
{ "trigger": "overwriteText\tIEditManager" , "contents": "overwriteText(${1:text:String});" },
{ "trigger": "pasteTextScrap\tIEditManager" , "contents": "pasteTextScrap(${1:scrapToPaste:TextScrap});" },
{ "trigger": "redo\tIEditManager" , "contents": "redo();" },
{ "trigger": "splitParagraph\tIEditManager" , "contents": "splitParagraph();" },
{ "trigger": "undo\tIEditManager" , "contents": "undo();" },
"IInteractionEventHandler",
{ "trigger": "activateHandler\tIInteractionEventHandler" , "contents": "activateHandler(${1:event:Event});" },
{ "trigger": "deactivateHandler\tIInteractionEventHandler" , "contents": "deactivateHandler(${1:event:Event});" },
{ "trigger": "editHandler\tIInteractionEventHandler" , "contents": "editHandler(${1:event:Event});" },
{ "trigger": "focusChangeHandler\tIInteractionEventHandler" , "contents": "focusChangeHandler(${1:event:FocusEvent});" },
{ "trigger": "focusInHandler\tIInteractionEventHandler" , "contents": "focusInHandler(${1:event:FocusEvent});" },
{ "trigger": "focusOutHandler\tIInteractionEventHandler" , "contents": "focusOutHandler(${1:event:FocusEvent});" },
{ "trigger": "imeStartCompositionHandler\tIInteractionEventHandler" , "contents": "imeStartCompositionHandler(${1:event:IMEEvent});" },
{ "trigger": "keyDownHandler\tIInteractionEventHandler" , "contents": "keyDownHandler(${1:event:KeyboardEvent});" },
{ "trigger": "keyFocusChangeHandler\tIInteractionEventHandler" , "contents": "keyFocusChangeHandler(${1:event:FocusEvent});" },
{ "trigger": "keyUpHandler\tIInteractionEventHandler" , "contents": "keyUpHandler(${1:event:KeyboardEvent});" },
{ "trigger": "menuSelectHandler\tIInteractionEventHandler" , "contents": "menuSelectHandler(${1:event:ContextMenuEvent});" },
{ "trigger": "mouseDoubleClickHandler\tIInteractionEventHandler" , "contents": "mouseDoubleClickHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseDownHandler\tIInteractionEventHandler" , "contents": "mouseDownHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseMoveHandler\tIInteractionEventHandler" , "contents": "mouseMoveHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseOutHandler\tIInteractionEventHandler" , "contents": "mouseOutHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseOverHandler\tIInteractionEventHandler" , "contents": "mouseOverHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseUpHandler\tIInteractionEventHandler" , "contents": "mouseUpHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseWheelHandler\tIInteractionEventHandler" , "contents": "mouseWheelHandler(${1:event:MouseEvent});" },
{ "trigger": "textInputHandler\tIInteractionEventHandler" , "contents": "textInputHandler(${1:event:TextEvent});" },
"ISelectionManager",
{ "trigger": "flushPendingOperations\tISelectionManager" , "contents": "flushPendingOperations();" },
{ "trigger": "getCommonCharacterFormat\tISelectionManager" , "contents": "getCommonCharacterFormat();" },
{ "trigger": "getCommonContainerFormat\tISelectionManager" , "contents": "getCommonContainerFormat();" },
{ "trigger": "getCommonParagraphFormat\tISelectionManager" , "contents": "getCommonParagraphFormat();" },
{ "trigger": "getSelectionState\tISelectionManager" , "contents": "getSelectionState();" },
{ "trigger": "hasSelection\tISelectionManager" , "contents": "hasSelection();" },
{ "trigger": "isRangeSelection\tISelectionManager" , "contents": "isRangeSelection();" },
{ "trigger": "notifyInsertOrDelete\tISelectionManager" , "contents": "notifyInsertOrDelete(${1:absolutePosition:int},${2:length:int});" },
{ "trigger": "refreshSelection\tISelectionManager" , "contents": "refreshSelection();" },
{ "trigger": "selectAll\tISelectionManager" , "contents": "selectAll();" },
{ "trigger": "selectRange\tISelectionManager" , "contents": "selectRange(${1:anchorPosition:int},${2:activePosition:int});" },
{ "trigger": "setFocus\tISelectionManager" , "contents": "setFocus();" },
{ "trigger": "setSelectionState\tISelectionManager" , "contents": "setSelectionState(${1:state:SelectionState});" },
"SelectionFormat",
{ "trigger": "SelectionFormat\tSelectionFormat" , "contents": "SelectionFormat();" },
{ "trigger": "equals\tSelectionFormat" , "contents": "equals(${1:selectionFormat:SelectionFormat});" },
"SelectionManager",
{ "trigger": "SelectionManager\tSelectionManager" , "contents": "SelectionManager();" },
{ "trigger": "activateHandler\tSelectionManager" , "contents": "activateHandler(${1:event:Event});" },
{ "trigger": "deactivateHandler\tSelectionManager" , "contents": "deactivateHandler(${1:event:Event});" },
{ "trigger": "doOperation\tSelectionManager" , "contents": "doOperation(${1:op:FlowOperation});" },
{ "trigger": "editHandler\tSelectionManager" , "contents": "editHandler(${1:event:Event});" },
{ "trigger": "flushPendingOperations\tSelectionManager" , "contents": "flushPendingOperations();" },
{ "trigger": "focusChangeHandler\tSelectionManager" , "contents": "focusChangeHandler(${1:event:FocusEvent});" },
{ "trigger": "focusInHandler\tSelectionManager" , "contents": "focusInHandler(${1:event:FocusEvent});" },
{ "trigger": "focusOutHandler\tSelectionManager" , "contents": "focusOutHandler(${1:event:FocusEvent});" },
{ "trigger": "getCommonCharacterFormat\tSelectionManager" , "contents": "getCommonCharacterFormat();" },
{ "trigger": "getCommonContainerFormat\tSelectionManager" , "contents": "getCommonContainerFormat();" },
{ "trigger": "getCommonParagraphFormat\tSelectionManager" , "contents": "getCommonParagraphFormat();" },
{ "trigger": "getSelectionState\tSelectionManager" , "contents": "getSelectionState();" },
{ "trigger": "hasSelection\tSelectionManager" , "contents": "hasSelection();" },
{ "trigger": "imeStartCompositionHandler\tSelectionManager" , "contents": "imeStartCompositionHandler(${1:event:IMEEvent});" },
{ "trigger": "isRangeSelection\tSelectionManager" , "contents": "isRangeSelection();" },
{ "trigger": "keyDownHandler\tSelectionManager" , "contents": "keyDownHandler(${1:event:KeyboardEvent});" },
{ "trigger": "keyFocusChangeHandler\tSelectionManager" , "contents": "keyFocusChangeHandler(${1:event:FocusEvent});" },
{ "trigger": "keyUpHandler\tSelectionManager" , "contents": "keyUpHandler(${1:event:KeyboardEvent});" },
{ "trigger": "menuSelectHandler\tSelectionManager" , "contents": "menuSelectHandler(${1:event:ContextMenuEvent});" },
{ "trigger": "mouseDoubleClickHandler\tSelectionManager" , "contents": "mouseDoubleClickHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseDownHandler\tSelectionManager" , "contents": "mouseDownHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseMoveHandler\tSelectionManager" , "contents": "mouseMoveHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseOutHandler\tSelectionManager" , "contents": "mouseOutHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseOverHandler\tSelectionManager" , "contents": "mouseOverHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseUpHandler\tSelectionManager" , "contents": "mouseUpHandler(${1:event:MouseEvent});" },
{ "trigger": "mouseWheelHandler\tSelectionManager" , "contents": "mouseWheelHandler(${1:event:MouseEvent});" },
{ "trigger": "notifyInsertOrDelete\tSelectionManager" , "contents": "notifyInsertOrDelete(${1:absolutePosition:int},${2:length:int});" },
{ "trigger": "refreshSelection\tSelectionManager" , "contents": "refreshSelection();" },
{ "trigger": "selectAll\tSelectionManager" , "contents": "selectAll();" },
{ "trigger": "selectRange\tSelectionManager" , "contents": "selectRange(${1:anchorPosition:int},${2:activePosition:int});" },
{ "trigger": "setFocus\tSelectionManager" , "contents": "setFocus();" },
{ "trigger": "setSelectionState\tSelectionManager" , "contents": "setSelectionState(${1:state:SelectionState});" },
{ "trigger": "textInputHandler\tSelectionManager" , "contents": "textInputHandler(${1:event:TextEvent});" },
"SelectionState",
{ "trigger": "SelectionState\tSelectionState" , "contents": "SelectionState(${1:root:TextFlow},${2:anchorPosition:int},${3:activePosition:int});" },
{ "trigger": "updateRange\tSelectionState" , "contents": "updateRange(${1:newAnchorPosition:int},${2:newActivePosition:int});" },
"TextClipboard",
{ "trigger": "getContents\tTextClipboard" , "contents": "getContents();" },
{ "trigger": "setContents\tTextClipboard" , "contents": "setContents(${1:scrap:TextScrap});" },
"TextScrap",
{ "trigger": "TextScrap\tTextScrap" , "contents": "TextScrap();" },
{ "trigger": "clone\tTextScrap" , "contents": "clone();" },
{ "trigger": "createTextScrap\tTextScrap" , "contents": "createTextScrap(${1:range:TextRange});" },
"BreakElement",
{ "trigger": "BreakElement\tBreakElement" , "contents": "BreakElement();" },
"Configuration",
{ "trigger": "Configuration\tConfiguration" , "contents": "Configuration();" },
{ "trigger": "clone\tConfiguration" , "contents": "clone();" },
"DivElement",
{ "trigger": "DivElement\tDivElement" , "contents": "DivElement();" },
"FlowElement",
{ "trigger": "FlowElement\tFlowElement" , "contents": "FlowElement();" },
{ "trigger": "clearStyle\tFlowElement" , "contents": "clearStyle(${1:styleProp:String});" },
{ "trigger": "deepCopy\tFlowElement" , "contents": "deepCopy();" },
{ "trigger": "equalUserStyles\tFlowElement" , "contents": "equalUserStyles(${1:otherElement:FlowElement});" },
{ "trigger": "getAbsoluteStart\tFlowElement" , "contents": "getAbsoluteStart();" },
{ "trigger": "getCharAtPosition\tFlowElement" , "contents": "getCharAtPosition(${1:relativePosition:int});" },
{ "trigger": "getCharCodeAtPosition\tFlowElement" , "contents": "getCharCodeAtPosition(${1:relativePosition:int});" },
{ "trigger": "getElementRelativeStart\tFlowElement" , "contents": "getElementRelativeStart(${1:ancestorElement:FlowElement});" },
{ "trigger": "getNextSibling\tFlowElement" , "contents": "getNextSibling();" },
{ "trigger": "getParagraph\tFlowElement" , "contents": "getParagraph();" },
{ "trigger": "getPreviousSibling\tFlowElement" , "contents": "getPreviousSibling();" },
{ "trigger": "getStyle\tFlowElement" , "contents": "getStyle(${1:styleProp:String});" },
{ "trigger": "getTextFlow\tFlowElement" , "contents": "getTextFlow();" },
{ "trigger": "getText\tFlowElement" , "contents": "getText();" },
{ "trigger": "initialized\tFlowElement" , "contents": "initialized(${1:document:Object},${2:id:String});" },
{ "trigger": "setStyle\tFlowElement" , "contents": "setStyle(${1:styleProp:String},${2:newValue:*});" },
{ "trigger": "shallowCopy\tFlowElement" , "contents": "shallowCopy();" },
{ "trigger": "splitAtPosition\tFlowElement" , "contents": "splitAtPosition(${1:relativePosition:int});" },
"FlowGroupElement",
{ "trigger": "FlowGroupElement\tFlowGroupElement" , "contents": "FlowGroupElement();" },
{ "trigger": "addChildAt\tFlowGroupElement" , "contents": "addChildAt(${1:index:uint},${2:child:FlowElement});" },
{ "trigger": "addChild\tFlowGroupElement" , "contents": "addChild(${1:child:FlowElement});" },
{ "trigger": "findChildIndexAtPosition\tFlowGroupElement" , "contents": "findChildIndexAtPosition(${1:relativePosition:int});" },
{ "trigger": "findLeaf\tFlowGroupElement" , "contents": "findLeaf(${1:relativePosition:int});" },
{ "trigger": "getChildAt\tFlowGroupElement" , "contents": "getChildAt(${1:index:int});" },
{ "trigger": "getChildIndex\tFlowGroupElement" , "contents": "getChildIndex(${1:child:FlowElement});" },
{ "trigger": "getFirstLeaf\tFlowGroupElement" , "contents": "getFirstLeaf();" },
{ "trigger": "getLastLeaf\tFlowGroupElement" , "contents": "getLastLeaf();" },
{ "trigger": "getText\tFlowGroupElement" , "contents": "getText();" },
{ "trigger": "removeChildAt\tFlowGroupElement" , "contents": "removeChildAt(${1:index:uint});" },
{ "trigger": "removeChild\tFlowGroupElement" , "contents": "removeChild(${1:child:FlowElement});" },
{ "trigger": "replaceChildren\tFlowGroupElement" , "contents": "replaceChildren(${1:beginChildIndex:int},${2:endChildIndex:int},${3:rest:restParam});" },
{ "trigger": "splitAtIndex\tFlowGroupElement" , "contents": "splitAtIndex(${1:childIndex:int});" },
"FlowLeafElement",
{ "trigger": "FlowLeafElement\tFlowLeafElement" , "contents": "FlowLeafElement();" },
{ "trigger": "getComputedFontMetrics\tFlowLeafElement" , "contents": "getComputedFontMetrics();" },
{ "trigger": "getNextLeaf\tFlowLeafElement" , "contents": "getNextLeaf();" },
{ "trigger": "getPreviousLeaf\tFlowLeafElement" , "contents": "getPreviousLeaf();" },
"GlobalSettings",
"IConfiguration",
"IFormatResolver",
{ "trigger": "getResolverForNewFlow\tIFormatResolver" , "contents": "getResolverForNewFlow(${1:oldFlow:TextFlow},${2:newFlow:TextFlow});" },
{ "trigger": "invalidateAll\tIFormatResolver" , "contents": "invalidateAll(${1:textFlow:TextFlow});" },
{ "trigger": "invalidate\tIFormatResolver" , "contents": "invalidate(${1:target:Object});" },
{ "trigger": "resolveFormat\tIFormatResolver" , "contents": "resolveFormat(${1:target:Object});" },
{ "trigger": "resolveUserFormat\tIFormatResolver" , "contents": "resolveUserFormat(${1:target:Object},${2:userFormat:String});" },
"InlineGraphicElement",
{ "trigger": "InlineGraphicElement\tInlineGraphicElement" , "contents": "InlineGraphicElement();" },
"InlineGraphicElementStatus",
"LinkElement",
{ "trigger": "LinkElement\tLinkElement" , "contents": "LinkElement();" },
{ "trigger": "addEventListener\tLinkElement" , "contents": "addEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "dispatchEvent\tLinkElement" , "contents": "dispatchEvent(${1:event:Event});" },
{ "trigger": "hasEventListener\tLinkElement" , "contents": "hasEventListener(${1:type:String});" },
{ "trigger": "removeEventListener\tLinkElement" , "contents": "removeEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "willTrigger\tLinkElement" , "contents": "willTrigger(${1:type:String});" },
"LinkState",
"OverflowPolicy",
"ParagraphElement",
{ "trigger": "ParagraphElement\tParagraphElement" , "contents": "ParagraphElement();" },
{ "trigger": "findNextAtomBoundary\tParagraphElement" , "contents": "findNextAtomBoundary(${1:relativePosition:int});" },
{ "trigger": "findNextWordBoundary\tParagraphElement" , "contents": "findNextWordBoundary(${1:relativePosition:int});" },
{ "trigger": "findPreviousAtomBoundary\tParagraphElement" , "contents": "findPreviousAtomBoundary(${1:relativePosition:int});" },
{ "trigger": "findPreviousWordBoundary\tParagraphElement" , "contents": "findPreviousWordBoundary(${1:relativePosition:int});" },
{ "trigger": "getNextParagraph\tParagraphElement" , "contents": "getNextParagraph();" },
{ "trigger": "getPreviousParagraph\tParagraphElement" , "contents": "getPreviousParagraph();" },
"SpanElement",
{ "trigger": "SpanElement\tSpanElement" , "contents": "SpanElement();" },
{ "trigger": "replaceText\tSpanElement" , "contents": "replaceText(${1:relativeStartPosition:int},${2:relativeEndPosition:int},${3:textValue:String});" },
"SpecialCharacterElement",
{ "trigger": "SpecialCharacterElement\tSpecialCharacterElement" , "contents": "SpecialCharacterElement();" },
"SubParagraphGroupElement",
{ "trigger": "SubParagraphGroupElement\tSubParagraphGroupElement" , "contents": "SubParagraphGroupElement();" },
"TabElement",
{ "trigger": "TabElement\tTabElement" , "contents": "TabElement();" },
"TCYElement",
{ "trigger": "TCYElement\tTCYElement" , "contents": "TCYElement();" },
"TextFlow",
{ "trigger": "TextFlow\tTextFlow" , "contents": "TextFlow();" },
{ "trigger": "addEventListener\tTextFlow" , "contents": "addEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "dispatchEvent\tTextFlow" , "contents": "dispatchEvent(${1:event:Event});" },
{ "trigger": "getElementByID\tTextFlow" , "contents": "getElementByID(${1:idName:String});" },
{ "trigger": "getElementsByStyleName\tTextFlow" , "contents": "getElementsByStyleName(${1:styleNameValue:String});" },
{ "trigger": "hasEventListener\tTextFlow" , "contents": "hasEventListener(${1:type:String});" },
{ "trigger": "invalidateAllFormats\tTextFlow" , "contents": "invalidateAllFormats();" },
{ "trigger": "removeEventListener\tTextFlow" , "contents": "removeEventListener(${1:type:String},${2:listener:Function});" },
{ "trigger": "willTrigger\tTextFlow" , "contents": "willTrigger(${1:type:String});" },
"TextRange",
{ "trigger": "TextRange\tTextRange" , "contents": "TextRange(${1:root:TextFlow},${2:anchorIndex:int},${3:activeIndex:int});" },
{ "trigger": "updateRange\tTextRange" , "contents": "updateRange(${1:newAnchorPosition:int},${2:newActivePosition:int});" },
"CompositionCompleteEvent",
{ "trigger": "CompositionCompleteEvent\tCompositionCompleteEvent" , "contents": "CompositionCompleteEvent(${1:type:String});" },
"DamageEvent",
{ "trigger": "DamageEvent\tDamageEvent" , "contents": "DamageEvent(${1:type:String});" },
"FlowElementMouseEvent",
{ "trigger": "FlowElementMouseEvent\tFlowElementMouseEvent" , "contents": "FlowElementMouseEvent(${1:type:String});" },
"FlowOperationEvent",
{ "trigger": "FlowOperationEvent\tFlowOperationEvent" , "contents": "FlowOperationEvent(${1:type:String});" },
"SelectionEvent",
{ "trigger": "SelectionEvent\tSelectionEvent" , "contents": "SelectionEvent(${1:type:String});" },
"StatusChangeEvent",
{ "trigger": "StatusChangeEvent\tStatusChangeEvent" , "contents": "StatusChangeEvent(${1:type:String});" },
"TextLayoutEvent",
{ "trigger": "TextLayoutEvent\tTextLayoutEvent" , "contents": "TextLayoutEvent(${1:type:String});" },
"UpdateCompleteEvent",
{ "trigger": "UpdateCompleteEvent\tUpdateCompleteEvent" , "contents": "UpdateCompleteEvent(${1:type:String});" },
"StringTextLineFactory",
{ "trigger": "StringTextLineFactory\tStringTextLineFactory" , "contents": "StringTextLineFactory();" },
{ "trigger": "createTextLines\tStringTextLineFactory" , "contents": "createTextLines(${1:callback:Function});" },
"TextFlowTextLineFactory",
{ "trigger": "TextFlowTextLineFactory\tTextFlowTextLineFactory" , "contents": "TextFlowTextLineFactory();" },
{ "trigger": "createTextLines\tTextFlowTextLineFactory" , "contents": "createTextLines(${1:callback:Function},${2:textFlow:TextFlow});" },
"TextLineFactoryBase",
{ "trigger": "TextLineFactoryBase\tTextLineFactoryBase" , "contents": "TextLineFactoryBase();" },
{ "trigger": "getContentBounds\tTextLineFactoryBase" , "contents": "getContentBounds();" },
"TruncationOptions",
{ "trigger": "TruncationOptions\tTruncationOptions" , "contents": "TruncationOptions();" },
"BackgroundColor",
"BaselineOffset",
"BaselineShift",
"BlockProgression",
"Direction",
"FormatValue",
"ITabStopFormat",
"ITextLayoutFormat",
"JustificationRule",
"LeadingModel",
"LineBreak",
"TabStopFormat",
{ "trigger": "TabStopFormat\tTabStopFormat" , "contents": "TabStopFormat();" },
{ "trigger": "apply\tTabStopFormat" , "contents": "apply(${1:incoming:ITabStopFormat});" },
{ "trigger": "concatInheritOnly\tTabStopFormat" , "contents": "concatInheritOnly(${1:incoming:ITabStopFormat});" },
{ "trigger": "concat\tTabStopFormat" , "contents": "concat(${1:incoming:ITabStopFormat});" },
{ "trigger": "copy\tTabStopFormat" , "contents": "copy(${1:values:ITabStopFormat});" },
{ "trigger": "isEqual\tTabStopFormat" , "contents": "isEqual(${1:p1:ITabStopFormat},${2:p2:ITabStopFormat});" },
{ "trigger": "removeClashing\tTabStopFormat" , "contents": "removeClashing(${1:incoming:ITabStopFormat});" },
{ "trigger": "removeMatching\tTabStopFormat" , "contents": "removeMatching(${1:incoming:ITabStopFormat});" },
"TextAlign",
"TextDecoration",
"TextJustify",
"TextLayoutFormat",
{ "trigger": "TextLayoutFormat\tTextLayoutFormat" , "contents": "TextLayoutFormat();" },
{ "trigger": "apply\tTextLayoutFormat" , "contents": "apply(${1:incoming:ITextLayoutFormat});" },
{ "trigger": "concatInheritOnly\tTextLayoutFormat" , "contents": "concatInheritOnly(${1:incoming:ITextLayoutFormat});" },
{ "trigger": "concat\tTextLayoutFormat" , "contents": "concat(${1:incoming:ITextLayoutFormat});" },
{ "trigger": "copy\tTextLayoutFormat" , "contents": "copy(${1:values:ITextLayoutFormat});" },
{ "trigger": "isEqual\tTextLayoutFormat" , "contents": "isEqual(${1:p1:ITextLayoutFormat},${2:p2:ITextLayoutFormat});" },
{ "trigger": "removeClashing\tTextLayoutFormat" , "contents": "removeClashing(${1:incoming:ITextLayoutFormat});" },
{ "trigger": "removeMatching\tTextLayoutFormat" , "contents": "removeMatching(${1:incoming:ITextLayoutFormat});" },
"TLFTypographicCase",
"VerticalAlign",
"WhiteSpaceCollapse",
"ApplyElementIDOperation",
{ "trigger": "ApplyElementIDOperation\tApplyElementIDOperation" , "contents": "ApplyElementIDOperation(${1:operationState:SelectionState},${2:targetElement:FlowElement},${3:newID:String});" },
"ApplyElementStyleNameOperation",
{ "trigger": "ApplyElementStyleNameOperation\tApplyElementStyleNameOperation" , "contents": "ApplyElementStyleNameOperation(${1:operationState:SelectionState},${2:targetElement:FlowElement},${3:newStyleName:String});" },
"ApplyElementUserStyleOperation",
{ "trigger": "ApplyElementUserStyleOperation\tApplyElementUserStyleOperation" , "contents": "ApplyElementUserStyleOperation(${1:operationState:SelectionState},${2:targetElement:FlowElement},${3:styleName:String},${4:value:*});" },
"ApplyFormatOperation",
{ "trigger": "ApplyFormatOperation\tApplyFormatOperation" , "contents": "ApplyFormatOperation(${1:operationState:SelectionState},${2:leafFormat:ITextLayoutFormat},${3:paragraphFormat:ITextLayoutFormat});" },
"ApplyFormatToElementOperation",
{ "trigger": "ApplyFormatToElementOperation\tApplyFormatToElementOperation" , "contents": "ApplyFormatToElementOperation(${1:operationState:SelectionState},${2:targetElement:FlowElement},${3:format:ITextLayoutFormat});" },
"ApplyLinkOperation",
{ "trigger": "ApplyLinkOperation\tApplyLinkOperation" , "contents": "ApplyLinkOperation(${1:operationState:SelectionState},${2:href:String},${3:target:String},${4:extendToLinkBoundary:Boolean});" },
"ApplyTCYOperation",
{ "trigger": "ApplyTCYOperation\tApplyTCYOperation" , "contents": "ApplyTCYOperation(${1:operationState:SelectionState},${2:tcyOn:Boolean});" },
"ClearFormatOnElementOperation",
{ "trigger": "ClearFormatOnElementOperation\tClearFormatOnElementOperation" , "contents": "ClearFormatOnElementOperation(${1:operationState:SelectionState},${2:targetElement:FlowElement},${3:format:ITextLayoutFormat});" },
"ClearFormatOperation",
{ "trigger": "ClearFormatOperation\tClearFormatOperation" , "contents": "ClearFormatOperation(${1:operationState:SelectionState},${2:leafFormat:ITextLayoutFormat},${3:paragraphFormat:ITextLayoutFormat});" },
{ "trigger": "redo\tClearFormatOperation" , "contents": "redo();" },
"CompositeOperation",
{ "trigger": "CompositeOperation\tCompositeOperation" , "contents": "CompositeOperation();" },
{ "trigger": "addOperation\tCompositeOperation" , "contents": "addOperation(${1:operation:FlowOperation});" },
"CopyOperation",
{ "trigger": "CopyOperation\tCopyOperation" , "contents": "CopyOperation(${1:operationState:SelectionState});" },
"CutOperation",
{ "trigger": "CutOperation\tCutOperation" , "contents": "CutOperation(${1:operationState:SelectionState},${2:scrapToCut:TextScrap});" },
"DeleteTextOperation",
{ "trigger": "DeleteTextOperation\tDeleteTextOperation" , "contents": "DeleteTextOperation(${1:operationState:SelectionState});" },
"FlowElementOperation",
{ "trigger": "FlowElementOperation\tFlowElementOperation" , "contents": "FlowElementOperation(${1:operationState:SelectionState},${2:targetElement:FlowElement});" },
"FlowOperation",
{ "trigger": "FlowOperation\tFlowOperation" , "contents": "FlowOperation(${1:textFlow:TextFlow});" },
{ "trigger": "canUndo\tFlowOperation" , "contents": "canUndo();" },
{ "trigger": "doOperation\tFlowOperation" , "contents": "doOperation();" },
{ "trigger": "redo\tFlowOperation" , "contents": "redo();" },
{ "trigger": "undo\tFlowOperation" , "contents": "undo();" },
"FlowTextOperation",
{ "trigger": "FlowTextOperation\tFlowTextOperation" , "contents": "FlowTextOperation(${1:operationState:SelectionState});" },
{ "trigger": "redo\tFlowTextOperation" , "contents": "redo();" },
"InsertInlineGraphicOperation",
{ "trigger": "InsertInlineGraphicOperation\tInsertInlineGraphicOperation" , "contents": "InsertInlineGraphicOperation(${1:operationState:SelectionState},${2:source:Object},${3:width:Object},${4:height:Object});" },
{ "trigger": "redo\tInsertInlineGraphicOperation" , "contents": "redo();" },
"InsertTextOperation",
{ "trigger": "InsertTextOperation\tInsertTextOperation" , "contents": "InsertTextOperation(${1:operationState:SelectionState},${2:text:String});" },
{ "trigger": "redo\tInsertTextOperation" , "contents": "redo();" },
"ModifyInlineGraphicOperation",
{ "trigger": "ModifyInlineGraphicOperation\tModifyInlineGraphicOperation" , "contents": "ModifyInlineGraphicOperation(${1:operationState:SelectionState},${2:source:Object},${3:width:Object},${4:height:Object});" },
"PasteOperation",
{ "trigger": "PasteOperation\tPasteOperation" , "contents": "PasteOperation(${1:operationState:SelectionState},${2:textScrap:TextScrap});" },
"RedoOperation",
{ "trigger": "RedoOperation\tRedoOperation" , "contents": "RedoOperation(${1:operation:FlowOperation});" },
"SplitParagraphOperation",
{ "trigger": "SplitParagraphOperation\tSplitParagraphOperation" , "contents": "SplitParagraphOperation(${1:operationState:SelectionState});" },
"UndoOperation",
{ "trigger": "UndoOperation\tUndoOperation" , "contents": "UndoOperation(${1:op:FlowOperation});" },
"CharacterUtil",
{ "trigger": "isHighSurrogate\tCharacterUtil" , "contents": "isHighSurrogate(${1:charCode:int});" },
{ "trigger": "isLowSurrogate\tCharacterUtil" , "contents": "isLowSurrogate(${1:charCode:int});" },
{ "trigger": "isWhitespace\tCharacterUtil" , "contents": "isWhitespace(${1:charCode:int});" },
"NavigationUtil",
{ "trigger": "endOfDocument\tNavigationUtil" , "contents": "endOfDocument(${1:range:TextRange});" },
{ "trigger": "endOfLine\tNavigationUtil" , "contents": "endOfLine(${1:range:TextRange});" },
{ "trigger": "endOfParagraph\tNavigationUtil" , "contents": "endOfParagraph(${1:range:TextRange});" },
{ "trigger": "nextAtomPosition\tNavigationUtil" , "contents": "nextAtomPosition(${1:flowRoot:TextFlow},${2:absolutePos:int});" },
{ "trigger": "nextCharacter\tNavigationUtil" , "contents": "nextCharacter(${1:range:TextRange});" },
{ "trigger": "nextLine\tNavigationUtil" , "contents": "nextLine(${1:range:TextRange});" },
{ "trigger": "nextPage\tNavigationUtil" , "contents": "nextPage(${1:range:TextRange});" },
{ "trigger": "nextWordPosition\tNavigationUtil" , "contents": "nextWordPosition(${1:flowRoot:TextFlow},${2:absolutePos:int});" },
{ "trigger": "nextWord\tNavigationUtil" , "contents": "nextWord(${1:range:TextRange});" },
{ "trigger": "previousAtomPosition\tNavigationUtil" , "contents": "previousAtomPosition(${1:flowRoot:TextFlow},${2:absolutePos:int});" },
{ "trigger": "previousCharacter\tNavigationUtil" , "contents": "previousCharacter(${1:range:TextRange});" },
{ "trigger": "previousLine\tNavigationUtil" , "contents": "previousLine(${1:range:TextRange});" },
{ "trigger": "previousPage\tNavigationUtil" , "contents": "previousPage(${1:range:TextRange});" },
{ "trigger": "previousWordPosition\tNavigationUtil" , "contents": "previousWordPosition(${1:flowRoot:TextFlow},${2:absolutePos:int});" },
{ "trigger": "previousWord\tNavigationUtil" , "contents": "previousWord(${1:range:TextRange});" },
{ "trigger": "startOfDocument\tNavigationUtil" , "contents": "startOfDocument(${1:range:TextRange});" },
{ "trigger": "startOfLine\tNavigationUtil" , "contents": "startOfLine(${1:range:TextRange});" },
{ "trigger": "startOfParagraph\tNavigationUtil" , "contents": "startOfParagraph(${1:range:TextRange});" },
"IOperation",
{ "trigger": "performRedo\tIOperation" , "contents": "performRedo();" },
{ "trigger": "performUndo\tIOperation" , "contents": "performUndo();" },
"IUndoManager",
{ "trigger": "canRedo\tIUndoManager" , "contents": "canRedo();" },
{ "trigger": "canUndo\tIUndoManager" , "contents": "canUndo();" },
{ "trigger": "clearAll\tIUndoManager" , "contents": "clearAll();" },
{ "trigger": "clearRedo\tIUndoManager" , "contents": "clearRedo();" },
{ "trigger": "peekRedo\tIUndoManager" , "contents": "peekRedo();" },
{ "trigger": "peekUndo\tIUndoManager" , "contents": "peekUndo();" },
{ "trigger": "popRedo\tIUndoManager" , "contents": "popRedo();" },
{ "trigger": "popUndo\tIUndoManager" , "contents": "popUndo();" },
{ "trigger": "pushRedo\tIUndoManager" , "contents": "pushRedo(${1:operation:IOperation});" },
{ "trigger": "pushUndo\tIUndoManager" , "contents": "pushUndo(${1:operation:IOperation});" },
{ "trigger": "redo\tIUndoManager" , "contents": "redo();" },
{ "trigger": "undo\tIUndoManager" , "contents": "undo();" },
"UndoManager",
{ "trigger": "UndoManager\tUndoManager" , "contents": "UndoManager();" },
{ "trigger": "canRedo\tUndoManager" , "contents": "canRedo();" },
{ "trigger": "canUndo\tUndoManager" , "contents": "canUndo();" },
{ "trigger": "clearAll\tUndoManager" , "contents": "clearAll();" },
{ "trigger": "clearRedo\tUndoManager" , "contents": "clearRedo();" },
{ "trigger": "peekRedo\tUndoManager" , "contents": "peekRedo();" },
{ "trigger": "peekUndo\tUndoManager" , "contents": "peekUndo();" },
{ "trigger": "popRedo\tUndoManager" , "contents": "popRedo();" },
{ "trigger": "popUndo\tUndoManager" , "contents": "popUndo();" },
{ "trigger": "pushRedo\tUndoManager" , "contents": "pushRedo(${1:operation:IOperation});" },
{ "trigger": "pushUndo\tUndoManager" , "contents": "pushUndo(${1:operation:IOperation});" },
{ "trigger": "redo\tUndoManager" , "contents": "redo();" },
{ "trigger": "undo\tUndoManager" , "contents": "undo();" }
        ]
}